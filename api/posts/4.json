{"total":49,"pageSize":12,"pageCount":5,"data":[{"title":"Kafka-Consumer","uid":"536c69a65ba648fdf100fa15f3717346","slug":"Kafka-Consumer","date":"2019-07-17T12:22:08.000Z","updated":"2022-03-03T15:50:06.276Z","comments":true,"path":"api/articles/Kafka-Consumer.json","cover":[],"text":"kafka-consumer 参数配置 以及默认值参数配置以及默认值 Consumer 一些概念消费者 Consumerkafka 消费者，消费kafka队列里的消息，可以有多种语言实现， python java scala Go …, consumer group 即是由多个独...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"kafka","slug":"kafka","count":4,"path":"api/categories/kafka.json"}],"tags":[{"name":"kafka","slug":"kafka","count":3,"path":"api/tags/kafka.json"},{"name":"consumer","slug":"consumer","count":1,"path":"api/tags/consumer.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Kafka-Producer","uid":"4b07e4e83f2c420c552350b44033d1ab","slug":"Kafka-Producer","date":"2019-07-10T10:26:01.000Z","updated":"2022-08-31T03:41:51.579Z","comments":true,"path":"api/articles/Kafka-Producer.json","cover":[],"text":" kafka 负责向消息队列 写入消息。 kafka producer 要比 kafka consumer 简单一点，因为它不涉及复杂的组件管理，与其他的 producer 之间没有关联， 因此实现起来也比较简单。目前， kafka producer 的首要功能就是向某个 top...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"kafka","slug":"kafka","count":4,"path":"api/categories/kafka.json"}],"tags":[{"name":"kafak","slug":"kafak","count":1,"path":"api/tags/kafak.json"},{"name":"producer","slug":"producer","count":1,"path":"api/tags/producer.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"自己写一个spring-boot-start","uid":"802c655d6d6544d494d9d5e09a52a6ba","slug":"自己写一个spring-boot-start","date":"2019-07-04T11:33:13.000Z","updated":"2022-03-03T15:49:41.563Z","comments":true,"path":"api/articles/自己写一个spring-boot-start.json","cover":[],"text":" Spring Boot由众多Starter组成，随着版本的推移Starter家族成员也与日俱增。在传统Maven项目中通常将一些层、组件拆分为模块来管理， 以便相互依赖复用，在Spring Boot项目中我们则可以创建自定义Spring Boot Starter来达成该目的。 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"spring","slug":"spring","count":3,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":3,"path":"api/tags/spring.json"},{"name":"springboot","slug":"springboot","count":1,"path":"api/tags/springboot.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Mysql锁概念","uid":"d876370ed0a462e054a9f9f7d4c5e0de","slug":"Mysql锁概念","date":"2019-06-13T12:31:15.000Z","updated":"2022-03-03T15:50:36.095Z","comments":true,"path":"api/articles/Mysql锁概念.json","cover":[],"text":"INNODB 存储引擎中的锁 类型InnoDB 实现了如下两种类型的行锁： 共享锁(S Lock)允许事务读取一行数据 排它锁(X Lock)允许事务更新或者删除一行数据 锁的兼容性如果一个事务请求的锁模式与当前的锁兼容， InnoDB 就将请求的锁授予该事务: 反之, 如果两者...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"mysql","slug":"mysql","count":3,"path":"api/categories/mysql.json"},{"name":"锁","slug":"mysql/锁","count":1,"path":"api/categories/mysql/锁.json"}],"tags":[{"name":"mysql","slug":"mysql","count":3,"path":"api/tags/mysql.json"},{"name":"锁","slug":"锁","count":1,"path":"api/tags/锁.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Mysql索引原理","uid":"ce52f41a783fc1c1eec924862c197938","slug":"Mysql索引原理","date":"2019-06-12T14:18:19.000Z","updated":"2022-03-03T15:51:13.983Z","comments":true,"path":"api/articles/Mysql索引原理.json","cover":[],"text":"索引 在系统中，为了提高查询性能，这里 主要记录 InnoDB存储引擎的索引，InnoDB 支持一下几种常见的索引 B+Tree索引 全文索引 Hash索引 为什么要有索引？索引在MySQL中也叫做 键，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能非常关键，尤其是...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"mysql","slug":"mysql","count":3,"path":"api/categories/mysql.json"}],"tags":[{"name":"mysql","slug":"mysql","count":3,"path":"api/tags/mysql.json"},{"name":"索引","slug":"索引","count":1,"path":"api/tags/索引.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Tomcat源码导入-IntelijIdea","uid":"2702307c6aa4465d038db73bd559dfd1","slug":"Tomcat源码导入-IntelijIdea","date":"2019-06-06T06:18:45.000Z","updated":"2022-03-03T15:51:26.720Z","comments":true,"path":"api/articles/Tomcat源码导入-IntelijIdea.json","cover":[],"text":" 最近有兴趣阅读一下 Tomcat 源码 先把准备工作做一下， 有时间在深入阅读。 嘻嘻maven tomcat idea 官网下载 Tomcat 源码包官网 我这里用到的 tomcat 版本是 8.5.41. 项目结构 新建一个 目录 tomcat8.5-src将源码包解压到该...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"tomcat","slug":"tomcat","count":1,"path":"api/categories/tomcat.json"}],"tags":[{"name":"maven","slug":"maven","count":2,"path":"api/tags/maven.json"},{"name":"tomcat","slug":"tomcat","count":1,"path":"api/tags/tomcat.json"},{"name":"idea","slug":"idea","count":1,"path":"api/tags/idea.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"mysql查询计划查看","uid":"d50659b13cff259d9728e80e6b8aee70","slug":"mysql查询计划查看","date":"2019-06-05T08:24:52.000Z","updated":"2022-03-03T15:50:13.675Z","comments":true,"path":"api/articles/mysql查询计划查看.json","cover":[],"text":"MySql提供了EXPLAIN语法用来进行查询分析，在SQL语句前加一个”EXPLAIN”即可。比如我们要分析如下SQL语句： explain select * from table where table.id = 1 运行上面的sql语句后你会看到，下面的表头信息： idQu...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"mysql","slug":"mysql","count":3,"path":"api/categories/mysql.json"}],"tags":[{"name":"mysql","slug":"mysql","count":3,"path":"api/tags/mysql.json"},{"name":"查询计划","slug":"查询计划","count":1,"path":"api/tags/查询计划.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Spring-AOP详解","uid":"bfa33a5fe2e0aa639906339c30ac4485","slug":"Spring-AOP详解","date":"2019-06-04T06:51:48.000Z","updated":"2022-03-03T15:50:52.810Z","comments":true,"path":"api/articles/Spring-AOP详解.json","cover":[],"text":"springDOC 将重复性的逻辑代码横切出来其实很容易(我们简单可认为就是封装成一个类就好了)，但我们要将这些被我们横切出来的逻辑代码融合到业务逻辑中，来完成和之前(没抽取前)一样的功能！这就是AOP首要解决的问题了！这样一来，我们就在写业务时只关心业务代码，而不用关心与业务无...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"spring","slug":"spring","count":3,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":3,"path":"api/tags/spring.json"},{"name":"aop","slug":"aop","count":1,"path":"api/tags/aop.json"},{"name":"动态代理","slug":"动态代理","count":1,"path":"api/tags/动态代理.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2019-04-28T10:07:13.000Z","updated":"2019-04-28T10:07:13.000Z","comments":true,"path":"api/articles/hello-world.json","cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":432,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Apache-AB性能测试工具","uid":"ff81db1204df3c00c93bb459f070d6f2","slug":"Apache-AB性能测试工具","date":"2019-04-28T10:03:21.000Z","updated":"2019-04-28T10:08:30.000Z","comments":true,"path":"api/articles/Apache-AB性能测试工具.json","cover":null,"text":"ApacheAB 官方Doc Apache AB 性能测试工具，这是 apache 免费自带的 性能测试工具, 就在 apache bin目录下，他能模拟多个并发请求，主要用来测试你的 服务每秒能承受多少并发请求。 命令ab -n 3000 -c 3000 http:&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"apacheAB","slug":"apacheAB","count":1,"path":"api/tags/apacheAB.json"},{"name":"并发","slug":"并发","count":1,"path":"api/tags/并发.json"},{"name":"性能测试工具","slug":"性能测试工具","count":1,"path":"api/tags/性能测试工具.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Kafka 入门","uid":"937bc65e7fc0650a79730217f9c7b325","slug":"Kafka-入门","date":"2019-04-28T07:08:15.000Z","updated":"2022-03-03T15:51:22.323Z","comments":true,"path":"api/articles/Kafka-入门.json","cover":[],"text":"英文文档 | 中文文档 Kafka 是由 LinkedIn 开发的一个分布式的消息系统，使用 Scala 编写，它以可水平扩展和高吞吐率而被广泛使用。 Mac 安装kafka# 会自动 安装会依赖zookeeper brew install kafka # 启动 zookeepe...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"kafka","slug":"kafka","count":4,"path":"api/categories/kafka.json"}],"tags":[{"name":"kafka","slug":"kafka","count":3,"path":"api/tags/kafka.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Spring Bean生命周期","uid":"be477fe08f671338b34bfe6576dd4bfb","slug":"Spring-Bean生命周期","date":"2019-04-16T15:02:12.000Z","updated":"2019-06-04T06:57:21.000Z","comments":true,"path":"api/articles/Spring-Bean生命周期.json","cover":[],"text":" 本篇文章记录一下Spring中,BeanFactory 与 ApplicationContext 中 bean 的生命周期过程，参考网上资料,总结如下 BeanFactory 当调用者调用 getBean() 想容器请求一个bean时,如果容器注册了 Instantiation...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"spring","slug":"spring","count":3,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":3,"path":"api/tags/spring.json"},{"name":"bean生命周期","slug":"bean生命周期","count":1,"path":"api/tags/bean生命周期.json"},{"name":"ApplicationContext","slug":"ApplicationContext","count":1,"path":"api/tags/ApplicationContext.json"},{"name":"BeanFactory","slug":"BeanFactory","count":1,"path":"api/tags/BeanFactory.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}