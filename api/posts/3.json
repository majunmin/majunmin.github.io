{"total":49,"pageSize":12,"pageCount":5,"data":[{"title":"docker-compose etcd","uid":"2c7dd58c559020b938dd674699ae2dad","slug":"docker-compose-etcd","date":"2022-06-20T08:53:05.000Z","updated":"2022-06-20T09:00:41.662Z","comments":true,"path":"api/articles/docker-compose-etcd.json","cover":[],"text":"codedocker-compose.yml version: &#39;3&#39; networks: etcd-net: driver: bridge # 网桥模式 volumes: etcd1_data: # 挂在到 本地数据卷 名 driver: local etcd2...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"docker","slug":"docker","count":2,"path":"api/tags/docker.json"},{"name":"docker-compose","slug":"docker-compose","count":1,"path":"api/tags/docker-compose.json"},{"name":"etcd","slug":"etcd","count":1,"path":"api/tags/etcd.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"golang ChecksumMismath Problem Resolve","uid":"bcbdd392335684c9104bdd4f64660df8","slug":"golang-ChecksumMismath-Problem-Resolve","date":"2022-03-04T10:31:53.000Z","updated":"2022-08-31T08:29:25.613Z","comments":true,"path":"api/articles/golang-ChecksumMismath-Problem-Resolve.json","cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"hexo中插入图片","uid":"ffad35a1622d678553fcb007d75f9511","slug":"hexo中插入图片","date":"2022-03-03T15:52:29.000Z","updated":"2022-03-03T16:35:40.358Z","comments":true,"path":"api/articles/hexo中插入图片.json","cover":null,"text":"在 hexo 中使用 图片, 有如下几种方式: 1. 在 资源目录下 创建图片 hexo 配置文件 _config.yml post_asset_folder: true # 创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹 当执行命令 hexo new &quot;t...","link":"","photos":[],"count_time":{"symbolsCount":516,"symbolsTime":"1 mins."},"categories":[{"name":"hexo","slug":"hexo","count":2,"path":"api/categories/hexo.json"}],"tags":[{"name":"blog","slug":"blog","count":3,"path":"api/tags/blog.json"},{"name":"image","slug":"image","count":1,"path":"api/tags/image.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"升级hexo-cli的版本","uid":"33a93209a96a0749f2f19c4e853409bf","slug":"升级hexo-cli的版本","date":"2022-03-03T15:26:10.000Z","updated":"2022-03-03T15:48:46.861Z","comments":true,"path":"api/articles/升级hexo-cli的版本.json","cover":[],"text":"最近升级 node版本后,执行 hexo d 就会报错: NFO Copying files from public folder... FATAL &#123; err: TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot...","link":"","photos":[],"count_time":{"symbolsCount":796,"symbolsTime":"1 mins."},"categories":[{"name":"hexo","slug":"hexo","count":2,"path":"api/categories/hexo.json"}],"tags":[{"name":"blog","slug":"blog","count":3,"path":"api/tags/blog.json"},{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"简单计算器实现-逆波兰表达式","uid":"0ad4121ef489a5f287d594c8cbbc513d","slug":"简单计算器实现-逆波兰表达式","date":"2021-09-25T17:16:01.000Z","updated":"2021-09-25T17:19:53.000Z","comments":true,"path":"api/articles/简单计算器实现-逆波兰表达式.json","cover":null,"text":"简单计算器的实现-逆波兰表达式 一般也就是分为两步 将中缀表达式 解析为 后缀(前缀)表达式 eval 计算后缀表达式解析 出 结果 中缀表达式 一般的算数表达式, 操作符以中缀形式出现在操作数之间 前缀表达式 前缀表达式是一种没有括号的算术表达式,与中缀表达式不同的是，其将运算...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":1,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"},{"name":"Algorithm","slug":"Algorithm","count":1,"path":"api/tags/Algorithm.json"},{"name":"逆波兰表达式","slug":"逆波兰表达式","count":1,"path":"api/tags/逆波兰表达式.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Maven dependency Scope","uid":"53e5f1b621546948c5c24222a62321d5","slug":"Maven-dependency-Scope","date":"2020-09-14T07:21:10.000Z","updated":"2020-09-14T07:24:54.000Z","comments":true,"path":"api/articles/Maven-dependency-Scope.json","cover":null,"text":"官网-scope描述 Maven 的作用域分为6种 optional(可选的) compile 默认的scope，表示 dependency 都可以在整个生命周期(编译 运行 测试)中使用. 而且这些dependencies 可以传递依赖 provided 跟compile相似，...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"maven","slug":"maven","count":1,"path":"api/categories/maven.json"}],"tags":[{"name":"maven","slug":"maven","count":2,"path":"api/tags/maven.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JVM-jstat命令解析","uid":"b042f3febe72fcf77aed1d68cd1e61be","slug":"JVM-jstat命令解析","date":"2019-10-16T03:23:24.000Z","updated":"2019-10-16T03:24:55.000Z","comments":true,"path":"api/articles/JVM-jstat命令解析.json","cover":null,"text":" JDK8jstat命令可以查看堆内存各部分的使用量，以及加载类的数量。命令的格式如下: jstat [-命令选项] [vmid] [间隔时间&#x2F;毫秒] [查询次数] 类加载统计jstat -class [pid] Loaded Bytes Unloaded Bytes ...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"jvm","slug":"jvm","count":1,"path":"api/categories/jvm.json"}],"tags":[{"name":"jvm","slug":"jvm","count":1,"path":"api/tags/jvm.json"},{"name":"jstat","slug":"jstat","count":1,"path":"api/tags/jstat.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"linux下监控实时网速","uid":"3191f51398b532ce218b33ad1c80d29d","slug":"linux下监控实时网速","date":"2019-08-13T09:48:52.000Z","updated":"2020-09-14T07:22:38.000Z","comments":true,"path":"api/articles/linux下监控实时网速.json","cover":[],"text":" NetHogs是一个小型的’net top’工具,不像大多数工具那样拖慢每个协议或者是每个子网的速度而是按照进程进行带宽分组.NetHogs NetHogs不需要依赖载入某个特殊的内核模块. 如果发生了网络阻塞你可以启动NetHogs立即看到哪个PID造成的这种状况.这样就很容...","link":"","photos":[],"count_time":{"symbolsCount":472,"symbolsTime":"1 mins."},"categories":[{"name":"linux","slug":"linux","count":2,"path":"api/categories/linux.json"}],"tags":[{"name":"linux","slug":"linux","count":2,"path":"api/tags/linux.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"记录一次kafka消费慢解决","uid":"b6fcd1b6df52f1cbb0ed1f5a0d130f42","slug":"记录一次kafka消费慢解决","date":"2019-08-03T10:37:02.000Z","updated":"2019-08-03T10:49:19.000Z","comments":true,"path":"api/articles/记录一次kafka消费慢解决.json","cover":null,"text":" 最近使用kafka, 消费者速度一直跟不上，造成线上消息堆积到了 101亿，困扰了好几天，终于解决了。（其实很简单，因为 kafka消费速度本来也不慢 😂😂😂😂,其实异步+ 批量消费就满可以达到要求了） 主要原因有两个， 对 @Async 注解的不理解 批量消费 – 还有就是通...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"kafka","slug":"kafka","count":4,"path":"api/categories/kafka.json"},{"name":"consumer","slug":"kafka/consumer","count":1,"path":"api/categories/kafka/consumer.json"}],"tags":[{"name":"kafka","slug":"kafka","count":3,"path":"api/tags/kafka.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"redis-info命令详解","uid":"37aab8e3df469d14892fd29b0404f0e2","slug":"redis-info命令详解","date":"2019-07-22T09:44:36.000Z","updated":"2019-07-22T09:46:17.000Z","comments":true,"path":"api/articles/redis-info命令详解.json","cover":null,"text":" redis info 命令详解 192.168.5.244(192.168.5.244:7001)&gt;info all &quot;# Server redis_version:3.0.6 redis_git_sha1:00000000 redis_git_dirty:0 ...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"redis","slug":"redis","count":1,"path":"api/categories/redis.json"}],"tags":[{"name":"redis","slug":"redis","count":1,"path":"api/tags/redis.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Docker概念","uid":"409a977ec1b75954f9585ba9c4856d49","slug":"Docker概念","date":"2019-07-20T07:30:19.000Z","updated":"2022-03-03T15:49:51.094Z","comments":true,"path":"api/articles/Docker概念.json","cover":[],"text":" 了解一下Docker 概念，如今容器技术在互联网行业发展的已经相当成熟，springBoot 微服务 结合 k8s 部署线上服务，安全 高效，充分利用机器资源 ✨镜像镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"docker","slug":"docker","count":1,"path":"api/categories/docker.json"}],"tags":[{"name":"docker","slug":"docker","count":2,"path":"api/tags/docker.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Linux常用命令","uid":"596309cd0250881615133cb44c237a29","slug":"Linux常用命令","date":"2019-07-20T07:03:53.000Z","updated":"2022-10-08T10:36:09.639Z","comments":true,"path":"api/articles/Linux常用命令.json","cover":[],"text":" 记录一下 CentO7 中常用的命令 命令： rpm -q package-name #检查包是否被安装 rpm -qa #列出所有安装的包 shell 脚本参数 传参数$$$ 变量 含义 $0 当前脚本的文件名 $n 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"linux","slug":"linux","count":2,"path":"api/categories/linux.json"}],"tags":[{"name":"linux","slug":"linux","count":2,"path":"api/tags/linux.json"},{"name":"centos7","slug":"centos7","count":1,"path":"api/tags/centos7.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}