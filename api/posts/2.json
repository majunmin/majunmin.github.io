{"total":49,"pageSize":12,"pageCount":5,"data":[{"title":"微服务:API Gateway","uid":"4d9104954e68f25499a2e47d5b935f32","slug":"微服务-API-Gateway","date":"2022-08-17T02:52:25.000Z","updated":"2022-08-29T08:55:33.248Z","comments":true,"path":"api/articles/微服务-API-Gateway.json","cover":[],"text":"什么是 API网关API网关是一个服务器,是系统的唯一入口. 从面向对象设计的角度看，它与外观模式类似. API网关封装了系统内部架构,为每个客户端提供一个定制的API.它可能还具有其它职责,如身份验证、监控、负载均衡、缓存、协议转换、限流熔断、静态响应处理. API网关方式的核...","link":"","photos":[],"count_time":{"symbolsCount":952,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"微服务","slug":"微服务","count":2,"path":"api/tags/微服务.json"},{"name":"gateway","slug":"gateway","count":1,"path":"api/tags/gateway.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"awesome-blog","uid":"237d42f01cd872e0a7556a026d085cc6","slug":"awesome-blog","date":"2022-08-16T12:45:48.000Z","updated":"2022-09-08T05:02:48.272Z","comments":true,"path":"api/articles/awesome-blog.json","cover":null,"text":"golang极客兔兔跟煎鱼学GoO神的博客曹大的博客 Java小马哥的技术博客田小波的技术博客 Architechcleancoders解道凤凰架构 LinuxFRIMIN鸟哥的首页Vamei 算法谭新宇LABULADONG 的算法网站结构之法算法之道kuangbin - 博客园...","link":"","photos":[],"count_time":{"symbolsCount":348,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"blog","slug":"blog","count":3,"path":"api/tags/blog.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"golang-sync.Pool解析","uid":"bc5ccb2e868ae0ec4cf759c000e9d341","slug":"golang-sync-Pool解析","date":"2022-08-11T17:15:26.000Z","updated":"2022-08-15T16:11:27.997Z","comments":true,"path":"api/articles/golang-sync-Pool解析.json","cover":[],"text":"sync.Pool是sync包下的一个组件,可以作为临时取还对象的一个 池子. 作用: 对于很多需要重复分配、回收内存的地方,sync.Pool 是一个很好的选择.频繁地分配、回收内存会给 GC 带来一定的负担,严重的时候会引起 CPU 的毛刺,而 sync.Pool 可以将暂时...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"clickhouse-原理","uid":"7f644a5a0ef8dce45a5c7a8966cb4d95","slug":"clickhouse-原理","date":"2022-08-11T17:00:53.000Z","updated":"2022-09-08T05:05:51.621Z","comments":true,"path":"api/articles/clickhouse-原理.json","cover":[],"text":" Clickhouse 是一个 用于联机分析(OLAP)的 列式存储数据库管理系统(DBMS). 常见的列式数据库有: Vertica、 Paraccel (Actian Matrix，Amazon Redshift)、 Sybase IQ、 Exasol、 Infobright...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"clickhouse","slug":"clickhouse","count":1,"path":"api/tags/clickhouse.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"go build 实现包切换","uid":"d96ad83bba94948fc2ba2a5f3d6fbcb0","slug":"go-build-实现包切换","date":"2022-08-03T04:18:02.000Z","updated":"2022-09-03T07:45:16.171Z","comments":true,"path":"api/articles/go-build-实现包切换.json","cover":null,"text":"参考 Gin 的实现 gin 在 internal/json包中实现了多个 json 包的序列化能力, 默认使用官方encoding/json包. 如何保证这些包不会冲突呢? 这里用到了 go build -tags 的能力. [json.go](https://github.c...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"go","slug":"go","count":2,"path":"api/tags/go.json"},{"name":"go build","slug":"go-build","count":1,"path":"api/tags/go-build.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"洋葱架构","uid":"2797f253c04e63756fe2c781cd7fcc62","slug":"洋葱架构","date":"2022-07-23T06:23:04.000Z","updated":"2022-07-23T07:38:07.305Z","comments":true,"path":"api/articles/洋葱架构.json","cover":[],"text":" 领域是一个知识范畴,他指的是我们的软件要模拟的业务知识。 领域驱动设计的核心是 领域模型,它对一个领域的流程和规则有着深刻的理解,洋葱架构实现了这一概念,并极大地改善了代码的品质,降低了复杂性,并且支持不断地发展企业系统. 详解”洋葱架构”Onion Architecture ...","link":"","photos":[],"count_time":{"symbolsCount":143,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"架构","slug":"架构","count":2,"path":"api/tags/架构.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"六边形架构","uid":"911037a657c82ed3571b8e922dfd713c","slug":"六边形架构","date":"2022-07-23T02:47:02.000Z","updated":"2022-07-23T03:26:42.646Z","comments":true,"path":"api/articles/六边形架构.json","cover":[],"text":"分层架构是一种架构风格,本质是避免耦合,使边界清晰.六边形架构 遵循了分层架构的所有约束与特性，其实使用 端口与适配器这个名字更加合适.因为六边形架构的 边数没有意义. 六边形架构能够充分地区分 领域模型与 输入输出设备之间的界限. 1. 六边形架构(端口与适配器) 一种具有对称...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"架构","slug":"架构","count":2,"path":"api/tags/架构.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"位运算-基础","uid":"0fbff2d6e80a66fc76d63bc97dc872bd","slug":"位运算-基础","date":"2022-07-19T15:29:47.000Z","updated":"2022-07-23T04:15:53.391Z","comments":true,"path":"api/articles/位运算-基础.json","cover":null,"text":" 异或操作x ^ 0 &#x3D; x x ^ 1s &#x3D; ~x &#x2F;&#x2F; 1s &#x3D; ~0 x ^ ~x &#x3D; 1s x ^ x &#x3D; 0 c &#x3D; a ^ b &#x3D;&gt; a ^ c &#x3D; b, b ^...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"},{"name":"位运算","slug":"位运算","count":1,"path":"api/tags/位运算.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"《架构整洁之道》-读书笔记:7-11章","uid":"5ed57e13aea17add1dca2c51e84aa68f","slug":"《架构整洁之道》-读书笔记-7-11章","date":"2022-07-09T06:01:58.000Z","updated":"2022-10-10T16:06:20.546Z","comments":true,"path":"api/articles/《架构整洁之道》-读书笔记-7-11章.json","cover":[],"text":"《架构整洁之道》-读书笔记:7-11章架构整洁之道: 第 7-11 章 主要讲的是 设计原则, SOLID,SOLID 的主要作用是告诉我们如何将数据和函数组织称为类,以及如何将这些类链接起来组合成一个程序. 软件构建中层模块主要目标如下: 使软件可容忍被改动. 是软件更容易被理...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"读书笔记","slug":"读书笔记","count":1,"path":"api/tags/读书笔记.json"},{"name":"架构整洁之道","slug":"架构整洁之道","count":1,"path":"api/tags/架构整洁之道.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Intelij-快捷键","uid":"8f865e6ecd68910430d22fc2c9ae4d28","slug":"Intelij-快捷键","date":"2022-07-07T03:20:28.000Z","updated":"2022-10-08T10:33:41.365Z","comments":true,"path":"api/articles/Intelij-快捷键.json","cover":null,"text":"常用快捷键 Ctrl + Command + G : 选中所有相同的的内容 Ctrl + G : 选中下一个相同的内容 ","link":"","photos":[],"count_time":{"symbolsCount":76,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Intelij","slug":"Intelij","count":1,"path":"api/tags/Intelij.json"},{"name":"快捷键","slug":"快捷键","count":1,"path":"api/tags/快捷键.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"算法-线段树","uid":"f618fdcc06390449a60431b1cd6a19c6","slug":"算法-线段树","date":"2022-06-25T02:07:37.000Z","updated":"2022-10-11T04:01:22.019Z","comments":true,"path":"api/articles/算法-线段树.json","cover":[],"text":"线段树是经常用来维护区间信息的数据结构,线段树可以在 O(logN) 的时间复杂度内实现单点修改,区间修改,区间查询(区间求和,区间最大值,区间最小值) 等操作. 线段树的数据结构 线段树是一种近似的完全二叉树,每个节点代表一个区间,节点的权值. 根节点是整个区间.每个节点的左孩...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"algorithm","slug":"algorithm","count":1,"path":"api/tags/algorithm.json"},{"name":"线段树","slug":"线段树","count":1,"path":"api/tags/线段树.json"},{"name":"区间","slug":"区间","count":1,"path":"api/tags/区间.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"grpc-DNSResolver","uid":"c648812ee90e87a774c05f7906322d9f","slug":"grpc-DNSResolver","date":"2022-06-21T02:58:26.000Z","updated":"2022-10-11T04:01:20.168Z","comments":true,"path":"api/articles/grpc-DNSResolver.json","cover":null,"text":" Coderesolver/resolver.go package resolver import ( \"context\" \"net\" \"net/url\" \"google.golang.org/grpc/attributes\" \"google.golang.org/grpc/cr...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"DNSResolver","slug":"DNSResolver","count":1,"path":"api/tags/DNSResolver.json"},{"name":"grpc","slug":"grpc","count":1,"path":"api/tags/grpc.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}