{"total":49,"pageSize":12,"pageCount":5,"data":[{"title":"fastcache源码分析","uid":"e948586c90ca41ff51fdf8e035fa5502","slug":"fastcache源码解析","date":"2023-05-06T07:52:35.000Z","updated":"2023-05-06T07:52:35.049Z","comments":true,"path":"api/articles/fastcache源码解析.json","cover":[],"text":"fastcache 特性: 快速, 高性能, 多 CPU上 可扩展 线程安全. 多个 goroutine 可以同时读写一个cache 实例 fastcache 设计为 在存储大量的 entry 的场景下 GC free fastcache 当 缓存数量达到阈值时 可以自动 清理 ...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"go","slug":"go","count":2,"path":"api/tags/go.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"},{"name":"fastcache","slug":"fastcache","count":1,"path":"api/tags/fastcache.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"大数据-数据仓库大宽表","uid":"7b7fae18844a9a83dfd9701a806d24e8","slug":"大数据-数据仓库大宽表","date":"2023-03-01T13:17:02.000Z","updated":"2023-03-01T15:59:43.086Z","comments":true,"path":"api/articles/大数据-数据仓库大宽表.json","cover":null,"text":"什么是大宽表, 为什么要使用大宽表, 大宽表有什么优缺点, 设计大宽表要注意什么? 参考一起聊聊数仓大宽表 ","link":"","photos":[],"count_time":{"symbolsCount":62,"symbolsTime":"1 mins."},"categories":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/categories/bigdata.json"}],"tags":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/tags/bigdata.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"golang如何避免循环依赖","uid":"993a22b9aed98844bcb1901957913e2a","slug":"golang如何避免循环依赖","date":"2022-11-18T13:12:04.000Z","updated":"2022-11-18T13:18:17.634Z","comments":true,"path":"api/articles/golang如何避免循环依赖.json","cover":[],"text":"golang 包引用之间不允许循环依赖.循环依赖的本质上是一个错误的设计, 在 golang中 循环依赖是 会产生编译时错误. golang中为什么不允许循环依赖呢? 1. 没有支持循环导入,目的是迫使 Go 程序员更多地考虑程序的依赖关系. - 保持依赖关系图的简洁。 - 快速...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Go-Test-Gomonkey使用","uid":"03cc55fb6473717cac5c2d4cd07b1cc0","slug":"Go-Test-Gomonkey使用","date":"2022-11-14T11:54:08.000Z","updated":"2022-11-14T11:54:08.621Z","comments":true,"path":"api/articles/Go-Test-Gomonkey使用.json","cover":null,"text":"golang的单测, 有一些约定, 例如文件名是 xxx.go, 测试文件名必须是 xxx_test.go, 且测试函数的方法名 都是以 Test开头, 使用go test 命令, 有时发现mock不住,一般都是内联(简短)函数mock失败,可以执行的时候加上编译条件禁止内联 -...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"gomonkey","slug":"gomonkey","count":1,"path":"api/tags/gomonkey.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Go-Test-Convey使用","uid":"7197218ba2b31b3e36651d378424a532","slug":"Go-Test-Convey使用","date":"2022-11-14T11:53:51.000Z","updated":"2022-11-14T11:53:51.655Z","comments":true,"path":"api/articles/Go-Test-Convey使用.json","cover":[],"text":"ConveyWiki Feature: 直接与 go test 集成 全自动的 WEBUI(与 go test 一起工作) 大量的回归测试 展示测试覆盖率 可读的,彩色控制台输出(可以被其他人理解) 测试代码自动生成 桌面通知(optional) 立即打开问题行. 1. Why ...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"convey","slug":"convey","count":1,"path":"api/tags/convey.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Go-Test-gomock使用","uid":"301b2e78436f0e9c40fa9a9acf52a404","slug":"Go-Test-gomock使用","date":"2022-11-14T11:53:38.000Z","updated":"2022-11-14T11:53:38.199Z","comments":true,"path":"api/articles/Go-Test-gomock使用.json","cover":null,"text":"写出可测试 的代码 至关重要. 可以保证代码的稳定性. 帮助程序员减少bug. gomock 是一个go官方的模拟框架.gomock的使用场景: IO类型的数据, 本地文件,数据库,网络API,RPC等 依赖的服务还没有开发好, 这时候可以自己模拟一个服务, 加快开发进度提升开发...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"gomock","slug":"gomock","count":1,"path":"api/tags/gomock.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"freecache源码解析","uid":"33024321d4d721b36bc422db43cf754d","slug":"freecache源码解析","date":"2022-10-10T15:59:17.000Z","updated":"2022-10-10T17:01:20.789Z","comments":true,"path":"api/articles/freecache源码解析.json","cover":[],"text":"代码仓库地址 freeCache 相比较 golang 的原生map实现缓存,可以通过减少指针的数量避免 GC压力,无论存储了多少数据,内部只会占用 512个指针, 数据集 通过 hash(key) 被分片256个 segment,每个 segment 有两个指针, 一个存储键和...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"bigcache源码解析","uid":"411297e7dedff7a6e68a4f8255b55a82","slug":"bigcache源码解析","date":"2022-10-10T15:58:44.000Z","updated":"2022-10-10T17:02:41.761Z","comments":true,"path":"api/articles/bigcache源码解析.json","cover":[],"text":"[TOC] Bigcache 的特点:并发支持,快速, 过期大量条目而不影响性能.bigcache将 缓存条目放在了堆上,节省了GC. 为了实现这一点. 需要对字节切片进行操作. 因此涉及到缓存条目的序列化与反序列化. bigcache, freecache 和 map 的基准测...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"},{"name":"bigcache","slug":"bigcache","count":1,"path":"api/tags/bigcache.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"大数据相关的一些名词","uid":"abbd863cb849430f5ba6ae97c8807bd7","slug":"大数据相关的一些名词","date":"2022-09-09T16:36:11.000Z","updated":"2023-05-11T06:03:44.625Z","comments":true,"path":"api/articles/大数据相关的一些名词.json","cover":[],"text":" 据仓库(data warehouse) 也可以简称为 DW DH 数据仓库中的分层:1. 数据运营层 ODS ODS(Operation Data Store): 数据准备区,最接近数据源的一层, 也称为 贴源层. 数据仓库中 源头系统的数据通常会原封不动的存储一份. 这称为为...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/categories/bigdata.json"}],"tags":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/tags/bigdata.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Go Context 使用场景","uid":"c851ed248b05eaa2eb5ed28481ee6148","slug":"Go-Context-使用场景","date":"2022-08-31T03:04:55.000Z","updated":"2022-09-03T07:45:14.726Z","comments":true,"path":"api/articles/Go-Context-使用场景.json","cover":[],"text":"context 使用场景1 超时控制实际使用中, context 经常和 select 关键字一起使用. 用于监听 context 结束 取消. import ( \"context\" \"fmt\" \"time\" ) func testTimeout() &#123; timerCt...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"context","slug":"context","count":2,"path":"api/tags/context.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Go源码-context","uid":"bd18eec6e0045068932a65759db44fe4","slug":"Go源码-context","date":"2022-08-30T15:39:07.000Z","updated":"2022-10-11T04:01:23.554Z","comments":true,"path":"api/articles/Go源码-context.json","cover":[],"text":"在go服务器中,通常 每个传入的请求都会在自己的goroutine中进行处理. 请求处理程序通常会启动额外的goroutine来访问数据库 或者第三方服务.处理请求的一组goroutine通常需要访问特定于请求的值: 例如userid, request_id, token,tim...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"context","slug":"context","count":2,"path":"api/tags/context.json"},{"name":"源码剖析","slug":"源码剖析","count":1,"path":"api/tags/源码剖析.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"微服务 Trace","uid":"9a85a1a2b7a6a9bc3209cb287c73c69a","slug":"微服务-Trace","date":"2022-08-18T04:46:07.000Z","updated":"2022-08-29T08:51:32.897Z","comments":true,"path":"api/articles/微服务-Trace.json","cover":null,"text":"Spection Trace 语义Trace代表一个调用链. 通常， 一个 Trace 可以被理解为一系列span 组成的有向无环图(DAG), span 之间的边称为 Reference. SpanSpan 表示一个跨进程的 RPC 或者进程内部的一个过程. 每个span 可以...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"微服务","slug":"微服务","count":2,"path":"api/tags/微服务.json"},{"name":"trace","slug":"trace","count":1,"path":"api/tags/trace.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}