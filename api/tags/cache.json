{"name":"cache","slug":"cache","count":3,"postlist":[{"title":"bigcache源码解析","uid":"411297e7dedff7a6e68a4f8255b55a82","slug":"bigcache源码解析","date":"2022-10-10T15:58:44.000Z","updated":"2022-10-10T17:02:41.761Z","comments":true,"path":"api/articles/bigcache源码解析.json","keywords":null,"cover":[],"text":"[TOC] Bigcache 的特点:并发支持,快速, 过期大量条目而不影响性能.bigcache将 缓存条目放在了堆上,节省了GC. 为了实现这一点. 需要对字节切片进行操作. 因此涉及到缓存条目的序列化与反序列化. bigcache, freecache 和 map 的基准测...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"},{"name":"bigcache","slug":"bigcache","count":1,"path":"api/tags/bigcache.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"freecache源码解析","uid":"33024321d4d721b36bc422db43cf754d","slug":"freecache源码解析","date":"2022-10-10T15:59:17.000Z","updated":"2022-10-10T17:01:20.789Z","comments":true,"path":"api/articles/freecache源码解析.json","keywords":null,"cover":[],"text":"代码仓库地址 freeCache 相比较 golang 的原生map实现缓存,可以通过减少指针的数量避免 GC压力,无论存储了多少数据,内部只会占用 512个指针, 数据集 通过 hash(key) 被分片256个 segment,每个 segment 有两个指针, 一个存储键和...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"fastcache源码分析","uid":"e948586c90ca41ff51fdf8e035fa5502","slug":"fastcache源码解析","date":"2023-05-06T07:52:35.000Z","updated":"2023-05-06T07:52:35.049Z","comments":true,"path":"api/articles/fastcache源码解析.json","keywords":null,"cover":[],"text":"fastcache 特性: 快速, 高性能, 多 CPU上 可扩展 线程安全. 多个 goroutine 可以同时读写一个cache 实例 fastcache 设计为 在存储大量的 entry 的场景下 GC free fastcache 当 缓存数量达到阈值时 可以自动 清理 ...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"go","slug":"go","count":2,"path":"api/tags/go.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"},{"name":"fastcache","slug":"fastcache","count":1,"path":"api/tags/fastcache.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}]}