{"title":"Linux常用命令","uid":"596309cd0250881615133cb44c237a29","slug":"Linux常用命令","date":"2019-07-20T07:03:53.000Z","updated":"2022-10-08T10:36:09.639Z","comments":true,"path":"api/articles/Linux常用命令.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>记录一下 CentO7 中常用的命令</p></blockquote>\n<span id=\"more\"></span>\n\n<p>命令：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">rpm -q package-name     #检查包是否被安装\nrpm -qa                 #列出所有安装的包\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>shell 脚本参数 传参数<a href=\"https://www.cnblogs.com/davygeek/p/5670212.html\">$$$</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">变量</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0</td>\n<td align=\"center\">当前脚本的文件名</td>\n</tr>\n<tr>\n<td align=\"center\">$n</td>\n<td align=\"center\">传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</td>\n</tr>\n<tr>\n<td align=\"center\">$#</td>\n<td align=\"center\">传递给脚本或函数的参数个数。</td>\n</tr>\n<tr>\n<td align=\"center\">$*</td>\n<td align=\"center\">传递给脚本或函数的所有参数。</td>\n</tr>\n<tr>\n<td align=\"center\">$@</td>\n<td align=\"center\">传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</td>\n</tr>\n<tr>\n<td align=\"center\">$?</td>\n<td align=\"center\">上个命令的退出状态，或函数的返回值。</td>\n</tr>\n<tr>\n<td align=\"center\">$$</td>\n<td align=\"center\">当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td>\n</tr>\n</tbody></table>\n<h2 id=\"Linux-corn\"><a href=\"#Linux-corn\" class=\"headerlink\" title=\"Linux corn\"></a>Linux corn</h2><p><a href=\"https://www.cnblogs.com/longjshz/p/5779215.html\">定时任务</a></p>\n<table>\n<thead>\n<tr>\n<th>代表意义</th>\n<th>分钟</th>\n<th>小时</th>\n<th>日期</th>\n<th>月份</th>\n<th>周</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数字范围</td>\n<td>0~59</td>\n<td>0~23</td>\n<td>1~31</td>\n<td>1~12</td>\n<td>0~7</td>\n<td>需要执行的命令</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># For details see man 4 crontabs\n\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# | .------------- hour (0 - 23)\n# | | .---------- day of month (1 - 31)\n# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...\n# | | | | .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# | | | | |\n# * * * * * user-name command to be executed\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h2><p>sed命令是一个面向字符流的非交互式编辑器，也就是说<em>sed不允许用户与它进行交互操作</em>。sed是按行来处理文本内容的。在<strong>shell</strong>中，使用sed来批量修改文本内容是非常方便的。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sed\n选项与参数：\n-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。\n-e ：直接在命令列模式上进行 sed 的动作编辑；\n-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；\n-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)\n-i ：直接修改读取的文件内容，而不是输出到终端。\n\nfunction：\na ：新增行， a 的后面可以是字串，而这些字串会在新的一行出现(目前的下一行)\nc ：取代行， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行\nd ：删除行，因为是删除，所以 d 后面通常不接任何参数，直接删除地址表示的行；\ni ：插入行， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；\np ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行\ns ：替换，可以直接进行替换的工作,通常这个 s 的动作可以搭配正规表示法，例如 1,20s&#x2F;old&#x2F;new&#x2F;g 一般是替换符合条件的字符串而不是整行\n\n一般function的前面会有一个地址的限制，例如 [地址]function，表示我们的动作要操作的行。下面我们通过具体的例子直观的看看sed的使用方法。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"gt-gt-与-gt\"><a href=\"#gt-gt-与-gt\" class=\"headerlink\" title=\"&gt;&gt; 与 &gt;\"></a>&gt;&gt; 与 &gt;</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&gt; : 会重写文件，如果文件里面有内容会覆盖。\n&gt;   是定向输出到文件，如果文件不存在，就创建文件；如果文件存在，就将其清空。\n   一般我们备份清理日志文件的时候，就是这种方法：先备份日志，再用&#96;&gt;&#96;，将日志文件清空（文件大小变成0字节）。\n&gt;&gt; :追加文件，也就是如果文件里面有内容会把新内容追加到文件尾。\n    这个是将输出内容追加到目标文件中。如果文件不存在，就创建文件。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"shell-字符串\"><a href=\"#shell-字符串\" class=\"headerlink\" title=\"shell 字符串\"></a>shell 字符串</h3><p>“” 与 ‘’<br><strong>单引号</strong>里的任何字符都会原样输出，单引号字符串中的变量是无效的；<br><strong>单引号</strong>字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</p>\n<p><strong>双引号</strong>里可以有变量<br><strong>双引号</strong>里可以出现转义字符</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">home&#x3D;tj\necho &quot;hello, $&#123;home&#125;&quot;\necho &#39;hello, $&#123;home&#125;&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"命令-grep\"><a href=\"#命令-grep\" class=\"headerlink\" title=\"命令 grep\"></a>命令 grep</h3><ol>\n<li>作用<br>​    Linux系统中grep命令是一种强大的文本搜索工具，</li>\n<li>它能使用正则表达式搜索文本，并把匹 配的行打印出来。</li>\n<li>grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。</li>\n</ol>\n<h4 id=\"主要参数\"><a href=\"#主要参数\" class=\"headerlink\" title=\"主要参数\"></a>主要参数</h4><p> -a或–text   不要忽略二进制的数据。<br>  -A&lt;显示列数&gt;或–after-context&#x3D;&lt;显示列数&gt;   除了显示符合范本样式的那一列之外，并显示该列之后的内容。<br>  -b或–byte-offset   在显示符合范本样式的那一列之前，标示出该列第一个字符的位编号。<br>  -B&lt;显示列数&gt;或–before-context&#x3D;&lt;显示列数&gt;   除了显示符合范本样式的那一列之外，并显示该列之前的内容。<br>  -c或–count   计算符合范本样式的列数。<br>  -C&lt;显示列数&gt;或–context&#x3D;&lt;显示列数&gt;或-&lt;显示列数&gt;   除了显示符合范本样式的那一列之外，并显示该列之前后的内容。<br>  -d&lt;进行动作&gt;或–directories&#x3D;&lt;进行动作&gt;   当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。<br>  -e&lt;范本样式&gt;或–regexp&#x3D;&lt;范本样式&gt;   指定字符串做为查找文件内容的范本样式。<br>  -E或–extended-regexp   将范本样式为延伸的普通表示法来使用。<br>  -f&lt;范本文件&gt;或–file&#x3D;&lt;范本文件&gt;   指定范本文件，其内容含有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每列一个范本样式。<br>  -F或–fixed-regexp   将范本样式视为固定字符串的列表。<br>  -G或–basic-regexp   将范本样式视为普通的表示法来使用。<br>  -h或–no-filename   在显示符合范本样式的那一列之前，不标示该列所属的文件名称。<br>  -H或–with-filename   在显示符合范本样式的那一列之前，表示该列所属的文件名称。<br>  -i或–ignore-case   忽略字符大小写的差别。<br>  -l或–file-with-matches   列出文件内容符合指定的范本样式的文件名称。<br>  -L或–files-without-match   列出文件内容不符合指定的范本样式的文件名称。<br>  -n或–line-number   在显示符合范本样式的那一列之前，标示出该列的列数编号。<br>  -q或–quiet或–silent   不显示任何信息。<br>  -r或–recursive   此参数的效果和指定“-d recurse”参数相同。<br>  -s或–no-messages   不显示错误信息。<br>  <strong>-v或–revert-match   反转查找。</strong><br>  -V或–version   显示版本信息。<br>  <strong>-w或–word-regexp   只显示全字符合的列。</strong>如 “grep -w magic” 匹配 magic 不匹配magical<br>  -x或–line-regexp   只显示全列符合的列。<br>  -y   此参数的效果和指定“-i”参数相同。</p>\n<p>举例： 查找 &#x2F;etc&#x2F;profile文件 去掉 空行，去掉注释行(以#开头)<br>grep -v ‘^$’ &#x2F;etc&#x2F;profile |grep -v ‘^#’</p>\n<h3 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h3><p><img src=\"http://blog.chinaunix.net/uid-23302288-id-3785105.html\" alt=\"awk命令详解\"></p>\n<p>awk是行处理器: 相比较屏幕处理的优点，在处理庞大文件时不会出现内存溢出或是处理缓慢的问题，通常用来格式化文本信息</p>\n<p>awk处理过程: 依次对每一行进行处理，然后输出</p>\n<p>awk:（将一行分为多个字段做处理）（重点）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">awk [-F  field-separator]  &#39;commands&#39;  input-file(s)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其中，<em>commands</em> 是真正<em>awk</em>命令，*[-F域分隔符]*是可选的。default : 空格 * input-file(s) *是待处理的文件。<br>在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">last -n 5 | awk  &#39;&#123;print $1&#125;&#39; # 去除最后5行  打印第一个字段(域)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-一些注意的地方\" data-language=\"一些注意的地方\"><code class=\"language-一些注意的地方\">$0           表示整个当前行\n$1           每行第一个字段\nNF          字段数量变量\nNR          每行的记录号，多文件记录递增\nFNR        与NR类似，不过多文件记录不递增，每个文件都从1开始\n\\t            制表符\n\\n           换行符\nFS          BEGIN时定义分隔符\nRS       输入的记录分隔符， 默认为换行符(即文本是按一行一行输入)\n~            匹配，与&#x3D;&#x3D;相比不是精确比较\n!~           不匹配，不精确比较\n&#x3D;&#x3D;         等于，必须全部相等，精确比较\n!&#x3D;           不等于，精确比较\n&amp;&amp;　     逻辑与\n||             逻辑或\n+            匹配时表示1个或1个以上\n&#x2F;[0-9][0-9]+&#x2F;   两个或两个以上数字\n&#x2F;[0-9][0-9]*&#x2F;    一个或一个以上数字\nFILENAME 文件名\nOFS      输出字段分隔符， 默认也是空格，可以改为制表符等\nORS        输出的记录分隔符，默认为换行符,即处理结果也是一行一行输出到屏幕\n-F&#39;[:#&#x2F;]&#39;   定义三个分隔符<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"curl-命令\"><a href=\"#curl-命令\" class=\"headerlink\" title=\"curl 命令\"></a>curl 命令</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常见参数\n    -A&#x2F;--user-agent &lt;string&gt; 设置用户代理发送给服务器，即告诉服务器浏览器为什么\n    -basic 使用HTTP基本验证\n    --tcp-nodelay 使用TCP_NODELAY选项\n    -e&#x2F;--referer &lt;URL&gt; 来源网址，跳转过来的网址\n    --cacert &lt;file&gt; 指定CA证书 (SSL)\n    --compressed 要求返回是压缩的形势，如果文件本身为一个压缩文件，则可以下载至本地\n    -H&#x2F;--header &lt;line&gt;自定义头信息传递给服务器\n    -I&#x2F;--head 只显示响应报文首部信息\n    --limit-rate &lt;rate&gt; 设置传输速度\n    -u&#x2F;--user &lt;user[:password]&gt;设置服务器的用户和密码\n    -0&#x2F;--http1.0 使用HTTP 1.0\n    -o&#x2F;--output\t把输出写到该文件中(必须指定文件绝对路径)\n    -s&#x2F;--silent\t静默模式。不输出任何东西<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>举例：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#取URL返回状态码：\ncurl -s -m 10 -o &#x2F;dev&#x2F;null -w %&#123;http_code&#125; https:&#x2F;&#x2F;www.baidu.com\n\n#检查一批URL的HTTP状态：\ncat url.txt|while read line; do curl -I $line -m 5 --connect-timeout 5 -o &#x2F;dev&#x2F;null -s -w &quot;$line &quot;%&#123;http_code&#125;&quot;\\n&quot;; done&gt;ok.txt\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"linux中-x2F-dev-x2F-null命令\"><a href=\"#linux中-x2F-dev-x2F-null命令\" class=\"headerlink\" title=\"linux中 &#x2F;dev&#x2F;null命令\"></a>linux中 &#x2F;dev&#x2F;null命令</h3><p>&#x2F;dev&#x2F;null ：代表空设备文件<br>0 :表示键盘输入(stdin) </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>：代表重定向到哪里，例如：echo “123” &gt; &#x2F;home&#x2F;123.txt<br>1  ：表示标准输出（stdout），系统默认值是1，所以”&gt;&#x2F;dev&#x2F;null”等同于”1&gt;&#x2F;dev&#x2F;null”<br>2  ：表示标准错误(stderr)<br>&amp;  ：表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1</p></blockquote>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#1、禁止标准输出\n\n[root@zhoucentos log]# cat filename\nwo ai wo jia\n[root@zhoucentos log]# cat filename &gt;&#x2F;dev&#x2F;null\n\n#2、禁止标准错误\n\n[root@zhoucentos log]# rm filename1 \nrm: 无法删除&quot;filename1&quot;: 没有那个文件或目录\n[root@zhoucentos log]# rm filename1 2&gt;&#x2F;dev&#x2F;null\n\n#3、禁止标准输出和标准错误\n\n[root@zhoucentos log]# rm filename1\nrm: 无法删除&quot;filename1&quot;: 没有那个文件或目录\n[root@zhoucentos log]# rm filename1 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1\n\n#4、清除文件的内容\n\n[root@zhoucentos log]# cat filename\nwo ai wo jia\n[root@zhoucentos log]# cat &#x2F;dev&#x2F;null &gt; filename\n[root@zhoucentos log]# cat filename\n\ncommand &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp; &#x3D;&#x3D; command 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;\n\n#1)command:表示shell命令或者为一个可执行程序\n#2)&gt;:表示重定向到哪里\n#3)&#x2F;dev&#x2F;null:表示Linux的空设备文件\n#4)2:表示标准错误输出\n#5)&amp;1:&amp;表示等同于的意思,2&gt;&amp;1,表示2的输出重定向等于于1\n#6)&amp;:表示后台执行,即这条指令执行在后台运行\n\n#1&gt;&#x2F;dev&#x2F;null:表示标准输出重定向到空设备文件,也就是不输出任何信息到终端,不显示任何信息。 \n#2&gt;&amp;1:表示标准错误输出重定向等同于标准输出,因为之前标准输出已经重定向到了空设备文件,所以标准错误输出也重定向到空设备文件。\n\n#这条命令的意思就是在后台执行这个程序,并将错误输出2重定向到标准输出1,然后将标准输出1全部放到&#x2F;dev&#x2F;null文件,也就是清空. \n#所以可以看出” &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 “常用来避免shell命令或者程序等运行中有内容输出。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"if-判断\"><a href=\"#if-判断\" class=\"headerlink\" title=\"if 判断\"></a>if 判断</h2><ol>\n<li>条件测试的表达式：</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">    [ expression ]  # 括号两端必须要有空格\n    [[ expression ]] # 括号两端必须要有空格\n    test expression\n组合测试条件：\n\n-a  # : and\n-o  # : or\n!   # :  非<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>整数比较：</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">-eq # 测试两个整数是否相等\n-ne # 测试两个整数是否不等\n-gt # 测试一个数是否大于另一个数\n-lt # 测试一个数是否小于另一个数\n-ge # 大于或等于\n-le # 小于或等于\n# 命令间的逻辑关系\n\n&amp;&amp;  # 逻辑与：\n        # 第一个条件为假 第二个条件不用在判断，最总结果已经有\n        # 第一个条件为真，第二个条件必须得判断\n\n|| # 逻辑或<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>字符串比较</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&#x3D;&#x3D; # 等于  两边要有空格\n!&#x3D; # 不等\n&gt;  # 大于\n&lt;  # 小于<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>文件测试</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">-z string 测试指定字符是否为空，空着真，非空为假\n-n string 测试指定字符串是否为不空，空为假 非空为真\n-e FILE 测试文件是否存在\n-f file 测试文件是否为普通文件\n-d file 测试指定路径是否为目录\n-r file 测试文件对当前用户是否可读\n-w file 测试文件对当前用户是否可写\n-x file 测试文件对当前用户是都可执行\n-z  是否为空  为空则为真\n-a  是否不空<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"iconv-命令\"><a href=\"#iconv-命令\" class=\"headerlink\" title=\"iconv 命令\"></a>iconv 命令</h2><p><code>iconv</code> 命令是<code>linux</code>下用于文件转编码的常用命令，对于同时使用windows系统和linux系统的同学来说文件转编码也是经常遇到的操作。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"> # 输入&#x2F;输出格式规范：\n  -f, --from-code&#x3D;名称     #原始文本编$$码\n  -t, --to-code&#x3D;名称         #输出编码\n\n# 信息：\n  -l, --list                 　　 #列举所有已知的字符集\n\n# 输出控制：\n  -c                         　　#从输出中忽略无效的字符\n  -o, --output&#x3D;FILE        #输出文件\n  -s, --silent                   #关闭警告\n      --verbose                #打印进度信息\n  -?, --help                    #给出该系统求助列表\n      --usage                   #给出简要的用法信息\n  -V, --version                #打印程序版本号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"SCP\"><a href=\"#SCP\" class=\"headerlink\" title=\"SCP\"></a>SCP</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">\n#  本地向服务器上传文件\nscp -r &#x2F;path&#x2F;to&#x2F;file username@host:&#x2F;path&#x2F;to.file\n\n# 从服务器下载文件\n\nscp -r username@host:&#x2F;path&#x2F;to.file &#x2F;path&#x2F;to&#x2F;file\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":" 记录一下 CentO7 中常用的命令 命令： rpm -q package-name #检查包是否被安装 rpm -qa #列出所有安装的包 shell 脚本参数 传参数$$$ 变量 含义 $0 当前脚本的文件名 $n 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"linux","slug":"linux","count":2,"path":"api/categories/linux.json"}],"tags":[{"name":"linux","slug":"linux","count":2,"path":"api/tags/linux.json"},{"name":"centos7","slug":"centos7","count":1,"path":"api/tags/centos7.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Linux-corn\"><span class=\"toc-text\">Linux corn</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sed\"><span class=\"toc-text\">sed</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gt-gt-%E4%B8%8E-gt\"><span class=\"toc-text\">&gt;&gt; 与 &gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#shell-%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">shell 字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4-grep\"><span class=\"toc-text\">命令 grep</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A6%81%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">主要参数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#awk\"><span class=\"toc-text\">awk</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#curl-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">curl 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#linux%E4%B8%AD-x2F-dev-x2F-null%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">linux中 &#x2F;dev&#x2F;null命令</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if-%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">if 判断</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#iconv-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">iconv 命令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SCP\"><span class=\"toc-text\">SCP</span></a></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Docker概念","uid":"409a977ec1b75954f9585ba9c4856d49","slug":"Docker概念","date":"2019-07-20T07:30:19.000Z","updated":"2022-03-03T15:49:51.094Z","comments":true,"path":"api/articles/Docker概念.json","keywords":null,"cover":[],"text":" 了解一下Docker 概念，如今容器技术在互联网行业发展的已经相当成熟，springBoot 微服务 结合 k8s 部署线上服务，安全 高效，充分利用机器资源 ✨镜像镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"docker","slug":"docker","count":1,"path":"api/categories/docker.json"}],"tags":[{"name":"docker","slug":"docker","count":2,"path":"api/tags/docker.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Kafka-Consumer","uid":"536c69a65ba648fdf100fa15f3717346","slug":"Kafka-Consumer","date":"2019-07-17T12:22:08.000Z","updated":"2022-03-03T15:50:06.276Z","comments":true,"path":"api/articles/Kafka-Consumer.json","keywords":null,"cover":[],"text":"kafka-consumer 参数配置 以及默认值参数配置以及默认值 Consumer 一些概念消费者 Consumerkafka 消费者，消费kafka队列里的消息，可以有多种语言实现， python java scala Go …, consumer group 即是由多个独...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"kafka","slug":"kafka","count":4,"path":"api/categories/kafka.json"}],"tags":[{"name":"kafka","slug":"kafka","count":3,"path":"api/tags/kafka.json"},{"name":"consumer","slug":"consumer","count":1,"path":"api/tags/consumer.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}