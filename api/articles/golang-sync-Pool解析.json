{"title":"golang-sync.Pool解析","uid":"bc5ccb2e868ae0ec4cf759c000e9d341","slug":"golang-sync-Pool解析","date":"2022-08-11T17:15:26.000Z","updated":"2022-08-15T16:11:27.997Z","comments":true,"path":"api/articles/golang-sync-Pool解析.json","keywords":null,"cover":[],"content":"<p>sync.Pool是sync包下的一个组件,可以作为临时取还对象的一个 <code>池子</code>.</p>\n<p>作用: 对于很多需要重复分配、回收内存的地方,<code>sync.Pool</code> 是一个很好的选择.频繁地分配、回收内存会给 GC 带来一定的负担,严重的时候会引起 CPU 的毛刺,<strong>而 <code>sync.Pool</code> 可以将暂时不用的对象缓存起来m待下次需要的时候直接使用,不用再次经过内存分配,复用对象的内存,减轻 GC 的压力,提升系统的性能.</strong></p>\n<p>使用场景:</p>\n<ol>\n<li>当多个 goroutine 都需要创建同⼀个对象的时候，如果 goroutine 数过多,导致对象的创建数⽬剧增,进⽽导致 GC 压⼒增大.形成”并发⼤－占⽤内存⼤－GC 缓慢－处理并发能⼒降低－并发更⼤”这样的恶性循环.</li>\n<li>关键思想就是对象的复用,避免重复创建.销毁.</li>\n</ol>\n<h2 id=\"Pool原理详解\"><a href=\"#Pool原理详解\" class=\"headerlink\" title=\"Pool原理详解\"></a>Pool原理详解</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Pool <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tnoCopy noCopy\n\n\tlocal     unsafe<span class=\"token punctuation\">.</span>Pointer <span class=\"token comment\">// local fixed-size per-P pool, actual type is [P]poolLocal</span>\n\tlocalSize <span class=\"token builtin\">uintptr</span>        <span class=\"token comment\">// size of the local array</span>\n\n\tvictim     unsafe<span class=\"token punctuation\">.</span>Pointer <span class=\"token comment\">// local from previous cycle</span>\n\tvictimSize <span class=\"token builtin\">uintptr</span>        <span class=\"token comment\">// size of victims array</span>\n\n\t<span class=\"token comment\">// New optionally specifies a function to generate</span>\n\t<span class=\"token comment\">// a value when Get would otherwise return nil.</span>\n\t<span class=\"token comment\">// It may not be changed concurrently with calls to Get.</span>\n\tNew <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> any\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>noCopy:</li>\n<li>local:   每个P的本地队列,实际类型为 <code>[P]poolLocal</code></li>\n<li>localSize: </li>\n<li>victicm:</li>\n<li>victicmSize: </li>\n<li>New:      自定义创建对象的回调函数,当pool中没有都可用对象时会调用</li>\n</ul>\n<h3 id=\"1-noCopy\"><a href=\"#1-noCopy\" class=\"headerlink\" title=\"1. noCopy\"></a>1. noCopy</h3><p>nocopy:<br>因为Pool不希望被复制,所以结构体里面有一个<code>noCopy</code>字段, 使用 <code>go vet</code> 工具可以检查用户是否复制了 Pool.</p>\n<p>用户只需要实现这样不需要消耗内存的,仅用于静态分析的结构, 保证对象在第一次使用后不会发生复制.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// noCopy may be embedded into structs which must not be copied</span>\n<span class=\"token comment\">// after the first use.</span>\n<span class=\"token comment\">// noCopy 可以被嵌入结构体来保证其第一次使用后不会在被复制.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// See https://golang.org/issues/8005#issuecomment-190753527</span>\n<span class=\"token comment\">// for details.</span>\n<span class=\"token keyword\">type</span> noCopy <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Lock is a no-op used by -copylocks checker from `go vet`.</span>\n<span class=\"token comment\">// Lock 是一个空操作用来给 `go ve` 的 -copylocks 静态分析</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>noCopy<span class=\"token punctuation\">)</span> <span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>noCopy<span class=\"token punctuation\">)</span> <span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"2-local\"><a href=\"#2-local\" class=\"headerlink\" title=\"2. local\"></a>2. local</h3><p>local字段指向  <code>[P]poolLocal</code> 数组(切片)的指针, localSize 则表示 这个数组的大小. 访问时 P 的 id 对应 <code>[P]poolLocal</code> 下标索引, 这样的设计减少了 多个goroutine 的竞争,提升了性能.</p>\n<h4 id=\"2-1-poolLocal\"><a href=\"#2-1-poolLocal\" class=\"headerlink\" title=\"2.1 poolLocal\"></a>2.1 poolLocal</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> poolLocal <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tpoolLocalInternal\n\n\t<span class=\"token comment\">// 将 poolLocal 补齐至两个缓存行的倍数，防止 false sharing,</span>\n\t<span class=\"token comment\">// 每个缓存行具有 64 bytes，即 512 bit$$</span>\n\t<span class=\"token comment\">// 目前我们的处理器一般拥有 32 * 1024 / 64 = 512 条缓存行</span>\n\t<span class=\"token comment\">// 伪共享，仅占位用,防止在 cache line 上分配多个 poolLocalInternal</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// Prevents false sharing on widespread platforms with$$</span>\n\t<span class=\"token comment\">// 128 mod (cache line size) = 0 .</span>\n\tpad <span class=\"token punctuation\">[</span><span class=\"token number\">128</span> <span class=\"token operator\">-</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>poolLocalInternal<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h4 id=\"2-2-poolLocalInternal\"><a href=\"#2-2-poolLocalInternal\" class=\"headerlink\" title=\"2.2 poolLocalInternal\"></a>2.2 poolLocalInternal</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Local per-P Pool appendix.</span>\n<span class=\"token keyword\">type</span> poolLocalInternal <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tprivate any       <span class=\"token comment\">// Can be used only by the respective P.  仅能被各自的 P 获取</span>\n\tshared  poolChain <span class=\"token comment\">// Local P can pushHead/popHead; any P can popTail. 本地P可以从头部取, 其他 P 从尾部取</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h4 id=\"2-3-poolChain\"><a href=\"#2-3-poolChain\" class=\"headerlink\" title=\"2.3 poolChain\"></a>2.3 poolChain</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// poolChain is a dynamically-sized version of poolDequeue.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This is implemented as a doubly-linked list queue of poolDequeues</span>\n<span class=\"token comment\">// where each dequeue is double the size of the previous one. Once a</span>\n<span class=\"token comment\">// dequeue fills up, this allocates a new one and only ever pushes to</span>\n<span class=\"token comment\">// the latest dequeue. Pops happen from the other end of the list and</span>\n<span class=\"token comment\">// once a dequeue is exhausted, it gets removed from the list.</span>\n<span class=\"token keyword\">type</span> poolChain <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// head is the poolDequeue to push to. This is only accessed</span>\n\t<span class=\"token comment\">// by the producer, so doesn't need to be synchronized.</span>\n\thead <span class=\"token operator\">*</span>poolChainElt\n\n\t<span class=\"token comment\">// tail is the poolDequeue to popTail from. This is accessed</span>\n\t<span class=\"token comment\">// by consumers, so reads and writes must be atomic.</span>\n\ttail <span class=\"token operator\">*</span>poolChainElt\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token keyword\">type</span> poolChainElt <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tpoolDequeue\n\n\t<span class=\"token comment\">// next and prev link to the adjacent poolChainElts in this</span>\n\t<span class=\"token comment\">// poolChain.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// next is written atomically by the producer and read</span>\n\t<span class=\"token comment\">// atomically by the consumer. It only transitions from nil to</span>\n\t<span class=\"token comment\">// non-nil.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// prev is written atomically by the consumer and read</span>\n\t<span class=\"token comment\">// atomically by the producer. It only transitions from</span>\n\t<span class=\"token comment\">// non-nil to nil.</span>\n\tnext<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">*</span>poolChainElt\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// poolDequeue is a lock-free fixed-size single-producer,</span>\n<span class=\"token comment\">// multi-consumer queue. The single producer can both push and pop</span>\n<span class=\"token comment\">// from the head, and consumers can pop from the tail.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// It has the added feature that it nils out unused slots to avoid</span>\n<span class=\"token comment\">// unnecessary retention of objects. This is important for sync.Pool,</span>\n<span class=\"token comment\">// but not typically a property considered in the literature.</span>\n<span class=\"token keyword\">type</span> poolDequeue <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// headTail 包含一个 32 位的 head 和一个 32 位的 tail 指针. 这两个值都和 len(vals)-1 取模过.</span>\n\t<span class=\"token comment\">// tail 是队列中最老的数据,head 指向下一个将要填充的 slot</span>\n    <span class=\"token comment\">// slots 的有效范围是 [tail, head),由 consumers 持有.</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// headTail packs together a 32-bit head index and a 32-bit</span>\n\t<span class=\"token comment\">// tail index. Both are indexes into vals modulo len(vals)-1.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// tail = index of oldest data in queue</span>\n\t<span class=\"token comment\">// head = index of next slot to fill</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Slots in the range [tail, head) are owned by consumers.</span>\n\t<span class=\"token comment\">// A consumer continues to own a slot outside this range until</span>\n\t<span class=\"token comment\">// it nils the slot, at which point ownership passes to the</span>\n\t<span class=\"token comment\">// producer.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// The head index is stored in the most-significant bits so</span>\n\t<span class=\"token comment\">// that we can atomically add to it and the overflow is</span>\n\t<span class=\"token comment\">// harmless.</span>\n\theadTail <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// vals 是一个存储 interface&#123;&#125; 的环形队列,它的 size 必须是 2 的幂</span>\n\t<span class=\"token comment\">// 如果 slot 为空,则 vals[i].typ 为空;否则，非空.</span>\n\t<span class=\"token comment\">// 一个 slot 在这时宣告无效: tail 不指向它了，vals[i].typ 为 nil</span>\n\t<span class=\"token comment\">// 由 consumer 设置成 nil，由 producer 读</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// vals is a ring buffer of interface&#123;&#125; values stored in this</span>\n\t<span class=\"token comment\">// dequeue. The size of this must be a power of 2.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// vals[i].typ is nil if the slot is empty and non-nil</span>\n\t<span class=\"token comment\">// otherwise. A slot is still in use until *both* the tail</span>\n\t<span class=\"token comment\">// index has moved beyond it and typ has been set to nil. This</span>\n\t<span class=\"token comment\">// is set to nil atomically by the consumer and read</span>\n\t<span class=\"token comment\">// atomically by the producer.</span>\n\tvals <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>eface\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>poolDequeue 被设计成单生产者，多消费者固定长度&amp;&amp;无锁的 双端队列.<br>   producer 可以从head插入和删除.  consumer可以从尾部pop 数据.</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>headTail 指向队头和队尾, 通过位运算, 将 head  &amp; tail 存入  headTail中.</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220815203335.png\" alt=\"Pool结构体\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220815203400.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们看到 Pool 并没有直接使用 <code>poolDequeue</code>,原因是它的大小是固定的,而 Pool 的大小是没有限制的.<br>因此，在 <code>poolDequeue</code> 之上包装了一下,变成了一个 <code>poolChainElt</code> 的双向链表,可以动态增长.</p></blockquote>\n<h3 id=\"3-victim\"><a href=\"#3-victim\" class=\"headerlink\" title=\"3. victim\"></a>3. victim</h3><p>一轮 GC 完成后,victim 和 victimSize 会分别接管  local  和 localSize,victim 的机制用于减少GC后冷启动导致的性能抖动. 让分配对象更加平滑.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>victim Cache 本来是计算机架构里面的一个概念,是让CPU硬件处理缓存的一种技术, <code>sync.Pool</code>引入的意图在于 降低GC压力的同时增加缓存命中率.</p></blockquote>\n<h3 id=\"4-New\"><a href=\"#4-New\" class=\"headerlink\" title=\"4. New\"></a>4. New</h3><p>当Pool中没有对象可供提供时,会调用 New 生成一个新对象.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"2-源码详解\"><a href=\"#2-源码详解\" class=\"headerlink\" title=\"2. 源码详解\"></a>2. 源码详解</h2><h3 id=\"2-1-Get\"><a href=\"#2-1-Get\" class=\"headerlink\" title=\"2.1. Get\"></a>2.1. Get</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Get selects an arbitrary item from the Pool, removes it from the</span>\n<span class=\"token comment\">// Pool, and returns it to the caller.</span>\n<span class=\"token comment\">// Get may choose to ignore the pool and treat it as empty.</span>\n<span class=\"token comment\">// Callers should not assume any relation between values passed to Put and</span>\n<span class=\"token comment\">// the values returned by Get.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If Get would otherwise return nil and p.New is non-nil, Get returns</span>\n<span class=\"token comment\">// the result of calling p.New.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> any <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> race<span class=\"token punctuation\">.</span>Enabled <span class=\"token punctuation\">&#123;</span>\n\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">Disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 将当前的 goroutine 和 P绑定,禁止被强占,返回当前P对应的 localPool &amp; pid</span>\n\tl<span class=\"token punctuation\">,</span> pid <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">pin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tx <span class=\"token operator\">:=</span> l<span class=\"token punctuation\">.</span>private\n\tl<span class=\"token punctuation\">.</span>private <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Try to pop the head of the local shard. We prefer</span>\n\t\t<span class=\"token comment\">// the head over the tail for temporal locality of</span>\n\t\t<span class=\"token comment\">// reuse.</span>\n\t\tx<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">popHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 尝试从 qita P 的 shared 双端队列尾部头一个对象出来.</span>\n\t\t\tx <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getSlow</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// pool 操作完成之后, 接触非抢占</span>\n\t<span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> race<span class=\"token punctuation\">.</span>Enabled <span class=\"token punctuation\">&#123;</span>\n\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">Enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span><span class=\"token function\">poolRaceAddr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 如果最后还是没有获取到缓存对象,那就直接调用预先设置好的回调函数 `New` 创建一个对象.</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>New <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tx <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> x\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220815204610.png\"></p>\n<h4 id=\"2-1-1-pin\"><a href=\"#2-1-1-pin\" class=\"headerlink\" title=\"2.1.1 pin\"></a>2.1.1 pin</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// pin pins the current goroutine to P, disables preemption and</span>\n<span class=\"token comment\">// returns poolLocal pool for the P and the P's id.</span>\n<span class=\"token comment\">// Caller must call runtime_procUnpin() when done with the pool.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">pin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>poolLocal<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tpid <span class=\"token operator\">:=</span> <span class=\"token function\">runtime_procPin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// In pinSlow we store to local and then to localSize, here we load in opposite order.</span>\n\t<span class=\"token comment\">// Since we've disabled preemption, GC cannot happen in between.</span>\n\t<span class=\"token comment\">// Thus here we must observe local at least as large localSize.</span>\n\t<span class=\"token comment\">// We can observe a newer/larger local, it is fine (we must observe its zero-initialized-ness).</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token function\">runtime_LoadAcquintptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>localSize<span class=\"token punctuation\">)</span> <span class=\"token comment\">// load-acquire</span>\n\tl <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>local                              <span class=\"token comment\">// load-consume</span>\n\t<span class=\"token comment\">// 因为可能存在动态的 P（运行时调整 P 的个数）</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> s <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">indexLocal</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pid\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">pinSlow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>调用方必须在完成取值后,调用 <code>runtime.proc_Unpin()</code> 来取消抢占.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>pin 的作用就是将当前 groutine 和 P 绑定在一起，禁止抢占. 并且返回对应的 poolLocal 以及 P 的 id。</p></blockquote>\n<p>如果 G 被抢占，则 G 的状态从 running 变成 runnable,会被放回 P 的 localq 或 globaq，等待下一次调度.<br>下次再执行时，就不一定是和现在的 P 相结合了. 因为之后会用到 pid,如果被抢占了,有可能接下来使用的 pid 与所绑定的 P 并非同一个.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">pinSlow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>poolLocal<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Retry under the mutex.</span>\n\t<span class=\"token comment\">// Can not lock the mutex while pinned.</span>\n\t<span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tallPoolsMu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> allPoolsMu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tpid <span class=\"token operator\">:=</span> <span class=\"token function\">runtime_procPin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// poolCleanup won't be called while we are pinned.</span>\n\ts <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>localSize\n\tl <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>local\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> s <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">indexLocal</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pid\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>local <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tallPools <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>allPools<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// If GOMAXPROCS changes between GCs, we re-allocate the array and lose the old one.</span>\n\tsize <span class=\"token operator\">:=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tlocal <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>poolLocal<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">StorePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>local<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// store-release</span>\n\t<span class=\"token function\">runtime_StoreReluintptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>localSize<span class=\"token punctuation\">,</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// store-release</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>local<span class=\"token punctuation\">[</span>pid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pid\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因为有一把大锁 <code>allPoolsMu</code>, 所以函数名带有 slow. 锁粒度越大,竞争越多,就越慢.  不过想要上锁的话,先要解除绑定.  原因是锁越大,被阻塞的概率越大,如果还占着 P, 那就浪费资源.</p>\n<h4 id=\"2-1-2-popHead\"><a href=\"#2-1-2-popHead\" class=\"headerlink\" title=\"2.1.2 popHead\"></a>2.1.2 popHead</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>poolChain<span class=\"token punctuation\">)</span> <span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\td <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>head\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Initialize the chain.</span>\n\t\t<span class=\"token keyword\">const</span> initSize <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token comment\">// Must be a power of 2</span>\n\t\td <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>poolChainElt<span class=\"token punctuation\">)</span>\n\t\td<span class=\"token punctuation\">.</span>vals <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>eface<span class=\"token punctuation\">,</span> initSize<span class=\"token punctuation\">)</span>\n\t\tc<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> d\n\t\t<span class=\"token function\">storePoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// The current dequeue is full. Allocate a new one of twice</span>\n\t<span class=\"token comment\">// the size.</span>\n\tnewSize <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n\t<span class=\"token keyword\">if</span> newSize <span class=\"token operator\">>=</span> dequeueLimit <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Can't make it any bigger.</span>\n\t\tnewSize <span class=\"token operator\">=</span> dequeueLimit\n\t<span class=\"token punctuation\">&#125;</span>\n\n\td2 <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>poolChainElt<span class=\"token punctuation\">&#123;</span>prev<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">&#125;</span>\n\td2<span class=\"token punctuation\">.</span>vals <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>eface<span class=\"token punctuation\">,</span> newSize<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> d2\n\t<span class=\"token function\">storePoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span>\n\td2<span class=\"token punctuation\">.</span><span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>poolChain<span class=\"token punctuation\">)</span> <span class=\"token function\">popHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\td <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>head\n\t<span class=\"token keyword\">for</span> d <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 调用 dequeue 的 popHead</span>\n\t\t<span class=\"token keyword\">if</span> val<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">popHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> ok\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// There may still be unconsumed elements in the</span>\n\t\t<span class=\"token comment\">// previous dequeue, so try backing up.</span>\n\t\td <span class=\"token operator\">=</span> <span class=\"token function\">loadPoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>popHead 只会被  producer调用,首先拿到头结点: ,如果头结点不为空,尝试调用 头结点(<code>poolDequeue</code>)的 <code>popHead()</code>.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// 自旋锁的模式,避免加锁.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// popHead removes and returns the element at the head of the queue.</span>\n<span class=\"token comment\">// It returns false if the queue is empty. It must only be called by a</span>\n<span class=\"token comment\">// single producer.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>poolDequeue<span class=\"token punctuation\">)</span> <span class=\"token function\">popHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> slot <span class=\"token operator\">*</span>eface\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\tptrs <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">)</span>\n\t\thead<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>ptrs<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> tail <span class=\"token operator\">==</span> head <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Queue is empty.</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token comment\">// head 是队头的前一个位置,所以要后移一位.</span>\n\t\t<span class=\"token comment\">// 在读出 slot 的 value 之前就将 head值 -1,取消对这个 slot 的控制.</span>\n\t\t<span class=\"token comment\">// Confirm tail and decrement head. We do this before</span>\n\t\t<span class=\"token comment\">// reading the value to take back ownership of this</span>\n\t\t<span class=\"token comment\">// slot.</span>\n\t\thead<span class=\"token operator\">--</span>\n\t\tptrs2 <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">,</span> ptrs<span class=\"token punctuation\">,</span> ptrs2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// We successfully took back slot.</span>\n\t\t\tslot <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">[</span>head<span class=\"token operator\">&amp;</span><span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tval <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> val <span class=\"token operator\">==</span> <span class=\"token function\">dequeueNil</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tval <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// Zero the slot. Unlike popTail, this isn't racing with</span>\n\t<span class=\"token comment\">// pushHead, so we don't need to be careful here.</span>\n\t<span class=\"token operator\">*</span>slot <span class=\"token operator\">=</span> eface<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>通过 自旋锁的模式(for 循环 + CAS)  避免加锁.</p>\n<h4 id=\"2-1-3-getSlow\"><a href=\"#2-1-3-getSlow\" class=\"headerlink\" title=\"2.1.3 getSlow\"></a>2.1.3 getSlow</h4><p>如果在 shared里面没有获得缓存对象,则继续调用 <code>Pool.getSlow</code>, 尝试从其他 P 的 <code>poolLocal</code> 中偷取.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">getSlow</span><span class=\"token punctuation\">(</span>pid <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> any <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// See the comment in pin regarding ordering of the loads.</span>\n\tsize <span class=\"token operator\">:=</span> <span class=\"token function\">runtime_LoadAcquintptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>localSize<span class=\"token punctuation\">)</span> <span class=\"token comment\">// load-acquire</span>\n\tlocals <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>local                            <span class=\"token comment\">// load-consume</span>\n\t<span class=\"token comment\">// 尝试从其他P中偷取 对象.</span>\n\t<span class=\"token comment\">// Try to steal one element from other procs.</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\tl <span class=\"token operator\">:=</span> <span class=\"token function\">indexLocal</span><span class=\"token punctuation\">(</span>locals<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pid<span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> x<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> l<span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">popTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> x\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 尝试从victim cache中取对象。这发生在尝试从其他 P 的 poolLocal 偷去失败后，</span>\n\t<span class=\"token comment\">// 因为这样可以使 victim 中的对象更容易被回收.</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// Try the victim cache. We do this after attempting to steal</span>\n\t<span class=\"token comment\">// from all primary caches because we want objects in the</span>\n\t<span class=\"token comment\">// victim cache to age out if at all possible.</span>\n\tsize <span class=\"token operator\">=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadUintptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>victimSize<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> size <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tlocals <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>victim\n\tl <span class=\"token operator\">:=</span> <span class=\"token function\">indexLocal</span><span class=\"token punctuation\">(</span>locals<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">:=</span> l<span class=\"token punctuation\">.</span>private<span class=\"token punctuation\">;</span> x <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tl<span class=\"token punctuation\">.</span>private <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token keyword\">return</span> x\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\tl <span class=\"token operator\">:=</span> <span class=\"token function\">indexLocal</span><span class=\"token punctuation\">(</span>locals<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pid<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> x<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> l<span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">popTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> x\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 清空 victimCache,下次就不用从这里面找了.</span>\n\t<span class=\"token comment\">// Mark the victim cache as empty for future gets don't bother</span>\n\t<span class=\"token comment\">// with it.</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">StoreUintptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>victimSize<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>从索引为 pid + 1 的 poolLocal 开始, 尝试调用shared.popTail 获取缓存对象. 如果没有拿到,从victim中查找. 和 从 poolLocal 的逻辑类似.</li>\n<li>最后 如果还没有找到,就把 victimSize 值 0. 防止后来的人再从 victim中找.</li>\n<li>在 Get 函数的最后，经过这一番操作还是没找到缓存的对象，就调用 New 函数创建一个新的对象.</li>\n</ol>\n<h4 id=\"2-1-4-popTail\"><a href=\"#2-1-4-popTail\" class=\"headerlink\" title=\"2.1.4 popTail\"></a>2.1.4 popTail</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>poolChain<span class=\"token punctuation\">)</span> <span class=\"token function\">popTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\td <span class=\"token operator\">:=</span> <span class=\"token function\">loadPoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// It's important that we load the next pointer</span>\n\t\t<span class=\"token comment\">// *before* popping the tail. In general, d may be</span>\n\t\t<span class=\"token comment\">// transiently empty, but if next is non-nil before</span>\n\t\t<span class=\"token comment\">// the pop and the pop fails, then d is permanently</span>\n\t\t<span class=\"token comment\">// empty, which is the only condition under which it's</span>\n\t\t<span class=\"token comment\">// safe to drop d from the chain.</span>\n\t\td2 <span class=\"token operator\">:=</span> <span class=\"token function\">loadPoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">if</span> val<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">popTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> ok\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token keyword\">if</span> d2 <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// This is the only dequeue. It's empty right</span>\n\t\t\t<span class=\"token comment\">// now, but could be pushed to in the future.</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token comment\">// The tail of the chain has been drained, so move on</span>\n\t\t<span class=\"token comment\">// to the next dequeue. Try to drop it from the chain</span>\n\t\t<span class=\"token comment\">// so the next pop doesn't have to look at the empty</span>\n\t\t<span class=\"token comment\">// dequeue again.</span>\n\t\t<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>unsafe<span class=\"token punctuation\">.</span>Pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// We won the race. Clear the prev pointer so</span>\n\t\t\t<span class=\"token comment\">// the garbage collector can collect the empty</span>\n\t\t\t<span class=\"token comment\">// dequeue and so popHead doesn't back up</span>\n\t\t\t<span class=\"token comment\">// further than necessary.</span>\n\t\t\t<span class=\"token comment\">// 甩掉尾结点.</span>\n\t\t\t<span class=\"token function\">storePoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d2<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\td <span class=\"token operator\">=</span> d2\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// popTail removes and returns the element at the tail of the queue.</span>\n<span class=\"token comment\">// It returns false if the queue is empty. It may be called by any</span>\n<span class=\"token comment\">// number of consumers.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>poolDequeue<span class=\"token punctuation\">)</span> <span class=\"token function\">popTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> slot <span class=\"token operator\">*</span>eface\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\tptrs <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">)</span>\n\t\thead<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>ptrs<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> tail <span class=\"token operator\">==</span> head <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Queue is empty.</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token comment\">// Confirm head and tail (for our speculative check</span>\n\t\t<span class=\"token comment\">// above) and increment tail. If this succeeds, then</span>\n\t\t<span class=\"token comment\">// we own the slot at tail.</span>\n\t\tptrs2 <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> tail<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">,</span> ptrs<span class=\"token punctuation\">,</span> ptrs2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Success.</span>\n\t\t\tslot <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">[</span>tail<span class=\"token operator\">&amp;</span><span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// We now own slot.</span>\n\tval <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> val <span class=\"token operator\">==</span> <span class=\"token function\">dequeueNil</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tval <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// Tell pushHead that we're done with this slot. Zeroing the</span>\n\t<span class=\"token comment\">// slot is also important so we don't leave behind references</span>\n\t<span class=\"token comment\">// that could keep this object live longer than necessary.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// We write to val first and then publish that we're done with</span>\n\t<span class=\"token comment\">// this slot by atomically writing to typ.</span>\n\tslot<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">StorePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>slot<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// At this point pushHead owns the slot.</span>\n\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"2-2-Put\"><a href=\"#2-2-Put\" class=\"headerlink\" title=\"2.2. Put\"></a>2.2. Put</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Put adds x to the pool.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>x any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> race<span class=\"token punctuation\">.</span>Enabled <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">fastrandn</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Randomly drop x on floor.</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">ReleaseMerge</span><span class=\"token punctuation\">(</span><span class=\"token function\">poolRaceAddr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">Disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tl<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">pin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> l<span class=\"token punctuation\">.</span>private <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tl<span class=\"token punctuation\">.</span>private <span class=\"token operator\">=</span> x\n\t\tx <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tl<span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> race<span class=\"token punctuation\">.</span>Enabled <span class=\"token punctuation\">&#123;</span>\n\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">Enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<ol>\n<li>先绑定 g 和 P.  然后尝试将 x 赋值给 private字段.</li>\n<li>如果失败. 就调用 pushHead() 尝试将其放入 shared字段 维护的双端队列中.</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220815204632.png\"></p>\n<h4 id=\"2-2-1-pushHead\"><a href=\"#2-2-1-pushHead\" class=\"headerlink\" title=\"2.2.1 pushHead\"></a>2.2.1 pushHead</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>poolChain<span class=\"token punctuation\">)</span> <span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\td <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>head\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Initialize the chain.</span>\n\t\t<span class=\"token keyword\">const</span> initSize <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token comment\">// Must be a power of 2</span>\n\t\td <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>poolChainElt<span class=\"token punctuation\">)</span>\n\t\td<span class=\"token punctuation\">.</span>vals <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>eface<span class=\"token punctuation\">,</span> initSize<span class=\"token punctuation\">)</span>\n\t\tc<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> d\n\t\t<span class=\"token function\">storePoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 当前 poolDequeue 满了. 分配一个 当前 poolDequeue 2倍的一个 poolDequeue</span>\n\t<span class=\"token comment\">// The current dequeue is full. Allocate a new one of twice</span>\n\t<span class=\"token comment\">// the size.</span>\n\tnewSize <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n\t<span class=\"token keyword\">if</span> newSize <span class=\"token operator\">>=</span> dequeueLimit <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Can't make it any bigger.</span>\n\t\tnewSize <span class=\"token operator\">=</span> dequeueLimit\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 收尾相连. 构成链表</span>\n\td2 <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>poolChainElt<span class=\"token punctuation\">&#123;</span>prev<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">&#125;</span>\n\td2<span class=\"token punctuation\">.</span>vals <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>eface<span class=\"token punctuation\">,</span> newSize<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> d2\n\t<span class=\"token function\">storePoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span>\n\td2<span class=\"token punctuation\">.</span><span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// // 将 val 添加到双端队列头部。如果队列已满，则返回 false。此函数只能被一个生产者调用</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// pushHead adds val at the head of the queue. It returns false if the</span>\n<span class=\"token comment\">// queue is full. It must only be called by a single producer.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>poolDequeue<span class=\"token punctuation\">)</span> <span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val any<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\tptrs <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">)</span>\n\thead<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>ptrs<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//队列满了</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail<span class=\"token operator\">+</span><span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>dequeueBits<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> head <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Queue is full.</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tslot <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">[</span>head<span class=\"token operator\">&amp;</span><span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n\t<span class=\"token comment\">// Check if the head slot has been released by popTail.</span>\n\ttyp <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>slot<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Another goroutine is still cleaning up the tail, so</span>\n\t\t<span class=\"token comment\">// the queue is actually still full.</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// The head slot is free, so we own it.</span>\n\t<span class=\"token keyword\">if</span> val <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tval <span class=\"token operator\">=</span> <span class=\"token function\">dequeueNil</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> val\n\n\t<span class=\"token comment\">// Increment head. This passes ownership of slot to popTail</span>\n\t<span class=\"token comment\">// and acts as a store barrier for writing the slot.</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>dequeueBits<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-pack-amp-unpack\"><a href=\"#3-pack-amp-unpack\" class=\"headerlink\" title=\"3. pack &amp; unpack\"></a>3. pack &amp; unpack</h3><h2 id=\"3-GC\"><a href=\"#3-GC\" class=\"headerlink\" title=\"3. GC\"></a>3. GC</h2><hr>\n<p>[参考]<br><a href=\"https://www.cnblogs.com/qcrao-2018/p/12736031.html\">深度解密 Go 语言之 sync.Pool </a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4ODg0NDkzOA==&mid=2247487149&idx=1&sn=f38f2d72fd7112e19e97d5a2cd304430&source=41#wechat_redirect\">请问sync.Pool有什么缺点?</a><br><a href=\"https://xargin.com/lock-contention-in-go/\">几个 Go 系统可能遇到的锁问题</a></p>\n","text":"sync.Pool是sync包下的一个组件,可以作为临时取还对象的一个 池子. 作用: 对于很多需要重复分配、回收内存的地方,sync.Pool 是一个很好的选择.频繁地分配、回收内存会给 GC 带来一定的负担,严重的时候会引起 CPU 的毛刺,而 sync.Pool 可以将暂时...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Pool%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">Pool原理详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-noCopy\"><span class=\"toc-text\">1. noCopy</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-local\"><span class=\"toc-text\">2. local</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-poolLocal\"><span class=\"toc-text\">2.1 poolLocal</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-poolLocalInternal\"><span class=\"toc-text\">2.2 poolLocalInternal</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-poolChain\"><span class=\"toc-text\">2.3 poolChain</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-victim\"><span class=\"toc-text\">3. victim</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-New\"><span class=\"toc-text\">4. New</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">2. 源码详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-Get\"><span class=\"toc-text\">2.1. Get</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-1-pin\"><span class=\"toc-text\">2.1.1 pin</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-2-popHead\"><span class=\"toc-text\">2.1.2 popHead</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-3-getSlow\"><span class=\"toc-text\">2.1.3 getSlow</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-4-popTail\"><span class=\"toc-text\">2.1.4 popTail</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Put\"><span class=\"toc-text\">2.2. Put</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-1-pushHead\"><span class=\"toc-text\">2.2.1 pushHead</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-pack-amp-unpack\"><span class=\"toc-text\">3. pack &amp; unpack</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-GC\"><span class=\"toc-text\">3. GC</span></a></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"awesome-blog","uid":"237d42f01cd872e0a7556a026d085cc6","slug":"awesome-blog","date":"2022-08-16T12:45:48.000Z","updated":"2022-09-08T05:02:48.272Z","comments":true,"path":"api/articles/awesome-blog.json","keywords":null,"cover":null,"text":"golang极客兔兔跟煎鱼学GoO神的博客曹大的博客 Java小马哥的技术博客田小波的技术博客 Architechcleancoders解道凤凰架构 LinuxFRIMIN鸟哥的首页Vamei 算法谭新宇LABULADONG 的算法网站结构之法算法之道kuangbin - 博客园...","link":"","photos":[],"count_time":{"symbolsCount":348,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"blog","slug":"blog","count":3,"path":"api/tags/blog.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"clickhouse-原理","uid":"7f644a5a0ef8dce45a5c7a8966cb4d95","slug":"clickhouse-原理","date":"2022-08-11T17:00:53.000Z","updated":"2022-09-08T05:05:51.621Z","comments":true,"path":"api/articles/clickhouse-原理.json","keywords":null,"cover":[],"text":" Clickhouse 是一个 用于联机分析(OLAP)的 列式存储数据库管理系统(DBMS). 常见的列式数据库有: Vertica、 Paraccel (Actian Matrix，Amazon Redshift)、 Sybase IQ、 Exasol、 Infobright...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"clickhouse","slug":"clickhouse","count":1,"path":"api/tags/clickhouse.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}