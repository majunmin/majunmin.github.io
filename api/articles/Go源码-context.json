{"title":"Go源码-context","uid":"bd18eec6e0045068932a65759db44fe4","slug":"Go源码-context","date":"2022-08-30T15:39:07.000Z","updated":"2022-10-11T04:01:23.554Z","comments":true,"path":"api/articles/Go源码-context.json","keywords":null,"cover":[],"content":"<p>在go服务器中,通常 每个传入的请求都会在自己的<code>goroutine</code>中进行处理. 请求处理程序通常会启动额外的<code>goroutine</code>来访问数据库 或者第三方服务.<br>处理请求的一组<code>goroutine</code>通常需要访问特定于请求的值: 例如<code>userid</code>, <code>request_id</code>, <code>token</code>,<code>timeout</code>…,当请求被取消或者超时时,所有处理该请求的goroutine都应该快速退出. 以便系统可以快速回收他们正在使用的任何资源.</p>\n<p><a href=\"https://pkg.go.dev/context\">context</a> 是 go 1.14 引入 的一个概念. 用于解决上述问题.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"context-源码解析\"><a href=\"#context-源码解析\" class=\"headerlink\" title=\"context 源码解析\"></a>context 源码解析</h2><p><img src=\"/./Go%E6%BA%90%E7%A0%81-context/context.png\" alt=\"context\"></p>\n<h3 id=\"context-Context\"><a href=\"#context-Context\" class=\"headerlink\" title=\"context.Context\"></a>context.Context</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Context 是协程安全的,context 的方法可以被多个协程同时调用</span>\n<span class=\"token keyword\">type</span> Context <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// </span>\n\t<span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 返回一个 channel,当 这个 context 被取消时,这个channel 会写入一个 struct</span>\n\t<span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// Done 还没有被关闭， 返回  nil</span>\n    <span class=\"token comment\">// 如果  Done  已经被关闭, 返回 error:</span>\n    <span class=\"token comment\">// - Canceled</span>\n    <span class=\"token comment\">// - DeadlineExceeded</span>\n    <span class=\"token comment\">// 一旦返回 error,这个方法之后就是幂等的</span>\n\t<span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key any<span class=\"token punctuation\">)</span> any\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ol>\n<li><p><code>Deadline</code><br>如果 该 Context 被设置了超时，该函数返回  <code>true &amp; 对应的超时时间</code>， 否则 返回 <code>false &amp; nil</code>.</p>\n</li>\n<li><p><code>Done</code></p>\n</li>\n</ol>\n<p>返回一个只读 Channel, 但context 主动取消或者 自动超时取消时，该 context 以及 该context 的所有 子context 的 Done channel 都会被 close.<br>级联取消所有的子过程.</p>\n<ol start=\"3\">\n<li><code>Err()</code></li>\n</ol>\n<p><code>Done()</code> 返回的 channel被 close 之前 会返回nil.<br>在 close 之后会返回error(表示比关闭的原因).</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Canceled is the error returned by Context.Err when the context is canceled.</span>\n<span class=\"token keyword\">var</span> Canceled <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context canceled\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// DeadlineExceeded is the error returned by Context.Err when the context's</span>\n<span class=\"token comment\">// deadline passes.</span>\n<span class=\"token keyword\">var</span> DeadlineExceeded <span class=\"token builtin\">error</span> <span class=\"token operator\">=</span> deadlineExceededError<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<ol start=\"4\">\n<li><code>Value(key any) any</code></li>\n</ol>\n<p>返回绑定在 该 context 上 给定 key 对应的 value.  如果没有 返回 nil.</p>\n<p>为了防止Key冲突,最好将 key设置为 非导出类型,然后为其定义访问器.(这在许多开源项目中都有影子)</p>\n<p>key可是任意可比较的类型.</p>\n<p>下面是一个 context 共享 User 信息的 一个例子.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> user\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"context\"</span>\n\n<span class=\"token comment\">// User 是 要存储在Context中的value 的类型.</span>\n<span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// key 被定义为非导出类型 为了防止与其他包冲突</span>\n<span class=\"token comment\">// key is an unexported type for keys defined in this package.</span>\n<span class=\"token comment\">// This prevents collisions with keys defined in other packages.</span>\n<span class=\"token keyword\">type</span> key <span class=\"token builtin\">int</span>\n\n<span class=\"token comment\">// userKey 用来关联 请求中的user信息, 绑定在 context上.他是非导出的.</span>\n<span class=\"token comment\">// 通过  NewContext &amp; FromContext 来设置和读取  user.User 信息， 而不是直接使用 userKey.</span>\n<span class=\"token comment\">// userKey is the key for user.User values in Contexts. It is</span>\n<span class=\"token comment\">// unexported; clients use user.NewContext and user.FromContext</span>\n<span class=\"token comment\">// instead of using this key directly.</span>\n<span class=\"token keyword\">var</span> userKey key\n\n<span class=\"token comment\">// 携带 value</span>\n<span class=\"token comment\">// NewContext returns a new Context that carries value u.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewContext</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> u <span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span>Context <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> userKey<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//读取 context 中的 存储的 user信息</span>\n<span class=\"token comment\">// FromContext returns the User value stored in ctx, if any.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">FromContext</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    u<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>userKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> u<span class=\"token punctuation\">,</span> ok\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>context.Context 的实现.<br><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220903100716.png\"></p>\n<h3 id=\"1-emptyContext\"><a href=\"#1-emptyContext\" class=\"headerlink\" title=\"1. emptyContext\"></a>1. emptyContext</h3><p>emtptyContext 不是一个结构体,而是一个int类型,这样每一个值 都有独立的地址. 是 Context 的一个空的实现</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tbackground <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>emptyCtx<span class=\"token punctuation\">)</span>\n\ttodo       <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>emptyCtx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>context.Background() 通常被用作根节点,不能被取消,也不会超时.<br>通过 <code>WithCancel</code> 从 <code>context.Background()</code> 派生出的 Context 要注意在对应过程完结后及时 cancel, 否则会造成 Context 泄露.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// An emptyCtx is never canceled, has no values, and has no deadline. It is not</span>\n<span class=\"token comment\">// struct&#123;&#125;, since vars of this type must have distinct addresses.</span>\n<span class=\"token keyword\">type</span> emptyCtx <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptyCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptyCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptyCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptyCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key any<span class=\"token punctuation\">)</span> any <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>emptyCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">switch</span> e <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> background<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"context.Background\"</span>\n\t<span class=\"token keyword\">case</span> todo<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"context.TODO\"</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"unknown empty Context\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h3 id=\"2-context-cancelCtx\"><a href=\"#2-context-cancelCtx\" class=\"headerlink\" title=\"2. context.cancelCtx\"></a>2. context.cancelCtx</h3><p>context核心实现在这里,包括树形结构的构建 以及 进行级联取消.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// A cancelCtx can be canceled. When canceled, it also cancels any children</span>\n<span class=\"token comment\">// that implement canceler.</span>\n<span class=\"token keyword\">type</span> cancelCtx <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tContext\n\n\tmu       sync<span class=\"token punctuation\">.</span>Mutex            <span class=\"token comment\">// protects following fields 保护下面的字段</span>\n\tdone     atomic<span class=\"token punctuation\">.</span>Value          <span class=\"token comment\">// of chan struct&#123;&#125;, created lazily, closed by first cancel call</span>\n\tchildren <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>canceler<span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// set to nil by the first cancel call</span>\n\terr      <span class=\"token builtin\">error</span>                 <span class=\"token comment\">// set to non-nil by the first cancel call</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 递归查找 parentCtx 中第一个  cancelCtx</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key any<span class=\"token punctuation\">)</span> any <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> key <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>cancelCtxKey <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// </span>\n\t\t<span class=\"token keyword\">return</span> c\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>\n\td <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\td <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\td <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t\tc<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\terr <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>err\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// cancel closes c.done, cancels each of c's children, and, if</span>\n<span class=\"token comment\">// removeFromParent is true, removes c from its parent's children.</span>\n<span class=\"token comment\">// cancel  关闭 c.done, 关闭 context 及其所有子节点. 如果  removeFromParent = true, 那么将会把 context 从起 父节点移除.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span>removeFromParent <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context: internal error: missing cancel error\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// process</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token comment\">// already canceled</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>err <span class=\"token operator\">=</span> err\n\td<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>closedchan<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 遍历子节点,  递归调用 子节点的 cancel()</span>\n\t<span class=\"token keyword\">for</span> child <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// NOTE: acquiring the child's lock while holding parent's lock.</span>\n\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// c.Context 保存的是其 父节点</span>\n\t<span class=\"token keyword\">if</span> removeFromParent <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>cancelContext.Value() 方法  遇到特殊key<code>cancelCtxKey</code> 时会返回自身, 其实这是 复用了  <code>Value()</code>的 回溯逻辑(后面<code>回溯树构建</code>中会用到).<br>从而在 context树种回溯遍历时, 可以找到给定context中的第一个祖先 <code>cancelContext</code>实例.</p>\n<p><code>WithCancel</code>:<br><code>WithCancel()</code> 通过 调用<code>propagateCancel()</code>  实现回溯树的构建.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// WithCancel returns a copy of parent with a new Done channel. The returned</span>\n<span class=\"token comment\">// context's Done channel is closed when the returned cancel function is called</span>\n<span class=\"token comment\">// or when the parent context's Done channel is closed, whichever happens first.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Canceling this context releases resources associated with it, so code should</span>\n<span class=\"token comment\">// call cancel as soon as the operations running in this Context complete.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> parent <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create context from nil parent\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">newCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// propagateCancel arranges for child to be canceled when parent is.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> child canceler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tdone <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> done <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token comment\">// parent is never canceled</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 如果父节点已经被取消, 级联取消当前子节点.</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\">// parent is already canceled</span>\n\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 否则: </span>\n\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//  如果是 cancelCtx 类型,那就简单了， 将 curCtx 放到  parent.child 里面.</span>\n\t\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 父节点已经被取消</span>\n\t\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>children <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tp<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>canceler<span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// lazy create</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tp<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>                                    <span class=\"token comment\">//  如果 不是 cancelCtx类型, 就开启一个协程监听  parent 与 curCtx 是否有取消操作</span>\n\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>goroutines<span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token comment\">// 当 parent 时cancelCtx时才会调用此方法.</span>\n<span class=\"token comment\">// 通过 调用 `parent.Value(&amp;cancelCtxKey)` 找到最里面的  cancelCtx, </span>\n<span class=\"token comment\">// 然后检查  parent.Done == cancelCtx.Done(). </span>\n<span class=\"token comment\">// 如果 不匹配, 说明 cancelCtx 被包裹在了一个 自定义实现中,提供不同的 done通道. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// parentCancelCtx returns the underlying *cancelCtx for parent.</span>\n<span class=\"token comment\">// It does this by looking up parent.Value(&amp;cancelCtxKey) to find</span>\n<span class=\"token comment\">// the innermost enclosing *cancelCtx and then checking whether</span>\n<span class=\"token comment\">// parent.Done() matches that *cancelCtx. (If not, the *cancelCtx</span>\n<span class=\"token comment\">// has been wrapped in a custom implementation providing a</span>\n<span class=\"token comment\">// different done channel, in which case we should not bypass it.)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tdone <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> done <span class=\"token operator\">==</span> closedchan <span class=\"token operator\">||</span> done <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 传入</span>\n\tp<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cancelCtxKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tpdone<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> pdone <span class=\"token operator\">!=</span> done <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-context-timerCtx\"><a href=\"#3-context-timerCtx\" class=\"headerlink\" title=\"3. context.timerCtx\"></a>3. context.timerCtx</h3><p>超时取消, 顾名思义,  内部应该会有一个定时执行的函数, 调用 cancel().<br>这里包含两种取消模式: 1. 主动调用  cancel() 2. 时间到了, 执行 cancel()</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// timerCtx  携带了一个 timer 和一个 deadline.</span>\n<span class=\"token comment\">// timerCtx 内嵌了一个  cancelCtx  复用其  `Done()`  and `Err()`.</span>\n<span class=\"token comment\">// 当时间到了的时候,会调用  cacnelCtx 的 cancel() 执行取消</span>\n<span class=\"token comment\">// A timerCtx carries a timer and a deadline. It embeds a cancelCtx to</span>\n<span class=\"token comment\">// implement Done and Err. It implements cancel by stopping its timer then</span>\n<span class=\"token comment\">// delegating to cancelCtx.cancel.</span>\n<span class=\"token keyword\">type</span> timerCtx <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tcancelCtx\n\ttimer <span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Timer <span class=\"token comment\">// Under cancelCtx.mu.</span>\n\n\tdeadline time<span class=\"token punctuation\">.</span>Time\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>timerCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>deadline<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>timerCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">contextName</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>cancelCtx<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".WithDeadline(\"</span> <span class=\"token operator\">+</span>\n\t\tc<span class=\"token punctuation\">.</span>deadline<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" [\"</span> <span class=\"token operator\">+</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Until</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>deadline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"])\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>timerCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span>removeFromParent <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc<span class=\"token punctuation\">.</span>cancelCtx<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> removeFromParent <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Remove this timerCtx from its parent cancelCtx's children.</span>\n\t\t<span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>cancelCtx<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tc<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>创建一个 timerCtx:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> d time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> parent <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create context from nil parent\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> cur<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">Before</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// The current deadline is already sooner than the new one.</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>timerCtx<span class=\"token punctuation\">&#123;</span>\n\t\tcancelCtx<span class=\"token punctuation\">:</span> <span class=\"token function\">newCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdeadline<span class=\"token punctuation\">:</span>  d<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 下卖弄会分析， 回溯树的构建</span>\n\t<span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\tdur <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Until</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 如果已经超时了, 直接取消</span>\n\t<span class=\"token keyword\">if</span> dur <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> DeadlineExceeded<span class=\"token punctuation\">)</span> <span class=\"token comment\">// deadline has already passed</span>\n\t\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> Canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 添加一个延时任务</span>\n\t\tc<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">AfterFunc</span><span class=\"token punctuation\">(</span>dur<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> DeadlineExceeded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-valueCtx\"><a href=\"#4-valueCtx\" class=\"headerlink\" title=\"4. valueCtx\"></a>4. valueCtx</h3><p>创建:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// WithValue returns a copy of parent in which the value associated with key is</span>\n<span class=\"token comment\">// val.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Use context Values only for request-scoped data that transits processes and</span>\n<span class=\"token comment\">// APIs, not for passing optional parameters to functions.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The provided key must be comparable and should not be of type</span>\n<span class=\"token comment\">// string or any other built-in type to avoid collisions between</span>\n<span class=\"token comment\">// packages using context. Users of WithValue should define their own</span>\n<span class=\"token comment\">// types for keys. To avoid allocating when assigning to an</span>\n<span class=\"token comment\">// interface&#123;&#125;, context keys often have concrete type</span>\n<span class=\"token comment\">// struct&#123;&#125;. Alternatively, exported context key variables' static</span>\n<span class=\"token comment\">// type should be a pointer or interface.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val any<span class=\"token punctuation\">)</span> Context <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> parent <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create context from nil parent\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> key <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nil key\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>reflectlite<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Comparable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key is not comparable\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>valueCtx<span class=\"token punctuation\">&#123;</span>parent<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// A valueCtx carries a key-value pair. It implements Value for that key and</span>\n<span class=\"token comment\">// delegates all other calls to the embedded Context.</span>\n<span class=\"token keyword\">type</span> valueCtx <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tContext\n\tkey<span class=\"token punctuation\">,</span> val any\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"5-1-构建-context-树\"><a href=\"#5-1-构建-context-树\" class=\"headerlink\" title=\"5.1.  构建 context 树\"></a>5.1.  构建 context 树</h3><p>树的构建 级联取消的不分 基础代码在 <code>cancelCtx</code> 中, timerCtx和 <code>valuectx</code> 都会引用 cancelCtx 这部分代码.</p>\n<p><code>WithCancel()</code> 创建了 一个 Donechannel 和 拷贝了parentCtx.<br>当  <code>parentCtx 被取消</code> 或者 <code>当前context 的 cancel() 被调用</code>, 当前 <code>context.Done()</code> 的channel将会被 close.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> parent <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create context from nil parent\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">newCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>子 context 持有 父 context 的引用.</li>\n<li>context 持有 其 所有子节点(子context) 的引用.</li>\n</ol>\n<p><code>propagateCancel()</code>: 保证当parentCtx 被取消时,遍历取消 childCtx, 构建一个回溯树.</p>\n<ul>\n<li>监听 parentContext.Done(), 收到取消信号时,级联取消子节点</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// propagateCancel arranges for child to be canceled when parent is.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> child canceler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// parent.Done() 返回nil， 说明 parentContext 根本无法取消</span>\n\t<span class=\"token comment\">// 1. 比如 context.Background() || context.TODO()</span>\n\tdone <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> done <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token comment\">// parent is never canceled</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 2. 判断 parentContext 已经取消 </span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\">// parent is already canceled</span>\n\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// parentCancelCtx  用于获取底层可取消的 Context(cancelContext)</span>\n\t<span class=\"token comment\">// 如果 parent Context 本身就是 *cancelCtx 或者是标准库中基于 cancelCtx 衍生的 Context 会返回 true</span>\n\t<span class=\"token comment\">// 如果 parent Context 已经取消/或者根本无法取消 会返回 false</span>\n\t<span class=\"token comment\">// 如果 parent Context 无法转换为一个 *cancelCtx 也会返回 false</span>\n\t<span class=\"token comment\">// 如果 parent Context 是一个自定义深度包装的 cancelCtx(自己定义了 done channel) 则也会返回 false</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// ok 为 true 说明 parent Context 为 标准库的 cancelCtx 或者至少可以完全转换为 *cancelCtx</span>\n\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加锁  double check</span>\n\t\t<span class=\"token comment\">// 所以并发加锁情况下如果 parent Context 的 err 不为空说明已经被取消了</span>\n\t\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// parent has already been canceled</span>\n\t\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 如果 parent Context没有被取消, 就将 自身 context 加入到 parentContext.children 中,建立关联</span>\n\t\t\t<span class=\"token comment\">// 当 parentContext被取消时, 会遍历  parent.children, 一次调用  child.cancel() </span>\n\t\t\t<span class=\"token comment\">// 所以 -> p.children 中所有的 context 都可以转化为  cancelCtx 节点.</span>\n\t\t\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>children <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tp<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>canceler<span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tp<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// ok 为false 说明 parent Context 已经取消 || 根本无法取消 || 无法转换为一个 \t`cancelContext` || 是一个自定义的深度包装的 `cancelCtx`</span>\n\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>goroutines<span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// 由于代码一开始已经判断了 parentContext 已经取消  和  根本无法取消 的两种情况.</span>\n\t\t<span class=\"token comment\">// 所以这里  &lt;- parent.Done() 并不会产生 panic</span>\n\t\t<span class=\"token comment\">//</span>\n\t\t<span class=\"token comment\">// 后两种情况下 无法通过  parentContext.child(map) 建立关联, 只能通过 一个 goroutine 完成 级联取消操作.</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><code>parentCancelCtx()</code>:  parentCancelCtx  用于获取底层可取消的 Context(cancelContext)</p>\n<ul>\n<li>如果 parent Context 本身就是 *cancelCtx 或者是标准库中基于 cancelCtx 衍生的 Context 会返回 true</li>\n<li>如果 parent Context 已经取消&#x2F;或者根本无法取消 会返回 false</li>\n<li>如果 parent Context 无法转换为一个 *cancelCtx 也会返回 false</li>\n<li>如果 parent Context 是一个自定义深度包装的 cancelCtx(自己定义了 done channel) 则也会返回 false</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// parentCancelCtx returns the underlying *cancelCtx for parent.</span>\n<span class=\"token comment\">// It does this by looking up parent.Value(&amp;cancelCtxKey) to find</span>\n<span class=\"token comment\">// the innermost enclosing *cancelCtx and then checking whether</span>\n<span class=\"token comment\">// parent.Done() matches that *cancelCtx. (If not, the *cancelCtx</span>\n<span class=\"token comment\">// has been wrapped in a custom implementation providing a</span>\n<span class=\"token comment\">// different done channel, in which case we should not bypass it.)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tdone <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 1.</span>\n\t<span class=\"token comment\">// parentContext.Done()   == nil 说明不是一个 cancelContext</span>\n\t<span class=\"token comment\">// parentContext.Done()   == closedchan(一个可复用的表示关闭), 说明 parentContext  已经被关闭了.</span>\n\t<span class=\"token keyword\">if</span> done <span class=\"token operator\">==</span> closedchan <span class=\"token operator\">||</span> done <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 2.</span>\n\t<span class=\"token comment\">// parentContex 无法转换为一个   cancelCtx</span>\n\tp<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cancelCtxKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 3. </span>\n\t<span class=\"token comment\">// 经过上面的判断后，说明 parent context 可以被转换为 *cancelCtx，这时存在多种情况:</span>\n\t<span class=\"token comment\">//   - parent context 就是 *cancelCtx</span>\n\t<span class=\"token comment\">//   - parent context 是标准库中的 timerCtx</span>\n\t<span class=\"token comment\">//   - parent context 是个自己自定义包装的 cancelCtx</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 针对这 3 种情况需要进行判断，判断方法就是: </span>\n\t<span class=\"token comment\">//   判断 parent context 通过 Done() 方法获取的 done channel 与 Value 查找到的 context 的 done channel 是否一致</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// 一致情况说明 parent context 为 cancelCtx 或 timerCtx 或 自定义的 cancelCtx 且未重写 Done()，</span>\n\t<span class=\"token comment\">// 这种情况下可以认为拿到了底层的 *cancelCtx</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// 不一致情况说明 parent context 是一个自定义的 cancelCtx 且重写了 Done(), 并且并未返回标准 `*cancelCtx` 的</span>\n\t<span class=\"token comment\">// 的 done channel，这种情况需要单独处理，故返回 nil, false</span>\n\tpdone<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> pdone <span class=\"token operator\">!=</span> done <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"5-2-级联取消-cancel\"><a href=\"#5-2-级联取消-cancel\" class=\"headerlink\" title=\"5.2 级联取消 cancel\"></a>5.2 级联取消 cancel</h3><p>级联取消的关键函数是<code> cancelCtx.cancel()</code>,  在 当前 cancelCtx 取消时,需要级联取消  以该context为根节点的 context树中所有context,<br>并将 cancelCtx 从 其父节点摘除,以便让 GC 回收该 cancelCtx 子树的所有资源.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// cancel closes c.done, cancels each of c's children, and, if</span>\n<span class=\"token comment\">// removeFromParent is true, removes c from its parent's children.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span>removeFromParent <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">// err == nil,那么 直接 panic</span>\n\t<span class=\"token comment\">// 这么做的目的是因为 `cancel()`是个私有方法，标准库内任何调用 `cancel()`</span>\n    <span class=\"token comment\">// 的方法保证了一定会传入 err, 如果没传那就是非正常调用,所以可以直接 panic</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context: internal error: missing cancel error\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 已经被取消了, 防止重复调用 cancel()</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token comment\">// already canceled</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>err <span class=\"token operator\">=</span> err\n\td<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 判断 c.done 是否为 nil，因为 context.WithCancel 创建 cancelContext 时, c.done是延迟初始化的, 所以可能为nil</span>\n\t<span class=\"token comment\">// 如果 c.done == nil, 将其赋值为 可 复用的  closechan.</span>\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>closedchan<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 如果当前 Context 下面还有关联的 child Context，且这些 child Context 都是</span>\n\t<span class=\"token comment\">// 可以转换成 *cancelCtx 的 Context(见上面的 propagateCancel()分析).</span>\n\t<span class=\"token comment\">// 那么直接遍历 childre map，并且调用 child Context 的 cancel 即可</span>\n\t<span class=\"token comment\">// 如果关联的 child Context 不能转换成 *cancelCtx，那么由 propagateCancel 方法</span>\n\t<span class=\"token comment\">// 中已经创建了单独的 Goroutine 来关闭这些 child Context</span>\n\t<span class=\"token keyword\">for</span> child <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// NOTE: acquiring the child's lock while holding parent's lock.</span>\n\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 递归调用 子context cancel</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> removeFromParent <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">//从 parent 中找出 curContext</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// removeChild removes a context from its parent.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> child canceler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tp<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>children <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tdone <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> done <span class=\"token operator\">==</span> closedchan <span class=\"token operator\">||</span> done <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tp<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cancelCtxKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tpdone<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> pdone <span class=\"token operator\">!=</span> done <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<p><a href=\"https://mritd.com/2021/06/27/golang-context-source-code\">Golang Context 源码分析</a></p>\n","text":"在go服务器中,通常 每个传入的请求都会在自己的goroutine中进行处理. 请求处理程序通常会启动额外的goroutine来访问数据库 或者第三方服务.处理请求的一组goroutine通常需要访问特定于请求的值: 例如userid, request_id, token,tim...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"context","slug":"context","count":2,"path":"api/tags/context.json"},{"name":"源码剖析","slug":"源码剖析","count":1,"path":"api/tags/源码剖析.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#context-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">context 源码解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#context-Context\"><span class=\"toc-text\">context.Context</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-emptyContext\"><span class=\"toc-text\">1. emptyContext</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-context-cancelCtx\"><span class=\"toc-text\">2. context.cancelCtx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-context-timerCtx\"><span class=\"toc-text\">3. context.timerCtx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-valueCtx\"><span class=\"toc-text\">4. valueCtx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E6%9E%84%E5%BB%BA-context-%E6%A0%91\"><span class=\"toc-text\">5.1.  构建 context 树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E7%BA%A7%E8%81%94%E5%8F%96%E6%B6%88-cancel\"><span class=\"toc-text\">5.2 级联取消 cancel</span></a></li></ol></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Go Context 使用场景","uid":"c851ed248b05eaa2eb5ed28481ee6148","slug":"Go-Context-使用场景","date":"2022-08-31T03:04:55.000Z","updated":"2022-09-03T07:45:14.726Z","comments":true,"path":"api/articles/Go-Context-使用场景.json","keywords":null,"cover":[],"text":"context 使用场景1 超时控制实际使用中, context 经常和 select 关键字一起使用. 用于监听 context 结束 取消. import ( \"context\" \"fmt\" \"time\" ) func testTimeout() &#123; timerCt...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"context","slug":"context","count":2,"path":"api/tags/context.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"微服务 Trace","uid":"9a85a1a2b7a6a9bc3209cb287c73c69a","slug":"微服务-Trace","date":"2022-08-18T04:46:07.000Z","updated":"2022-08-29T08:51:32.897Z","comments":true,"path":"api/articles/微服务-Trace.json","keywords":null,"cover":null,"text":"Spection Trace 语义Trace代表一个调用链. 通常， 一个 Trace 可以被理解为一系列span 组成的有向无环图(DAG), span 之间的边称为 Reference. SpanSpan 表示一个跨进程的 RPC 或者进程内部的一个过程. 每个span 可以...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"微服务","slug":"微服务","count":2,"path":"api/tags/微服务.json"},{"name":"trace","slug":"trace","count":1,"path":"api/tags/trace.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}