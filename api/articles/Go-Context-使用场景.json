{"title":"Go Context 使用场景","uid":"c851ed248b05eaa2eb5ed28481ee6148","slug":"Go-Context-使用场景","date":"2022-08-31T03:04:55.000Z","updated":"2022-09-03T07:45:14.726Z","comments":true,"path":"api/articles/Go-Context-使用场景.json","keywords":null,"cover":[],"content":"<h2 id=\"context-使用场景\"><a href=\"#context-使用场景\" class=\"headerlink\" title=\"context 使用场景\"></a>context 使用场景</h2><h3 id=\"1-超时控制\"><a href=\"#1-超时控制\" class=\"headerlink\" title=\"1 超时控制\"></a>1 超时控制</h3><p>实际使用中, context 经常和 select 关键字一起使用. 用于监听  context 结束 取消.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">testTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ttimerCtx<span class=\"token punctuation\">,</span> cancelFunc <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">cancelFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>timerCtx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">processLogic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tch <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//process</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上下文取消 or 超时.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"process log  succeess.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">processLogic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>其中 timerContext 是可以 在 上下文链路中传递, 当上游配置 timeout， 调用 下游 服务时, 如果 超时 , 可以通过 context 级联取消下游服务的处理, 避免下游服务占用资源.<br>(已经超时了, 还在处理业务)</p>\n<h3 id=\"2-Request-Scope-传递共享数据\"><a href=\"#2-Request-Scope-传递共享数据\" class=\"headerlink\" title=\"2.  Request Scope 传递共享数据\"></a>2.  Request Scope 传递共享数据</h3><p>比如 在 http 请求中, 传递 traceID, userID…</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> requestKeyType <span class=\"token builtin\">string</span>\n\n<span class=\"token comment\">// 避免冲突. </span>\n<span class=\"token keyword\">var</span> requestIdKey <span class=\"token operator\">=</span> <span class=\"token function\">requestKeyType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"requestID\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\th <span class=\"token operator\">:=</span> <span class=\"token function\">WithRequestID</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">)</span>\n\terr <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithRequestID</span><span class=\"token punctuation\">(</span>next http<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 从header 中提取 requestID</span>\n\t\t\trequestID <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Request-ID\"</span><span class=\"token punctuation\">)</span>\n\t\t\tvalCtx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestIdKey<span class=\"token punctuation\">,</span> requestID<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">// 构建 新的请求</span>\n\t\t\tr <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">WithContext</span><span class=\"token punctuation\">(</span>valCtx<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">//调用 http处理函数</span>\n\t\t\tnext<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>writer http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> request <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\trequestID<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>requestIdKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>requestID<span class=\"token punctuation\">)</span>\n\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>requestID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"3-tracing-组件中-carrier-SpanContext\"><a href=\"#3-tracing-组件中-carrier-SpanContext\" class=\"headerlink\" title=\"3. tracing 组件中 carrier  SpanContext\"></a>3. tracing 组件中 carrier  SpanContext</h3><h2 id=\"context-注意事项\"><a href=\"#context-注意事项\" class=\"headerlink\" title=\"context 注意事项\"></a>context 注意事项</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">- 对第三方调用要传入 context, 用于控制远程调用\n- 不要将上下文存储在结构类型中,尽可能的作为函数第一位形参传入.\n- 函数调用链必须传播上下文,实现完整链路上的控制\n- context 的继承和派生, 保证父、子级 context 的联动\n- 不传递 nil context,不确定的 context 应当使用 TODO\n- context 仅传递必要的值, 不要让可选参数揉在一起\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-对第三方调用要传入-context-用于控制远程调用\"><a href=\"#1-对第三方调用要传入-context-用于控制远程调用\" class=\"headerlink\" title=\"1.  对第三方调用要传入 context, 用于控制远程调用\"></a>1.  对第三方调用要传入 context, 用于控制远程调用</h3><p>在 golang 中 对 context 的 使用 已经是 约定俗成的规定, 因此 使用第三方 服务的时候, 要传入 context.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">httpTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\treq<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://google.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\ttimerCtx<span class=\"token punctuation\">,</span> cancelFunc <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">cancelFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\treq <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">WithContext</span><span class=\"token punctuation\">(</span>timerCtx<span class=\"token punctuation\">)</span>\n\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>DefaultClient<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.DefaultClient.Do error, err = %v \\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样子由于第三方开源库已经实现了根据 context 的超时控制,那么当你所传入的时间到达时，将会中断调用.<br>若你发现第三方开源库没支持 context, 那就 看看 是否要使用,否则出问题 没有   简单的控制手段.</p>\n<h3 id=\"2-不要将上下文存储在结构类型中-尽可能的作为函数第一位形参传入\"><a href=\"#2-不要将上下文存储在结构类型中-尽可能的作为函数第一位形参传入\" class=\"headerlink\" title=\"2. 不要将上下文存储在结构类型中,尽可能的作为函数第一位形参传入.\"></a>2. 不要将上下文存储在结构类型中,尽可能的作为函数第一位形参传入.</h3><p>在 golang 中, 所有的第三方库, 开源代码. 清一色的 会将context 作为方法的第一个参数. 并且命名为  <code>ctx</code>.<br>标准要求: context 作为方法的第一个参数,并且命名为 <code>ctx</code></p>\n<p>当然也有极少数情况 会将 context 放在结构体里面,基本常见于:</p>\n<ul>\n<li>DDD 架构</li>\n<li>底层基础库</li>\n</ul>\n<p>每个请求都是独立的,context也就不一样,想清楚业务场景最重要.否则 遵循 go基本规范就好.</p>\n<h3 id=\"3-Trace-函数调用链必须传播上下文-实现完整链路上的控制\"><a href=\"#3-Trace-函数调用链必须传播上下文-实现完整链路上的控制\" class=\"headerlink\" title=\"3. Trace 函数调用链必须传播上下文,实现完整链路上的控制\"></a>3. Trace 函数调用链必须传播上下文,实现完整链路上的控制</h3><p>把 context 作为方法第一个参数,本质是为了 传播 context, 完成调用链路的跟踪和 控制.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t\n\t<span class=\"token string\">\"github.com/jmoiron/sqlx\"</span>\n\t<span class=\"token string\">\"github.com/opentracing/opentracing-go\"</span>\n\t<span class=\"token string\">\"github.com/pkg/errors\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">List</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> db <span class=\"token operator\">*</span>sqlx<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tspan<span class=\"token punctuation\">,</span> ctx <span class=\"token operator\">:=</span> opentracing<span class=\"token punctuation\">.</span><span class=\"token function\">StartSpanFromContext</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"internal.user.List\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> span<span class=\"token punctuation\">.</span><span class=\"token function\">Finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tusers <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>User<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">const</span> q <span class=\"token operator\">=</span> <span class=\"token string\">`SELECT * FROM users`</span>\n\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">SelectContext</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>users<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Wrap</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token string\">\"selecting users\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> users<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-context-的继承和派生-保证父、子级-context-的联动\"><a href=\"#4-context-的继承和派生-保证父、子级-context-的联动\" class=\"headerlink\" title=\"4. context 的继承和派生, 保证父、子级 context 的联动\"></a>4. context 的继承和派生, 保证父、子级 context 的联动</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">ctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nctx1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\nctx2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nctx3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\nctx4 <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\nctx5 <span class=\"token operator\">:=</span> conetext<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220903095430.png\"></p>\n<p>context Value的查找是 回溯树的方式.(由下至上)<br>cancel 一个节点, 会 cancel其所有子节点.(由上至下)</p>\n<h3 id=\"5-不传递-nil-context-不确定的-context-应当使用-TODO\"><a href=\"#5-不传递-nil-context-不确定的-context-应当使用-TODO\" class=\"headerlink\" title=\"5. 不传递 nil context,不确定的 context 应当使用 TODO\"></a>5. 不传递 nil context,不确定的 context 应当使用 TODO</h3><p>在实际使用 context中,对于不知道使用什么类型的 context的时候,<br>使用 <code>context.TODO()</code>  代替，直到了解清楚 context 的实际用途, 在进行替换.</p>\n<p>$$</p>\n<h3 id=\"6-context-仅传递必要的值-不要让可选参数揉在一起\"><a href=\"#6-context-仅传递必要的值-不要让可选参数揉在一起\" class=\"headerlink\" title=\"6. context 仅传递必要的值, 不要让可选参数揉在一起\"></a>6. context 仅传递必要的值, 不要让可选参数揉在一起</h3><p>我们在使用 context 作为上下文时，经常有信息传递的诉求.<br>像是在 gRPC 中就会有 metadata 的概念, 而在 gin 中就会自己封装 context 作为参数管理.</p>\n<hr>\n<p>[参考]<br><a href=\"https://eddycjy.com/posts/go/real-context/\">分享 Go 使用 Context 的正式姿势</a><br><a href=\"https://two.github.io/2019/11/25/go-context/\">Contex 的作用</a><br><a href=\"https://go.dev/blog/context\">Go Concurrency Patterns: Context</a></p>\n","text":"context 使用场景1 超时控制实际使用中, context 经常和 select 关键字一起使用. 用于监听 context 结束 取消. import ( \"context\" \"fmt\" \"time\" ) func testTimeout() &#123; timerCt...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"context","slug":"context","count":2,"path":"api/tags/context.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#context-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">context 使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%B6%85%E6%97%B6%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">1 超时控制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Request-Scope-%E4%BC%A0%E9%80%92%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">2.  Request Scope 传递共享数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-tracing-%E7%BB%84%E4%BB%B6%E4%B8%AD-carrier-SpanContext\"><span class=\"toc-text\">3. tracing 组件中 carrier  SpanContext</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#context-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">context 注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AF%B9%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B0%83%E7%94%A8%E8%A6%81%E4%BC%A0%E5%85%A5-context-%E7%94%A8%E4%BA%8E%E6%8E%A7%E5%88%B6%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">1.  对第三方调用要传入 context, 用于控制远程调用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%8D%E8%A6%81%E5%B0%86%E4%B8%8A%E4%B8%8B%E6%96%87%E5%AD%98%E5%82%A8%E5%9C%A8%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E4%B8%AD-%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E7%AC%AC%E4%B8%80%E4%BD%8D%E5%BD%A2%E5%8F%82%E4%BC%A0%E5%85%A5\"><span class=\"toc-text\">2. 不要将上下文存储在结构类型中,尽可能的作为函数第一位形参传入.</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Trace-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E9%93%BE%E5%BF%85%E9%A1%BB%E4%BC%A0%E6%92%AD%E4%B8%8A%E4%B8%8B%E6%96%87-%E5%AE%9E%E7%8E%B0%E5%AE%8C%E6%95%B4%E9%93%BE%E8%B7%AF%E4%B8%8A%E7%9A%84%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">3. Trace 函数调用链必须传播上下文,实现完整链路上的控制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-context-%E7%9A%84%E7%BB%A7%E6%89%BF%E5%92%8C%E6%B4%BE%E7%94%9F-%E4%BF%9D%E8%AF%81%E7%88%B6%E3%80%81%E5%AD%90%E7%BA%A7-context-%E7%9A%84%E8%81%94%E5%8A%A8\"><span class=\"toc-text\">4. context 的继承和派生, 保证父、子级 context 的联动</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E4%B8%8D%E4%BC%A0%E9%80%92-nil-context-%E4%B8%8D%E7%A1%AE%E5%AE%9A%E7%9A%84-context-%E5%BA%94%E5%BD%93%E4%BD%BF%E7%94%A8-TODO\"><span class=\"toc-text\">5. 不传递 nil context,不确定的 context 应当使用 TODO</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-context-%E4%BB%85%E4%BC%A0%E9%80%92%E5%BF%85%E8%A6%81%E7%9A%84%E5%80%BC-%E4%B8%8D%E8%A6%81%E8%AE%A9%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%E6%8F%89%E5%9C%A8%E4%B8%80%E8%B5%B7\"><span class=\"toc-text\">6. context 仅传递必要的值, 不要让可选参数揉在一起</span></a></li></ol></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"大数据相关的一些名词","uid":"abbd863cb849430f5ba6ae97c8807bd7","slug":"大数据相关的一些名词","date":"2022-09-09T16:36:11.000Z","updated":"2023-05-11T06:03:44.625Z","comments":true,"path":"api/articles/大数据相关的一些名词.json","keywords":null,"cover":[],"text":" 据仓库(data warehouse) 也可以简称为 DW DH 数据仓库中的分层:1. 数据运营层 ODS ODS(Operation Data Store): 数据准备区,最接近数据源的一层, 也称为 贴源层. 数据仓库中 源头系统的数据通常会原封不动的存储一份. 这称为为...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/categories/bigdata.json"}],"tags":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/tags/bigdata.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Go源码-context","uid":"bd18eec6e0045068932a65759db44fe4","slug":"Go源码-context","date":"2022-08-30T15:39:07.000Z","updated":"2022-10-11T04:01:23.554Z","comments":true,"path":"api/articles/Go源码-context.json","keywords":null,"cover":[],"text":"在go服务器中,通常 每个传入的请求都会在自己的goroutine中进行处理. 请求处理程序通常会启动额外的goroutine来访问数据库 或者第三方服务.处理请求的一组goroutine通常需要访问特定于请求的值: 例如userid, request_id, token,tim...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"context","slug":"context","count":2,"path":"api/tags/context.json"},{"name":"源码剖析","slug":"源码剖析","count":1,"path":"api/tags/源码剖析.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}