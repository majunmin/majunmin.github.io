{"title":"redis-info命令详解","uid":"37aab8e3df469d14892fd29b0404f0e2","slug":"redis-info命令详解","date":"2019-07-22T09:44:36.000Z","updated":"2019-07-22T09:46:17.000Z","comments":true,"path":"api/articles/redis-info命令详解.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>redis info 命令详解</p></blockquote>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">192.168.5.244(192.168.5.244:7001)&gt;info all\n&quot;# Server\nredis_version:3.0.6\nredis_git_sha1:00000000\nredis_git_dirty:0\nredis_build_id:8e54e6b49fa2c985\nredis_mode:cluster                             #运行模式，单机或者集群\nos:Linux 3.10.0-327.el7.x86_64 x86_64\narch_bits:64\nmultiplexing_api:epoll                        #redis所使用的事件处理机制\ngcc_version:4.8.5\nprocess_id:1187                                #redis服务器进程的pid\nrun_id:3198b2ad766fe1eb467a4d27fd90b3c481f2c253  # redis服务器的随机标识符(用于sentinel和集群)\ntcp_port:7001                                #redis服务器监听端口\nuptime_in_seconds:784389                     #redis服务器启动总时间，单位是秒\nuptime_in_days:9                             #redis服务器启动总时间，单位是天\nhz:10                                        #redis内部调度（进行关闭timeout的客户端，删除过期key等等）频率，程序规定serverCron每秒运行10次。\nlru_clock:3236399                            #自增的时钟，用于LRU管理,该时钟100ms(hz&#x3D;10,因此每1000ms&#x2F;10&#x3D;100ms执行一次定时任务)更新一次\nconfig_file:&#x2F;etc&#x2F;redis&#x2F;7001&#x2F;redis.conf       #配置文件路径\n\n# Clients(已连接客户端信息)\nconnected_clients:276            # 已连接客户端的数量(不包括通过slave连接的客户端)\nclient_longest_output_list:0     # 当前连接的客户端当中，最长的输出列表，用client list命令观察omem字段最大值\nclient_biggest_input_buf:0       # 当前连接的客户端当中，最大输入缓存，用client list命令观察qbuf和qbuf-free两个字段最大值\nblocked_clients:0                # 正在等待阻塞命令(BLPOP、BRPOP、BRPOPLPUSH)的客户端的数量\n\n# Memory  (内存信息)\nused_memory:25388768             # 由redis分配器分配的内存总量，以字节为单位\nused_memory_human:24.21M         # 以人类可读的格式返回redis分配的内存总量\nused_memory_rss:32223232         # 从操作系统的角度，返回redis已分配的内存总量(俗称常驻集大小)。这个值和top命令的输出一致\nused_memory_peak:27566960        # redis的内存消耗峰值(以字节为单位) \nused_memory_peak_human:26.29M    # 以人类可读的格式返回redis的内存消耗峰值\nused_memory_lua:41984            # lua引擎所使用的内存大小(以字节为单位)\nmem_fragmentation_ratio:1.27     # used_memory_rss和used_memory之间的比率，小于1表示使用了swap，大于1表示碎片比较多\nmem_allocator:jemalloc-3.6.0     # 在编译时指定的redis所使用的内存分配器。可以是libc、jemalloc或者tcmalloc\n\n# Persistence    (rdb和aof的持久化相关信息)\nloading:0                         #服务器是否正在载入持久化文件\nrdb_changes_since_last_save:0     #离最近一次成功生成rdb文件，写入命令的个数，即有多少个写入命令没有持久化\nrdb_bgsave_in_progress:0          #服务器是否正在创建rdb文件\nrdb_last_save_time:1563456371    #离最近一次成功创建rdb文件的时间戳。当前时间戳 - rdb_last_save_time&#x3D;多少秒未成功生成rdb文件\nrdb_last_bgsave_status:ok          # 最近一次rdb持久化是否成功\nrdb_last_bgsave_time_sec:0        # 最近一次成功生成rdb文件耗时秒数\nrdb_current_bgsave_time_sec:-1   # 如果服务器正在创建rdb文件，那么这个域记录的就是当前的创建操作已经耗费的秒数\naof_enabled:1                    # 是否开启了aof\naof_rewrite_in_progress:0        # 标识aof的rewrite操作是否在进行中\naof_rewrite_scheduled:0          # rewrite任务计划，当客户端发送bgrewriteaof指令，如果当前rewrite子进程正在执行，那么将客户端请求的bgrewriteaof变为计划任务，待aof子进程结束后执行rewrite \naof_last_rewrite_time_sec:0      # 最近一次aof rewrite耗费的时长\naof_current_rewrite_time_sec:-1  # 如果rewrite操作正在进行，则记录所使用的时间，单位秒\naof_last_bgrewrite_status:ok      # 上次bgrewriteaof操作的状态\naof_last_write_status:ok         # 上次aof写入状态\naof_current_size:6006946          # aof当前尺寸\naof_base_size:5198177            # 服务器启动时或者aof重写最近一次执行之后aof文件的大小\naof_pending_rewrite:0             # 是否有aof重写操作在等待rdb文件创建完毕之后执行?\naof_buffer_length:0               # aof buffer的大小\naof_rewrite_buffer_length:0       # aof rewrite buffer的大小\naof_pending_bio_fsync:0           # 后台I&#x2F;O队列里面，等待执行的fsync调用数量\naof_delayed_fsync:0               # 被延迟的fsync调用数量\n\n# Stats        (一般统计信息)\ntotal_connections_received:111954    #新创建连接个数,如果新创建连接过多，过度地创建和销毁连接对性能有影响，说明短连接严重或连接池使用有问题，需调研代码的连接设置 \ntotal_commands_processed:410452      #redis处理的命令数\ninstantaneous_ops_per_sec:0          #redis当前的qps，redis内部较实时的每秒执行的命令数\ntotal_net_input_bytes:10401399       #redis网络入口流量字节数\ntotal_net_output_bytes:2027252713    #redis网络出口流量字节数\ninstantaneous_input_kbps:0.01        #redis网络入口kps\ninstantaneous_output_kbps:0.02       #redis网络出口kps\nrejected_connections:0               #拒绝的连接个数，redis连接个数达到maxclients限制，拒绝新连接的个数\nsync_full:0                          #主从完全同步成功次数 \nsync_partial_ok:0                    #主从部分同步成功次数\nsync_partial_err:0                   #主从部分同步失败次数\nexpired_keys:0                       #运行以来过期的key的数量\nevicted_keys:0                       #运行以来剔除(超过了maxmemory后)的key的数量\nkeyspace_hits:9682                   #命中次数\nkeyspace_misses:258                  #没命中次数\npubsub_channels:0                    #当前使用中的频道数量\npubsub_patterns:0                    #当前使用的模式的数量\nlatest_fork_usec:1253                #最近一次fork操作阻塞redis进程的耗时数，单位微秒\nmigrate_cached_sockets:0\n\n# Replication  (主从信息，slave上显示的信息)\nrole:slave                    #实例的角色，是master or slave\nmaster_host:192.168.5.244     #此节点对应的master的ip\nmaster_port:7004               #此节点对应的master的port\nmaster_link_status:up          #slave端可查看它与master之间同步状态,当复制断开后表示down\nmaster_last_io_seconds_ago:1    #主库多少秒未发送数据到从库?\nmaster_sync_in_progress:0      #从服务器是否在与主服务器进行同步\nslave_repl_offset:1875290      #slave复制偏移量\nslave_priority:100             #slave优先级\nslave_read_only:1              #从库是否设置只读\nconnected_slaves:0             #连接的slave实例个数\nmaster_repl_offset:0\nrepl_backlog_active:0          #复制积压缓冲区是否开启\nrepl_backlog_size:1048576        #复制积压缓冲大小\t\nrepl_backlog_first_byte_offset:0  #复制缓冲区里偏移量的大小\nrepl_backlog_histlen:0          #此值等于 master_repl_offset - repl_backlog_first_byte_offset,该值不会超过repl_backlog_size的大小\n\n# CPU   (CPU计算量统计信息)\t\nused_cpu_sys:314.93      # 将所有redis主进程在核心态所占用的CPU时求和累计起来\nused_cpu_user:211.47     # 将所有redis主进程在用户态所占用的CPU时求和累计起来\nused_cpu_sys_children:2.30     # 将后台进程在核心态所占用的CPU时求和累计起来\nused_cpu_user_children:15.05   # 将后台进程在用户态所占用的CPU时求和累计起来\n \n# Commandstats         (各种不同类型的命令的执行统计信息)\t\ncmdstat_get:calls&#x3D;497,usec&#x3D;2135,usec_per_call&#x3D;4.30\ncmdstat_set:calls&#x3D;52,usec&#x3D;442,usec_per_call&#x3D;8.50\ncmdstat_setnx:calls&#x3D;7,usec&#x3D;106,usec_per_call&#x3D;15.14\ncmdstat_setex:calls&#x3D;329,usec&#x3D;4964,usec_per_call&#x3D;15.09\ncmdstat_del:calls&#x3D;268,usec&#x3D;11297,usec_per_call&#x3D;42.15\ncmdstat_exists:calls&#x3D;7,usec&#x3D;22,usec_per_call&#x3D;3.14\ncmdstat_incr:calls&#x3D;50,usec&#x3D;205,usec_per_call&#x3D;4.10\ncmdstat_mget:calls&#x3D;8,usec&#x3D;28,usec_per_call&#x3D;3.50\ncmdstat_rpush:calls&#x3D;1,usec&#x3D;21,usec_per_call&#x3D;21.00\ncmdstat_lpush:calls&#x3D;15,usec&#x3D;239,usec_per_call&#x3D;15.93\ncmdstat_rpop:calls&#x3D;19,usec&#x3D;171,usec_per_call&#x3D;9.00\ncmdstat_lrange:calls&#x3D;2,usec&#x3D;7,usec_per_call&#x3D;3.50\ncmdstat_sadd:calls&#x3D;5,usec&#x3D;74,usec_per_call&#x3D;14.80\ncmdstat_zadd:calls&#x3D;24,usec&#x3D;377,usec_per_call&#x3D;15.71\ncmdstat_zrem:calls&#x3D;2,usec&#x3D;14,usec_per_call&#x3D;7.00\ncmdstat_hset:calls&#x3D;29,usec&#x3D;229,usec_per_call&#x3D;7.90\ncmdstat_hget:calls&#x3D;2,usec&#x3D;9,usec_per_call&#x3D;4.50\ncmdstat_hmset:calls&#x3D;7,usec&#x3D;15574,usec_per_call&#x3D;2224.86\ncmdstat_hincrby:calls&#x3D;21,usec&#x3D;220,usec_per_call&#x3D;10.48\ncmdstat_hdel:calls&#x3D;4,usec&#x3D;36,usec_per_call&#x3D;9.00\ncmdstat_incrby:calls&#x3D;772,usec&#x3D;2896,usec_per_call&#x3D;3.75\ncmdstat_randomkey:calls&#x3D;55,usec&#x3D;259,usec_per_call&#x3D;4.71\ncmdstat_select:calls&#x3D;1,usec&#x3D;1,usec_per_call&#x3D;1.00\ncmdstat_expire:calls&#x3D;92,usec&#x3D;354,usec_per_call&#x3D;3.85\ncmdstat_pexpire:calls&#x3D;784,usec&#x3D;1849,usec_per_call&#x3D;2.36\ncmdstat_keys:calls&#x3D;6,usec&#x3D;4763,usec_per_call&#x3D;793.83\ncmdstat_scan:calls&#x3D;3,usec&#x3D;25493,usec_per_call&#x3D;8497.67\ncmdstat_ping:calls&#x3D;378267,usec&#x3D;475783,usec_per_call&#x3D;1.26\ncmdstat_info:calls&#x3D;20,usec&#x3D;51449,usec_per_call&#x3D;2572.45\ncmdstat_ttl:calls&#x3D;771,usec&#x3D;2555,usec_per_call&#x3D;3.31\ncmdstat_cluster:calls&#x3D;9521,usec&#x3D;4896338,usec_per_call&#x3D;514.27\ncmdstat_readonly:calls&#x3D;114,usec&#x3D;219,usec_per_call&#x3D;1.92\ncmdstat_client:calls&#x3D;18455,usec&#x3D;5187940,usec_per_call&#x3D;281.11\ncmdstat_slowlog:calls&#x3D;13,usec&#x3D;233,usec_per_call&#x3D;17.92\ncmdstat_command:calls&#x3D;229,usec&#x3D;178198,usec_per_call&#x3D;778.16\n\n# Cluster   (集群相关信息)\ncluster_enabled:1                  #实例是否启用集群模式\n\n# Keyspace      (数据库相关的统计信息)\ndb0:keys&#x3D;5968,expires&#x3D;4822,avg_ttl&#x3D;2089395628   #db0的key的数量,以及带有生存期的key的数,平均存活时间\n&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":" redis info 命令详解 192.168.5.244(192.168.5.244:7001)&gt;info all &quot;# Server redis_version:3.0.6 redis_git_sha1:00000000 redis_git_dirty:0 ...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"redis","slug":"redis","count":1,"path":"api/categories/redis.json"}],"tags":[{"name":"redis","slug":"redis","count":1,"path":"api/tags/redis.json"}],"toc":"","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"记录一次kafka消费慢解决","uid":"b6fcd1b6df52f1cbb0ed1f5a0d130f42","slug":"记录一次kafka消费慢解决","date":"2019-08-03T10:37:02.000Z","updated":"2019-08-03T10:49:19.000Z","comments":true,"path":"api/articles/记录一次kafka消费慢解决.json","keywords":null,"cover":null,"text":" 最近使用kafka, 消费者速度一直跟不上，造成线上消息堆积到了 101亿，困扰了好几天，终于解决了。（其实很简单，因为 kafka消费速度本来也不慢 😂😂😂😂,其实异步+ 批量消费就满可以达到要求了） 主要原因有两个， 对 @Async 注解的不理解 批量消费 – 还有就是通...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"kafka","slug":"kafka","count":4,"path":"api/categories/kafka.json"},{"name":"consumer","slug":"kafka/consumer","count":1,"path":"api/categories/kafka/consumer.json"}],"tags":[{"name":"kafka","slug":"kafka","count":3,"path":"api/tags/kafka.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Docker概念","uid":"409a977ec1b75954f9585ba9c4856d49","slug":"Docker概念","date":"2019-07-20T07:30:19.000Z","updated":"2022-03-03T15:49:51.094Z","comments":true,"path":"api/articles/Docker概念.json","keywords":null,"cover":[],"text":" 了解一下Docker 概念，如今容器技术在互联网行业发展的已经相当成熟，springBoot 微服务 结合 k8s 部署线上服务，安全 高效，充分利用机器资源 ✨镜像镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"docker","slug":"docker","count":1,"path":"api/categories/docker.json"}],"tags":[{"name":"docker","slug":"docker","count":2,"path":"api/tags/docker.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}