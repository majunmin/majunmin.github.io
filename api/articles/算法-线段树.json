{"title":"算法-线段树","uid":"f618fdcc06390449a60431b1cd6a19c6","slug":"算法-线段树","date":"2022-06-25T02:07:37.000Z","updated":"2022-10-11T04:01:22.019Z","comments":true,"path":"api/articles/算法-线段树.json","keywords":null,"cover":[],"content":"<p>线段树是经常用来维护区间信息的数据结构,<br>线段树可以在 O(logN) 的时间复杂度内实现<code>单点修改</code>,<code>区间修改</code>,<code>区间查询</code>(<code>区间求和</code>,<code>区间最大值</code>,<code>区间最小值</code>) 等操作.</p>\n<h2 id=\"线段树的数据结构\"><a href=\"#线段树的数据结构\" class=\"headerlink\" title=\"线段树的数据结构\"></a>线段树的数据结构</h2><p><img src=\"/./%E7%AE%97%E6%B3%95-%E7%BA%BF%E6%AE%B5%E6%A0%91/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\" alt=\"线段树数据结构\"></p>\n<p>线段树是一种近似的完全二叉树,每个节点代表一个区间,节点的权值. 根节点是整个区间.每个节点的左孩子是该节点所代表的的区间的左半部分,右孩子是右半部分.</p>\n<p>线段树采用 类似堆的 数组  来存储数据.</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li>每个区间的长度是区间内整数的个数;</li>\n<li>叶子节点长度为1,不能再分;</li>\n<li>若一个结点对应的区间是[left,right], <code>mid = (left + right) / 2</code> 则其子区间对应的节点分别是[left,mid]和[mid+1,right];</li>\n<li>线段树的高度是;log2(right- left + 1)</li>\n<li>线段树把区间上的任意一条线段都分成不超过 <code>2log2N</code></li>\n</ul>\n<h3 id=\"线段树的定义\"><a href=\"#线段树的定义\" class=\"headerlink\" title=\"线段树的定义\"></a>线段树的定义</h3><h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><p>​</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\trootIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// index = 1 开始编号</span>\n<span class=\"token keyword\">type</span> Segment <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tleft  <span class=\"token builtin\">int</span> <span class=\"token comment\">// 区间起始点</span>\n\tright <span class=\"token builtin\">int</span> <span class=\"token comment\">// 区间 结束点</span>\n\tcount <span class=\"token builtin\">int</span> <span class=\"token comment\">// 统计值</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> SegmentTree <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tm        <span class=\"token builtin\">int</span>\n\tsegments <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Segment\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewSegmentTree</span><span class=\"token punctuation\">(</span>m <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>SegmentTree <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>SegmentTree<span class=\"token punctuation\">&#123;</span>\n\t\tm<span class=\"token punctuation\">:</span>        m<span class=\"token punctuation\">,</span>\n\t\tsegments<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Segment<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">buildSegmentTreeInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tst<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Segment<span class=\"token punctuation\">&#123;</span>\n\t\tleft<span class=\"token punctuation\">:</span>  left<span class=\"token punctuation\">,</span>\n\t\tright<span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">,</span>\n\t\tcount<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> left <span class=\"token operator\">==</span> right <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tmid <span class=\"token operator\">:=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">-</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span>\n\tst<span class=\"token punctuation\">.</span><span class=\"token function\">buildSegmentTreeInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tst<span class=\"token punctuation\">.</span><span class=\"token function\">buildSegmentTreeInternal</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>data <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tleft<span class=\"token punctuation\">,</span> right <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>m\n\ti <span class=\"token operator\">:=</span> rootIndex\n\t<span class=\"token keyword\">for</span> left <span class=\"token operator\">&lt;</span> right <span class=\"token punctuation\">&#123;</span>\n\t\tmid <span class=\"token operator\">:=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\tst<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n\t\t<span class=\"token keyword\">if</span> data <span class=\"token operator\">&lt;=</span> mid <span class=\"token punctuation\">&#123;</span>\n\t\t\tright <span class=\"token operator\">=</span> mid\n\t\t\ti <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tleft <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\t\ti <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tst<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>data <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tleft<span class=\"token punctuation\">,</span> right <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>m\n\ti <span class=\"token operator\">:=</span> rootIndex\n\n\t<span class=\"token keyword\">for</span> left <span class=\"token operator\">&lt;</span> right <span class=\"token punctuation\">&#123;</span>\n\t\tst<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span>\n\t\tmid <span class=\"token operator\">:=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">-</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span>\n\t\t<span class=\"token keyword\">if</span> data <span class=\"token operator\">&lt;=</span> mid <span class=\"token punctuation\">&#123;</span>\n\t\t\tright <span class=\"token operator\">=</span> mid\n\t\t\ti <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tleft <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\t\ti <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tst<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// query</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> rootIndex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>left <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> right <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> index <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// terminate</span>\n\tseg <span class=\"token operator\">:=</span> st<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> seg<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> left <span class=\"token operator\">&amp;&amp;</span> seg<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> right <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> seg<span class=\"token punctuation\">.</span>count\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tmid <span class=\"token operator\">:=</span> seg<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>seg<span class=\"token punctuation\">.</span>right<span class=\"token operator\">-</span>seg<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span>\n\t<span class=\"token keyword\">if</span> mid <span class=\"token operator\">>=</span> right <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//区间在左子节点</span>\n\t\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> mid <span class=\"token operator\">&lt;</span> left <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 区间在右子节点</span>\n\t\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">getKth</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> k <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">getKthInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> rootIndex<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">getKthInternal</span><span class=\"token punctuation\">(</span>left <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> right <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> index <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> k <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tseg <span class=\"token operator\">:=</span> st<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> left <span class=\"token operator\">==</span> seg<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> seg<span class=\"token punctuation\">.</span>right <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> k <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//第 Kth 大值不存在</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> seg<span class=\"token punctuation\">.</span>left\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\trightSeg <span class=\"token operator\">:=</span> st<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\tmid <span class=\"token operator\">:=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">-</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span>\n\t<span class=\"token keyword\">if</span> rightSeg<span class=\"token punctuation\">.</span>count <span class=\"token operator\">></span> k <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">getKthInternal</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">getKthInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span> k<span class=\"token operator\">-</span>rightSeg<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<hr>\n<p>[参考]<br><a href=\"https://oi-wiki.org/ds/seg/\">线段树</a><br><a href=\"https://zhuanlan.zhihu.com/p/34150142\">知乎-线段树</a></p>\n","text":"线段树是经常用来维护区间信息的数据结构,线段树可以在 O(logN) 的时间复杂度内实现单点修改,区间修改,区间查询(区间求和,区间最大值,区间最小值) 等操作. 线段树的数据结构 线段树是一种近似的完全二叉树,每个节点代表一个区间,节点的权值. 根节点是整个区间.每个节点的左孩...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"algorithm","slug":"algorithm","count":1,"path":"api/tags/algorithm.json"},{"name":"线段树","slug":"线段树","count":1,"path":"api/tags/线段树.json"},{"name":"区间","slug":"区间","count":1,"path":"api/tags/区间.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">线段树的数据结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">线段树的定义</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#code\"><span class=\"toc-text\">code</span></a></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Intelij-快捷键","uid":"8f865e6ecd68910430d22fc2c9ae4d28","slug":"Intelij-快捷键","date":"2022-07-07T03:20:28.000Z","updated":"2022-10-08T10:33:41.365Z","comments":true,"path":"api/articles/Intelij-快捷键.json","keywords":null,"cover":null,"text":"常用快捷键 Ctrl + Command + G : 选中所有相同的的内容 Ctrl + G : 选中下一个相同的内容 ","link":"","photos":[],"count_time":{"symbolsCount":76,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Intelij","slug":"Intelij","count":1,"path":"api/tags/Intelij.json"},{"name":"快捷键","slug":"快捷键","count":1,"path":"api/tags/快捷键.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"grpc-DNSResolver","uid":"c648812ee90e87a774c05f7906322d9f","slug":"grpc-DNSResolver","date":"2022-06-21T02:58:26.000Z","updated":"2022-10-11T04:01:20.168Z","comments":true,"path":"api/articles/grpc-DNSResolver.json","keywords":null,"cover":null,"text":" Coderesolver/resolver.go package resolver import ( \"context\" \"net\" \"net/url\" \"google.golang.org/grpc/attributes\" \"google.golang.org/grpc/cr...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"DNSResolver","slug":"DNSResolver","count":1,"path":"api/tags/DNSResolver.json"},{"name":"grpc","slug":"grpc","count":1,"path":"api/tags/grpc.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}