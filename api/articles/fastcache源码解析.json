{"title":"fastcache源码分析","uid":"e948586c90ca41ff51fdf8e035fa5502","slug":"fastcache源码解析","date":"2023-05-06T07:52:35.000Z","updated":"2023-05-06T07:52:35.049Z","comments":true,"path":"api/articles/fastcache源码解析.json","keywords":null,"cover":[],"content":"<p><a href=\"https://github.com/VictoriaMetrics/fastcache\">fastcache</a> </p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性:\"></a>特性:</h2><ul>\n<li>快速, 高性能, 多 CPU上 可扩展</li>\n<li>线程安全.  多个 goroutine 可以同时读写一个cache 实例</li>\n<li>fastcache 设计为 在存储大量的 entry 的场景下 GC free</li>\n<li>fastcache 当 缓存数量达到阈值时 可以自动 清理 old entry </li>\n<li>简单的API</li>\n<li>简单的源代码</li>\n<li>cacheData 可以 保存到文件(从文件中加载)</li>\n<li>在 <a href=\"https://cloud.google.com/appengine/docs/go/\">Google App Engine</a> 上工作</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"fastcache-的一些概念\"><a href=\"#fastcache-的一些概念\" class=\"headerlink\" title=\"fastcache 的一些概念\"></a>fastcache 的一些概念</h3><p>bucket:  分桶,  默认 cache中有 512个 bucket,  减少锁粒度 (bucket 内部 会维护  lock, hashmap, chunk, stat(统计信息))</p>\n<p>chunks: <code>[][]byte</code>  用于 存储 kv 的 一个 ringbuffer.  这里二维数组 用来模拟 循环 数组.(减少扩容操作.)</p>\n<p><img src=\"/post/fastcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/chunks.png\" alt=\"chunks\"></p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p><img src=\"/post/fastcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/fastcache%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\" alt=\"fastcache数据结构\"></p>\n<p>fastcache 代码比较简单. </p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Cache is a fast thread-safe inmemory cache optimized for big number</span>\n<span class=\"token comment\">// of entries.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// It has much lower impact on GC comparing to a simple `map[string][]byte`.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Use New or LoadFromFile* for creating new cache instance.</span>\n<span class=\"token comment\">// Concurrent goroutines may call any Cache methods on the same cache instance.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Call Reset when the cache is no longer needed. This reclaims the allocated</span>\n<span class=\"token comment\">// memory.</span>\n<span class=\"token keyword\">type</span> Cache <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tbuckets <span class=\"token punctuation\">[</span>bucketsCount<span class=\"token punctuation\">]</span>bucket <span class=\"token comment\">// bucketCount default 512</span>\n\n\tbigStats BigStats\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 一个 bucket</span>\n<span class=\"token keyword\">type</span> bucket <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tmu sync<span class=\"token punctuation\">.</span>RWMutex\n\n\t<span class=\"token comment\">// chunks is a ring buffer with encoded (k, v) pairs.</span>\n\t<span class=\"token comment\">// It consists of 64KB chunks.</span>\n\t<span class=\"token comment\">// 每个 块是64K, 也就是 chunkSize</span>\n\tchunks <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\n\t<span class=\"token comment\">// m maps hash(k) to idx of (k, v) pair in chunks.</span>\n\t<span class=\"token comment\">// key: hash(key) value:  idx, value 在 chunk中的偏移量(byte) gen+idx</span>\n\tm <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// idx points to chunks for writing the next (k, v) pair.</span>\n\t<span class=\"token comment\">// 用于计算下一个chunk</span>\n\tidx <span class=\"token builtin\">uint64</span> <span class=\"token comment\">// 下一次 要写入的 位置</span>\n\n\t<span class=\"token comment\">// gen is the generation of chunks.</span>\n\tgen <span class=\"token builtin\">uint64</span> <span class=\"token comment\">// chunk 的循环次数</span>\n\n\t<span class=\"token comment\">// 一些统计信息</span>\n\tgetCalls    <span class=\"token builtin\">uint64</span>\n\tsetCalls    <span class=\"token builtin\">uint64</span>\n\tmisses      <span class=\"token builtin\">uint64</span>\n\tcollisions  <span class=\"token builtin\">uint64</span>\n\tcorruptions <span class=\"token builtin\">uint64</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><h4 id=\"1-New\"><a href=\"#1-New\" class=\"headerlink\" title=\"1. New\"></a>1. New</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// New returns new cache with the given maxBytes capacity in bytes.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// maxBytes must be smaller than the available RAM size for the app,</span>\n<span class=\"token comment\">// since the cache holds data in memory.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If maxBytes is less than 32MB, then the minimum cache capacity is 32MB.   - 每个 bucket 最小  64K(一个chunk)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>maxBytes <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// param check</span>\n\t<span class=\"token keyword\">var</span> c Cache\n\t<span class=\"token comment\">// 如果 maxByte / bucketCount 有余数的话, 把超出的部分 分填到  每个 bucket</span>\n\tmaxBucketBytes <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxBytes <span class=\"token operator\">+</span> bucketsCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> bucketsCount<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>maxBucketBytes<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>c\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// bucket 初始化</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>bucket<span class=\"token punctuation\">)</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>maxBytes <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// param check ...</span>\n\t<span class=\"token comment\">// 同样的, 将多余的 字节分散到 每个  chunk</span>\n\tmaxChunks <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>maxBytes <span class=\"token operator\">+</span> chunkSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> chunkSize\n\tb<span class=\"token punctuation\">.</span>chunks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> maxChunks<span class=\"token punctuation\">)</span>\n\tb<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-Set\"><a href=\"#2-Set\" class=\"headerlink\" title=\"2. Set\"></a>2. Set</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Set stores (k, v) in the cache.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Get must be used for reading the stored entry.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 当 发生 overflow  或者  不太可能的 hash Collision  时, entry  将会被丢弃 </span>\n<span class=\"token comment\">// - 如果 经常发生 entry丢失, 那么应该  调用 New()， 调大 最大字节数</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 超过64KB(chunkSize) 不能用 Set 进行存储,应该调用 SetBig.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// k and v contents may be modified after returning from Set.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\th <span class=\"token operator\">:=</span> xxhash<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n\tidx <span class=\"token operator\">:=</span> h <span class=\"token operator\">%</span> bucketsCount <span class=\"token comment\">// 这里 可以 使用  位运算:  h &amp; (bucketsCount - 1)</span>\n\tc<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>bucket.Set()</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// 2byte | 2byte | nbyte | nbyte</span>\n<span class=\"token comment\">// keylen|valLen|key|value</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>bucket<span class=\"token punctuation\">)</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> h <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>setCalls<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Too big key or value - its length cannot be encoded</span>\n\t\t<span class=\"token comment\">// with 2 bytes (see below). Skip the entry.</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 大端存储</span>\n\t<span class=\"token keyword\">var</span> kvLenBuf <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\tkvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\tkvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tkvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\tkvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tkvLen <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>kvLenBuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 要写入的数据的长度</span>\n\t<span class=\"token keyword\">if</span> kvLen <span class=\"token operator\">>=</span> chunkSize <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Do not store too big keys and values, since they do not</span>\n\t\t<span class=\"token comment\">// fit a chunk.</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// chunk</span>\n\t<span class=\"token comment\">// chunkIdx:  chunk</span>\n\t<span class=\"token comment\">// 0:[000000000000000000]  // 64K</span>\n\t<span class=\"token comment\">// 1:[000000000000000000]</span>\n\t<span class=\"token comment\">// 2:[000000000000000000]</span>\n\t<span class=\"token comment\">// 3:[000000000000000000]</span>\n\tchunks <span class=\"token operator\">:=</span> b<span class=\"token punctuation\">.</span>chunks\n\tneedClean <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tidx <span class=\"token operator\">:=</span> b<span class=\"token punctuation\">.</span>idx\n\tidxNew <span class=\"token operator\">:=</span> idx <span class=\"token operator\">+</span> kvLen\n\tchunkIdx <span class=\"token operator\">:=</span> idx <span class=\"token operator\">/</span> chunkSize\n\tchunkIdxNew <span class=\"token operator\">:=</span> idxNew <span class=\"token operator\">/</span> chunkSize\n\t<span class=\"token keyword\">if</span> chunkIdxNew <span class=\"token operator\">></span> chunkIdx <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//当前 chunk 放不下 该 kv, 往下一个 chunk 写 或者 循环写</span>\n\t\t<span class=\"token keyword\">if</span> chunkIdxNew <span class=\"token operator\">>=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环写</span>\n\t\t\tidx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\tidxNew <span class=\"token operator\">=</span> kvLen\n\t\t\tchunkIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\tb<span class=\"token punctuation\">.</span>gen<span class=\"token operator\">++</span>                              <span class=\"token comment\">// 循环次数</span>\n\t\t\t<span class=\"token keyword\">if</span> b<span class=\"token punctuation\">.</span>gen<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>genSizeBits<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// b.gen&amp;maxGen == 0, 说明 b.gen == maxGen</span>\n\t\t\t\tb<span class=\"token punctuation\">.</span>gen<span class=\"token operator\">++</span> <span class=\"token comment\">// 此处 ++ 的目的是为了 循环取余</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tneedClean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 当 chunks 满了, 需要 从 头chunks[0]开始写, 需要把当前 chunk 全部清空.(清空  b.m)</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 大部分场景</span>\n\t\t\tidx <span class=\"token operator\">=</span> chunkIdxNew <span class=\"token operator\">*</span> chunkSize\n\t\t\tidxNew <span class=\"token operator\">=</span> idx <span class=\"token operator\">+</span> kvLen\n\t\t\tchunkIdx <span class=\"token operator\">=</span> chunkIdxNew\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tchunks<span class=\"token punctuation\">[</span>chunkIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chunks<span class=\"token punctuation\">[</span>chunkIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 将该chunk清空</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tchunk <span class=\"token operator\">:=</span> chunks<span class=\"token punctuation\">[</span>chunkIdx<span class=\"token punctuation\">]</span>\n\t<span class=\"token comment\">// 首次初始化 , chunk[i] == nil</span>\n\t<span class=\"token keyword\">if</span> chunk <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tchunk <span class=\"token operator\">=</span> <span class=\"token function\">getChunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 性能关键点: 堆外分配内存</span>\n\t\tchunk <span class=\"token operator\">=</span> chunk<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 正式写入数据</span>\n\tchunk <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> kvLenBuf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\tchunk <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> k<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\tchunk <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> v<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\tchunks<span class=\"token punctuation\">[</span>chunkIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chunk\n\tb<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> idx <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>gen <span class=\"token operator\">&lt;&lt;</span> bucketSizeBits<span class=\"token punctuation\">)</span> <span class=\"token comment\">// gen + idx</span>\n\tb<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> idxNew\n\t<span class=\"token keyword\">if</span> needClean <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 清理 覆盖的  overflow 的 chunk(遍历 b.m,逐个 判断 清理)</span>\n\t\tb<span class=\"token punctuation\">.</span><span class=\"token function\">cleanLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>gen: 循环次数, gen 在什么情况下 会 + 1?</strong></p>\n<p>bucket.gen 在初始化时默认值是 <code>1</code>,  当 chunks 写满后, gen 会 +1, 表示循环次数.  当 gen  达到 maxGen(1 &lt;&lt; 24 -1) 后, gen 复位为1.</p>\n<p>了解了 <code>gen</code>: 相信下面这几个条件就可以看懂了:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>gen &#x3D;&#x3D; bGen &amp;&amp; idx &lt; b.idx: 在一个循环内<br>gen+1 &#x3D;&#x3D; bGen &amp;&amp; idx &gt;&#x3D; b.idx: 不在一个循环内,数据没有覆盖<br>gen &#x3D;&#x3D; maxGen &amp;&amp; bGen &#x3D;&#x3D; 1 &amp;&amp; idx &gt;&#x3D; b.idx: 重新开始循环,数据没有覆盖</p></blockquote>\n<p><strong>当 chunk 写满了, 使用下一个 chunk 时, 使用 getChunk() 初始化 chunk ?</strong></p>\n<p><code>getChunk()</code> 在堆外分配内存, 而不是直接在堆上 分配, 减少GC压力. 这是 fastcache 高性能的一个关键点.</p>\n<p>在 <code>malloc_mmap.go</code> 维护了一个  chunk 池子,可以复用 chunk.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">const</span> chunksPerAlloc <span class=\"token operator\">=</span> <span class=\"token number\">1024</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">//这里  相当于一个 chunk 池子</span>\n\tfreeChunks     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>chunkSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\tfreeChunksLock sync<span class=\"token punctuation\">.</span>Mutex\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 预分配  chunkSize*chunksPerAlloc 的 字节数组,(offheap), 通过 mmap</span>\n<span class=\"token comment\">// 每次 getChunk 从中截取  chunkSize 大小的  []byte</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getChunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">&#123;</span>\n\tfreeChunksLock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 如果 freechunk 没有了, 从堆外申请.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>freeChunks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Allocate offheap memory, so GOGC won't take into account cache size.</span>\n\t\t<span class=\"token comment\">// This should reduce free memory waste.</span>\n\t\t<span class=\"token comment\">// 堆外申请内存, GOGC 不会考虑 缓存大小, 这应该会减少 free memory 浪费.</span>\n\t\tdata<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> unix<span class=\"token punctuation\">.</span><span class=\"token function\">Mmap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> chunkSize<span class=\"token operator\">*</span>chunksPerAlloc<span class=\"token punctuation\">,</span> unix<span class=\"token punctuation\">.</span>PROT_READ<span class=\"token operator\">|</span>unix<span class=\"token punctuation\">.</span>PROT_WRITE<span class=\"token punctuation\">,</span> unix<span class=\"token punctuation\">.</span>MAP_ANON<span class=\"token operator\">|</span>unix<span class=\"token punctuation\">.</span>MAP_PRIVATE<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot allocate %d bytes via mmap: %s\"</span><span class=\"token punctuation\">,</span> chunkSize<span class=\"token operator\">*</span>chunksPerAlloc<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tp <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>chunkSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tfreeChunks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>freeChunks<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>\n\t\t\tdata <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>chunkSize<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tn <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>freeChunks<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\tp <span class=\"token operator\">:=</span> freeChunks<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n\tfreeChunks<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tfreeChunks <span class=\"token operator\">=</span> freeChunks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span>\n\tfreeChunksLock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n<h4 id=\"3-Get\"><a href=\"#3-Get\" class=\"headerlink\" title=\"3. Get\"></a>3. Get</h4><p><strong>cache.Get()</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Get appends value by the key k to dst and returns the result.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Get allocates new byte slice for the returned value if dst is nil.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Get returns only values stored in c via Set.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// k contents may be modified after returning from Get.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">&#123;</span>\n\th <span class=\"token operator\">:=</span> xxhash<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n\tidx <span class=\"token operator\">:=</span> h <span class=\"token operator\">%</span> bucketsCount <span class=\"token comment\">// 这里 可以 优化为 位运算.</span>\n\tdst<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> dst\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>bucket.Get()</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>bucket<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> h <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> returnDst <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>getCalls<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tfound <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n\tchunks <span class=\"token operator\">:=</span> b<span class=\"token punctuation\">.</span>chunks\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tv <span class=\"token operator\">:=</span> b<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 读取 value， 从中解析出  idx &amp; gen</span>\n\tbGen <span class=\"token operator\">:=</span> b<span class=\"token punctuation\">.</span>gen <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> genSizeBits<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> v <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\tgen <span class=\"token operator\">:=</span> v <span class=\"token operator\">>></span> bucketSizeBits\n\t\tidx <span class=\"token operator\">:=</span> v <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> bucketSizeBits<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// gen == bGen &amp;&amp; idx &lt; b.idx: 在一个循环内</span>\n\t\t<span class=\"token comment\">// gen+1 == bGen &amp;&amp; idx >= b.idx: 不在一个循环内,数据没有覆盖</span>\n\t\t<span class=\"token comment\">// gen == maxGen &amp;&amp; bGen == 1 &amp;&amp; idx >= b.idx: 重新开始循环,数据没有覆盖</span>\n\t\t<span class=\"token keyword\">if</span> gen <span class=\"token operator\">==</span> bGen <span class=\"token operator\">&amp;&amp;</span> idx <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">||</span> gen<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> bGen <span class=\"token operator\">&amp;&amp;</span> idx <span class=\"token operator\">>=</span> b<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">||</span> gen <span class=\"token operator\">==</span> maxGen <span class=\"token operator\">&amp;&amp;</span> bGen <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> idx <span class=\"token operator\">>=</span> b<span class=\"token punctuation\">.</span>idx <span class=\"token punctuation\">&#123;</span>\n\t\t\tchunkIdx <span class=\"token operator\">:=</span> idx <span class=\"token operator\">/</span> chunkSize\n\t\t\t<span class=\"token keyword\">if</span> chunkIdx <span class=\"token operator\">>=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// Corrupted data during the load from file. Just skip it.</span>\n\t\t\t\t<span class=\"token comment\">// 文件加载时损坏的数据,跳过</span>\n\t\t\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>corruptions<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">goto</span> end\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tchunk <span class=\"token operator\">:=</span> chunks<span class=\"token punctuation\">[</span>chunkIdx<span class=\"token punctuation\">]</span>\n\t\t\tidx <span class=\"token operator\">%=</span> chunkSize\n\t\t\t<span class=\"token keyword\">if</span> idx<span class=\"token operator\">+</span><span class=\"token number\">4</span> <span class=\"token operator\">>=</span> chunkSize <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// Corrupted data during the load from file. Just skip it.</span>\n\t\t\t\t<span class=\"token comment\">// 文件加载时损坏的数据,跳过</span>\n\t\t\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>corruptions<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">goto</span> end\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tkvLenBuf <span class=\"token operator\">:=</span> chunk<span class=\"token punctuation\">[</span>idx <span class=\"token punctuation\">:</span> idx<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\t\t\tkeyLen <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>kvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>kvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tvalLen <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>kvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>kvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tidx <span class=\"token operator\">+=</span> <span class=\"token number\">4</span>\n\t\t\t<span class=\"token keyword\">if</span> idx<span class=\"token operator\">+</span>keyLen<span class=\"token operator\">+</span>valLen <span class=\"token operator\">>=</span> chunkSize <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// Corrupted data during the load from file. Just skip it.</span>\n\t\t\t\t<span class=\"token comment\">// 文件加载时损坏的数据,跳过</span>\n\t\t\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>corruptions<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">goto</span> end\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">// hash 值相同, 判断 key 是否一致</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">:</span>idx<span class=\"token operator\">+</span>keyLen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// dst = chunk[idx+keyLen:idx+valLen]</span>\n\t\t\t\tidx <span class=\"token operator\">+=</span> keyLen\n\t\t\t\t<span class=\"token keyword\">if</span> returnDst <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tdst <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">:</span>idx<span class=\"token operator\">+</span>valLen<span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tfound <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// 发生hash collision</span>\n\t\t\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>collisions<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\nend<span class=\"token punctuation\">:</span>\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>found <span class=\"token punctuation\">&#123;</span>\n\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>misses<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">,</span> found\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"4-Del\"><a href=\"#4-Del\" class=\"headerlink\" title=\"4. Del\"></a>4. Del</h4><p>del 的 逻辑比较简单. 不处理 chunk, 直接 在 bucket的hash表m中进行删除</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>bucket<span class=\"token punctuation\">)</span> <span class=\"token function\">Del</span><span class=\"token punctuation\">(</span>h <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"file-Load-Save\"><a href=\"#file-Load-Save\" class=\"headerlink\" title=\"file  Load | Save\"></a>file  Load | Save</h3><ul>\n<li><a href=\"https://github.com/VictoriaMetrics/fastcache/blob/078d48108c89d61e64e9cd0ea159c570827098c7/file.go\">源码文件</a></li>\n</ul>\n<p>file Save, 将缓存中的内容 按照一定的协议持久化写入文件中. 这个操作也比较常见.(比如 proto)</p>\n<p>fileSave:  多携程 并发的写入 file, 多个协程 根据 bucket 分任务, 分别 写入文件,加速 写入 效率.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// SaveToFile atomically saves cache data to the given filePath using a single</span>\n<span class=\"token comment\">// CPU core.</span>\n<span class=\"token comment\">// 利用 但 cpu 保存  缓存数据到 filePath</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// SaveToFile may be called concurrently with other operations on the cache.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The saved data may be loaded with LoadFromFile*.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// See also SaveToFileConcurrent for faster saving to file.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">SaveToFile</span><span class=\"token punctuation\">(</span>filePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">SaveToFileConcurrent</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// SaveToFileConcurrent saves cache data to the given filePath using concurrency</span>\n<span class=\"token comment\">// CPU cores.</span>\n<span class=\"token comment\">// 利用 多 cpu 将 缓存数据并发保存到文件.</span>\n<span class=\"token comment\">// 这里参数的  filePath 也是一个 目录</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// SaveToFileConcurrent may be called concurrently with other operations</span>\n<span class=\"token comment\">// on the cache.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The saved data may be loaded with LoadFromFile*.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// See also SaveToFile.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">SaveToFileConcurrent</span><span class=\"token punctuation\">(</span>filePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> concurrency <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Create dir if it doesn't exist.</span>\n\tdir <span class=\"token operator\">:=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Dir</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Stat</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">IsNotExist</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot stat %q: %s\"</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">MkdirAll</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token number\">0755</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create dir %q: %s\"</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// Save cache data into a temporary directory.</span>\n\ttmpDir<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">TempDir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fastcache.tmp.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create temporary dir inside %q: %s\"</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> tmpDir <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAll</span><span class=\"token punctuation\">(</span>tmpDir<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tgomaxprocs <span class=\"token operator\">:=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> concurrency <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> concurrency <span class=\"token operator\">></span> gomaxprocs <span class=\"token punctuation\">&#123;</span>\n\t\tconcurrency <span class=\"token operator\">=</span> gomaxprocs\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//  并发保存数据到 文件</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>tmpDir<span class=\"token punctuation\">,</span> concurrency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot save cache data to temporary dir %q: %s\"</span><span class=\"token punctuation\">,</span> tmpDir<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// Remove old filePath contents, since os.Rename may return</span>\n\t<span class=\"token comment\">// error if filePath dir exists.</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAll</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot remove old contents at %q: %s\"</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 相当于 move</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Rename</span><span class=\"token punctuation\">(</span>tmpDir<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot move temporary dir %q to %q: %s\"</span><span class=\"token punctuation\">,</span> tmpDir<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ttmpDir <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存数据到文件. 这也是一种常见的多协程 编程模式. 利用协程和 chan.</p>\n<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">\nfunc (c *Cache) save(dir string, workersCount int) error &#123;\n\tif err :&#x3D; saveMetadata(c, dir); err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\n\t&#x2F;&#x2F; Save buckets by workersCount concurrent workers.\n\tworkCh :&#x3D; make(chan int, workersCount)\n\tresults :&#x3D; make(chan error)\n\tfor i :&#x3D; 0; i &lt; workersCount; i++ &#123;\n\t\tgo func(workerNum int) &#123;\n\t\t\tresults &lt;- saveBuckets(c.buckets[:], workCh, dir, workerNum)\n\t\t&#125;(i)\n\t&#125;\n\t&#x2F;&#x2F; 给 work 分发工作. 传 bucketIndex. workCh 相当于一个任务队列.\n\t&#x2F;&#x2F; Feed workers with work\n\tfor i :&#x3D; range c.buckets[:] &#123;\n\t\tworkCh &lt;- i\n\t&#125;\n\tclose(workCh)\n\n\t&#x2F;&#x2F; Read results.  -- 如果使用 waitGroup 该怎么写呢?\n\tvar err error\n\tfor i :&#x3D; 0; i &lt; workersCount; i++ &#123;\n\t\tresult :&#x3D; &lt;-results\n\t\tif result !&#x3D; nil &amp;&amp; err &#x3D;&#x3D; nil &#123;\n\t\t\terr &#x3D; result\n\t\t&#125;\n\t&#125;\n\treturn err\n&#125;\n\nfunc saveBuckets(buckets []bucket, workCh &lt;-chan int, dir string, workerNum int) error &#123;\n\t&#x2F;&#x2F; 一个 协程 一个文件.\n\tdataPath :&#x3D; fmt.Sprintf(&quot;%s&#x2F;data.%d.bin&quot;, dir, workerNum)\n\tdataFile, err :&#x3D; os.Create(dataPath)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;cannot create %q: %s&quot;, dataPath, err)\n\t&#125;\n\tdefer func() &#123;\n\t\t_ &#x3D; dataFile.Close()\n\t&#125;()\n\t&#x2F;&#x2F; 数据进行压缩.\n\tzw :&#x3D; snappy.NewBufferedWriter(dataFile)\n\tfor bucketNum :&#x3D; range workCh &#123;\n\t\t&#x2F;&#x2F; save BucketNum\n\t\tif err :&#x3D; writeUint64(zw, uint64(bucketNum)); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;cannot write bucketNum&#x3D;%d to %q: %s&quot;, bucketNum, dataPath, err)\n\t\t&#125;\n\t\t&#x2F;&#x2F; save BucketData\n\t\tif err :&#x3D; buckets[bucketNum].Save(zw); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;cannot save bucket[%d] to %q: %s&quot;, bucketNum, dataPath, err)\n\t\t&#125;\n\t&#125;\n\tif err :&#x3D; zw.Close(); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;cannot close snappy.Writer for %q: %s&quot;, dataPath, err)\n\t&#125;\n\treturn nil\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>LoadFile:</p>\n<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n<p>[参考]<br><a href=\"https://www.bilibili.com/video/BV17Y411J7vG/?spm_id_from=333.337.search-card.all.click&vd_source=fe2ba0ea18a9a373ca67c032c344409e\">fastcache内部原理讲解及核心源码分析</a><br><a href=\"https://zhuanlan.zhihu.com/p/487455942\">golang本地缓存(bigcache&#x2F;freecache&#x2F;fastcache等)选型对比及原理总结</a></p>\n","feature":true,"text":"fastcache 特性: 快速, 高性能, 多 CPU上 可扩展 线程安全. 多个 goroutine 可以同时读写一个cache 实例 fastcache 设计为 在存储大量的 entry 的场景下 GC free fastcache 当 缓存数量达到阈值时 可以自动 清理 ...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"go","slug":"go","count":2,"path":"api/tags/go.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"},{"name":"fastcache","slug":"fastcache","count":1,"path":"api/tags/fastcache.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">特性:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fastcache-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">fastcache 的一些概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数据结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">常用操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-New\"><span class=\"toc-text\">1. New</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-Set\"><span class=\"toc-text\">2. Set</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-Get\"><span class=\"toc-text\">3. Get</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-Del\"><span class=\"toc-text\">4. Del</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#file-Load-Save\"><span class=\"toc-text\">file  Load | Save</span></a></li></ol></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"大数据-数据仓库大宽表","uid":"7b7fae18844a9a83dfd9701a806d24e8","slug":"大数据-数据仓库大宽表","date":"2023-03-01T13:17:02.000Z","updated":"2023-03-01T15:59:43.086Z","comments":true,"path":"api/articles/大数据-数据仓库大宽表.json","keywords":null,"cover":null,"text":"什么是大宽表, 为什么要使用大宽表, 大宽表有什么优缺点, 设计大宽表要注意什么? 参考一起聊聊数仓大宽表 ","link":"","photos":[],"count_time":{"symbolsCount":62,"symbolsTime":"1 mins."},"categories":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/categories/bigdata.json"}],"tags":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/tags/bigdata.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}