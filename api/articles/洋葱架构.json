{"title":"洋葱架构","uid":"2797f253c04e63756fe2c781cd7fcc62","slug":"洋葱架构","date":"2022-07-23T06:23:04.000Z","updated":"2022-07-23T07:38:07.305Z","comments":true,"path":"api/articles/洋葱架构.json","keywords":null,"cover":[],"content":"<p><img src=\"/./%E6%B4%8B%E8%91%B1%E6%9E%B6%E6%9E%84/%E6%B4%8B%E8%91%B1%E6%9E%B6%E6%9E%84.webp\" alt=\"洋葱架构\"></p>\n<span id=\"more\"></span>\n\n<p>领域是一个知识范畴,他指的是我们的软件要模拟的业务知识。 领域驱动设计的核心是 <code>领域模型</code>,它对一个领域的流程和规则有着深刻的理解,洋葱架构实现了这一概念,并极大地改善了代码的品质,降低了复杂性,并且支持不断地发展企业系统.</p>\n<hr>\n<p><a href=\"https://www.infoq.cn/article/zOlhF7uu455xOVvQwWv3\">详解”洋葱架构”</a><br><a href=\"https://medium.com/expedia-group-tech/onion-architecture-deed8a554423\">Onion Architecture</a></p>\n","text":" 领域是一个知识范畴,他指的是我们的软件要模拟的业务知识。 领域驱动设计的核心是 领域模型,它对一个领域的流程和规则有着深刻的理解,洋葱架构实现了这一概念,并极大地改善了代码的品质,降低了复杂性,并且支持不断地发展企业系统. 详解”洋葱架构”Onion Architecture ...","link":"","photos":[],"count_time":{"symbolsCount":143,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"架构","slug":"架构","count":2,"path":"api/tags/架构.json"}],"toc":"","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"go build 实现包切换","uid":"d96ad83bba94948fc2ba2a5f3d6fbcb0","slug":"go-build-实现包切换","date":"2022-08-03T04:18:02.000Z","updated":"2022-09-03T07:45:16.171Z","comments":true,"path":"api/articles/go-build-实现包切换.json","keywords":null,"cover":null,"text":"参考 Gin 的实现 gin 在 internal/json包中实现了多个 json 包的序列化能力, 默认使用官方encoding/json包. 如何保证这些包不会冲突呢? 这里用到了 go build -tags 的能力. [json.go](https://github.c...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"go","slug":"go","count":2,"path":"api/tags/go.json"},{"name":"go build","slug":"go-build","count":1,"path":"api/tags/go-build.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"六边形架构","uid":"911037a657c82ed3571b8e922dfd713c","slug":"六边形架构","date":"2022-07-23T02:47:02.000Z","updated":"2022-07-23T03:26:42.646Z","comments":true,"path":"api/articles/六边形架构.json","keywords":null,"cover":[],"text":"分层架构是一种架构风格,本质是避免耦合,使边界清晰.六边形架构 遵循了分层架构的所有约束与特性，其实使用 端口与适配器这个名字更加合适.因为六边形架构的 边数没有意义. 六边形架构能够充分地区分 领域模型与 输入输出设备之间的界限. 1. 六边形架构(端口与适配器) 一种具有对称...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"架构","slug":"架构","count":2,"path":"api/tags/架构.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}