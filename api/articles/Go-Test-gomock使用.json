{"title":"Go-Test-gomock使用","uid":"301b2e78436f0e9c40fa9a9acf52a404","slug":"Go-Test-gomock使用","date":"2022-11-14T11:53:38.000Z","updated":"2022-11-14T11:53:38.199Z","comments":true,"path":"api/articles/Go-Test-gomock使用.json","keywords":null,"cover":null,"content":"<p>写出可测试 的代码 至关重要.  可以保证代码的稳定性.  帮助程序员减少bug.</p>\n<p>gomock 是一个go官方的模拟框架.<br>gomock的使用场景:</p>\n<ul>\n<li>IO类型的数据, 本地文件,数据库,网络API,RPC等</li>\n<li>依赖的服务还没有开发好, 这时候可以自己模拟一个服务, 加快开发进度提升开发效率</li>\n<li>压力性能测试的时候屏蔽外部依赖, 专注测试本模块</li>\n<li>依赖的内部函数非常复杂, 要构造数据非常不方便，这也是一种</li>\n</ul>\n<p><a href=\"https://github.com/golang/mock\">gomock</a></p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">go get github.com&#x2F;golang&#x2F;mock\n\ngo install github.com&#x2F;golang&#x2F;mock&#x2F;mockgen@latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>gomock在许多 开源项目中都有使用.   可以参考一些开源项目。  比如 <code>[gocache](https://github.com/eko/gocache)</code></p>\n<p>使用mockgen 支持两种 自动生成代码的方式.</p>\n<ol>\n<li><p>指定source,从源文件生成 mock接口</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mockgen -source&#x3D;.&#x2F;foo.go  -destination&#x3D;..&#x2F;test&#x2F;mock&#x2F; -pakcage&#x3D;mock<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>通过 <code>reflect</code> 的方式, 这种方式需要传递两种非标志参数来启动. <code>导入路径 import</code>  和  <code>逗号分隔的需要mock的接口列表</code></p>\n</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mockgen database&#x2F;sql&#x2F;driver  Conn,Driver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"mockgen-相关参数\"><a href=\"#mockgen-相关参数\" class=\"headerlink\" title=\"mockgen 相关参数\"></a>mockgen 相关参数</h3><ul>\n<li><code>-source</code>: 要模拟的接口文件</li>\n<li><code>-desitination</code>: mock文件输出的地方,如不设置,默认输出到标准输出中.</li>\n<li><code>-package</code>: 生成的 mock 文件的包名, 如不设置则为 <code>mock_</code> 前缀加上输入的文件名。</li>\n<li><code>-imports</code>: 应该在生成的源码文件中显示的导入的<strong>包列表</strong>.  声明为  <code>foo=bar/baz</code> 形式的并且以逗号分隔的列表. <code>foo</code>表示生成的源码文件中报的标识符, <code>bar/baz</code> 是要导入的包.</li>\n<li><code>-aux_files</code>: 应查阅的附加文件列表, 已解决例如在不同文件中定义的嵌入式接口(embbed interface). 声明为  <code>foo=bar/baz.go</code> 形式的并且以逗号分隔的列表.  <code>bar/baz.go</code> 是指定的源文件.  <code>foo</code> 是<code>-source</code> 指定的文件的包名.</li>\n<li><code>-build_flags</code>: 这个参数只在 reflect模式下使用. 用于 <code>go build</code> 中使用. </li>\n<li><code>-mock_names</code>: 自定义生成mock的文件列表.  使用逗号分隔. 例如: <code>Repository=MockSensorRepository,Endpoint=MockSensorEndpoint</code>. Repository Endpoint 是要模拟的接口, <code>MockSensorRepository</code> 和 <code>MockSensorEndpoint</code> 是模拟的实现类名.  如果不指定,则使用默认值.</li>\n</ul>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p><code>gomock.NewController</code>: 返回 gomock.Controller，它代表 mock 生态系统中的顶级控件。定义了 mock 对象的范围、生命周期和期待值。另外它在多个 goroutine 中是安全的<br><code>mock.NewMockMale</code>: 创建一个新的 mock 实例<br><code>gomock.InOrder</code>: 声明给定的调用应按顺序进行(是对 gomock.After 的二次封装)<br><code>mockMale.EXPECT().Get(id).Return(nil)</code>: 这里有三个步骤，EXPECT()返回一个允许调用者设置期望和返回值的对象. Get(id) 是设置入参并调用 mock 实例中的方法. Return(nil) 是设置先前调用的方法出参。简单来说，就是设置入参并调用，最后设置返回值<br><code>NewUser(mockMale)</code>: 创建 User 实例, 值得注意的是，在这里注入了 mock 对象,因此实际在随后的 user.GetUserInfo(id) 调用(入参：id 为 1)中. 它调用的是我们事先模拟好的 mock 方法<br><code>ctrl.Finish()</code>: 进行 mock 用例的期望值断言，一般会使用 defer 延迟执行，以防止我们忘记这一操作</p>\n<p><a href=\"https://github.com/golang/mock/tree/main/sample\">官方Demo</a></p>\n<h2 id=\"参数匹配器\"><a href=\"#参数匹配器\" class=\"headerlink\" title=\"参数匹配器\"></a>参数匹配器</h2><p><code>[Matcher](https://github.com/golang/mock/blob/main/gomock/matchers.go#L25)</code> 表示values 的类型.  通常用于表示  mock方法的期望参数.</p>\n<p>Matcher接口定义:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// A Matcher is a representation of a class of values.</span>\n<span class=\"token comment\">// It is used to represent the valid or expected arguments to a mocked method.</span>\n<span class=\"token keyword\">type</span> Matcher <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Matches returns whether x is a match.</span>\n\t<span class=\"token function\">Matches</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n\n\t<span class=\"token comment\">// String describes what the matcher matches.</span>\n\t<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>有时,不关心 调用mock时的特定参数,使用 gomock, 可以预期参数 具有固定值(通过 指定预期的 参数值),与谓词匹配, 称为匹配器.  </p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">gomock.Any():匹配任何值(任何类型)\ngomock.Eq(x):使用反射来匹配是值DeepEqual 到 x\ngomock.Nil(): 火柴 nil\ngomock.Not(m):(m 匹配器在哪里)匹配匹配器不匹配的值 m, gomock.Not(x)(式中， x 是 不 一个Matcher)匹配的值不 DeepEqual 至 x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"需要掌握的\"><a href=\"#需要掌握的\" class=\"headerlink\" title=\"需要掌握的\"></a>需要掌握的</h2><ul>\n<li>使用  <code>mockgen</code> 生成代码 一节   使用 <code>go:generate</code>  批量生成代码</li>\n<li>了解 gomock 是对接口的mock<ul>\n<li>期望入参</li>\n<li>期望返回值</li>\n<li>调用次数</li>\n<li>调用顺序</li>\n<li>执行 <code>Do</code> mock逻辑</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>参考<br><a href=\"https://xiaoming.net.cn/2021/06/29/gomock%20%E4%BD%BF%E7%94%A8/\">gomock 使用</a><br><a href=\"https://zhuanlan.zhihu.com/p/410445621\">GoMock快速上手教程</a><br><a href=\"https://pkg.go.dev/github.com/golang/mock/gomock#pkg-index\">Gomock文档</a></p>\n","text":"写出可测试 的代码 至关重要. 可以保证代码的稳定性. 帮助程序员减少bug. gomock 是一个go官方的模拟框架.gomock的使用场景: IO类型的数据, 本地文件,数据库,网络API,RPC等 依赖的服务还没有开发好, 这时候可以自己模拟一个服务, 加快开发进度提升开发...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"gomock","slug":"gomock","count":1,"path":"api/tags/gomock.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#install\"><span class=\"toc-text\">install</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mockgen-%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">mockgen 相关参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Example\"><span class=\"toc-text\">Example</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0%E5%8C%B9%E9%85%8D%E5%99%A8\"><span class=\"toc-text\">参数匹配器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84\"><span class=\"toc-text\">需要掌握的</span></a></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Go-Test-Convey使用","uid":"7197218ba2b31b3e36651d378424a532","slug":"Go-Test-Convey使用","date":"2022-11-14T11:53:51.000Z","updated":"2022-11-14T11:53:51.655Z","comments":true,"path":"api/articles/Go-Test-Convey使用.json","keywords":null,"cover":[],"text":"ConveyWiki Feature: 直接与 go test 集成 全自动的 WEBUI(与 go test 一起工作) 大量的回归测试 展示测试覆盖率 可读的,彩色控制台输出(可以被其他人理解) 测试代码自动生成 桌面通知(optional) 立即打开问题行. 1. Why ...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"convey","slug":"convey","count":1,"path":"api/tags/convey.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"freecache源码解析","uid":"33024321d4d721b36bc422db43cf754d","slug":"freecache源码解析","date":"2022-10-10T15:59:17.000Z","updated":"2022-10-10T17:01:20.789Z","comments":true,"path":"api/articles/freecache源码解析.json","keywords":null,"cover":[],"text":"代码仓库地址 freeCache 相比较 golang 的原生map实现缓存,可以通过减少指针的数量避免 GC压力,无论存储了多少数据,内部只会占用 512个指针, 数据集 通过 hash(key) 被分片256个 segment,每个 segment 有两个指针, 一个存储键和...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}