{"title":"Spring-AOP详解","uid":"bfa33a5fe2e0aa639906339c30ac4485","slug":"Spring-AOP详解","date":"2019-06-04T06:51:48.000Z","updated":"2022-03-03T15:50:52.810Z","comments":true,"path":"api/articles/Spring-AOP详解.json","keywords":null,"cover":[],"content":"<p><a href=\"https://docs.spring.io/spring/docs/5.1.7.RELEASE/spring-framework-reference/core.html#aop-api\">springDOC</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>将重复性的逻辑代码横切出来其实很容易(我们简单可认为就是封装成一个类就好了)，<br>但我们要将这些被我们横切出来的逻辑代码融合到业务逻辑中，来完成和之前(没抽取前)一样的功能！这就是AOP首要解决的问题了！<br>这样一来，我们就在写业务时只关心业务代码，而不用关心与业务无关的代码</p></blockquote>\n<span id=\"more\"></span>\n\n<p><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/spring-aop-aspect.jpg\" alt=\"AOP切面\"><br><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/spring-aop-%E6%A8%AA%E5%90%91%E6%8A%BD%E5%8F%96.jpg\" alt=\"AOP横向抽取\"></p>\n<h2 id=\"Spring-Aop-原理\"><a href=\"#Spring-Aop-原理\" class=\"headerlink\" title=\"Spring Aop 原理\"></a>Spring Aop 原理</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring AOP 使用纯Java实现，它不需要专门的编译过程，也不需要特殊的类装载器，<br><strong>它在运行期通过代理方式向目标类织入增强代码</strong>。在Spring中可以无缝地将 Spring AOP、IoC 和 AspectJ 整合在一起。<br>Spring AOP构建在动态代理基础之上，因此，Spring对AOP的支持局限于方法拦截。</p></blockquote>\n<p><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/aopProxy.jpg\"></p>\n<p>  动态代理</p>\n<ul>\n<li>JDK 动态代理<br>  Spring AOP默认是使用JDK动态代理，如果代理的类没有接口则会使用CGLib代理。</li>\n<li>cglib动态代理<br>  CGLib代理其生成的动态代理对象是目标类的子类</li>\n</ul>\n<p>** <code>JDK动态代理</code> 和 <code>cglib代理</code>我们应该使用哪个？</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  如果是单例的我们最好使用 CGLib代理，如果是多例的我们最好使用JDK代理\n\n  原因: JDK在创建代理对象时的性能要高于 CGLib代理，而生成代理对象的运行性能却比CGLib的低。\n如果是单例的代理，推荐使用CGLib<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"AOP-的实现\"><a href=\"#AOP-的实现\" class=\"headerlink\" title=\"AOP 的实现\"></a>AOP 的实现</h2><ol>\n<li>Spring AOP<br> 而Spring借鉴了AspectJ很多非常有用的做法，融合了AspectJ实现AOP的功能。但Spring AOP本质上底层还是动态代理，所以Spring AOP是不需要有专门的编辑器的</li>\n<li>AspectJ<br> AspectJ是语言级别的AOP实现，扩展了Java语言，定义了AOP语法，能够在编译期提供横切代码的织入，所以它有专门的编译器用来生成遵守Java字节码规范的Class文件。</li>\n</ol>\n<h2 id=\"AOP-术语\"><a href=\"#AOP-术语\" class=\"headerlink\" title=\"AOP 术语\"></a>AOP 术语</h2><ul>\n<li><p>连接点(JoinPoint)<br>能够被拦截的地方: Spring AOP是基于动态代理的，所以是方法拦截的。每个成员方法都可以称之为<code>连接点(JoinPoint)</code></p>\n</li>\n<li><p>切点(PointCut)<br>具体定位的连接点: 上面也说了，每个方法都可以称之为<code>连接点(JoinPoint)</code>，我们具体定位到某一个方法就成为 <code>切点(PointCut)</code>。</p>\n</li>\n<li><p>增强(Advice)<br>表示添加到切点的一段<code>逻辑代码</code>，并定位<code>连接点(JoinPoint)</code>的方位信息。<br>Spring AOP提供了5种Advice类型给我们：<code>前置(Before)</code>、<code>后置(After)</code>、<code>返回(Return)</code>、<code>异常(Exception)</code>、<code>环绕(Around)</code>给我们使用！</p>\n</li>\n<li><p>切面(Aspect)<br>切面由<code>切点(PointCut)</code>和<code>增强(Advice)</code>组成，它既包括了横切逻辑的定义、也包括了<code>连接点(JoinPoint)</code>的定义。</p>\n</li>\n<li><p>织入(Weaving)<br>将<code>增强(Advice)</code>添加到目标类的具体<code>连接点(JoinPoint)</code>上的过程。</p>\n</li>\n</ul>\n<p>这些概念乍一看可能有点蒙， 当AOP 用的多了以后，自然而然就理解了<br>其中关键是: <code>切点(PointCut)</code>定位的方法[连接点(JoinPoint)] 会得到 <code>增强(Advice)</code> 代码的<code>织入(Weaving)</code></p>\n<h3 id=\"切面类型\"><a href=\"#切面类型\" class=\"headerlink\" title=\"切面类型\"></a>切面类型</h3><p><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/spring-aop-%E5%88%87%E9%9D%A2%E7%B1%BB%E5%9E%8B.jpg\" alt=\"切面类型\"></p>\n<ol>\n<li>普通切面(Pointcut)</li>\n<li>切点切面(PointcutAdvice)</li>\n<li>引介切面(IntroductionAdvisor)</li>\n</ol>\n<p><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/%E5%88%87%E9%9D%A2%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93.jpg\"></p>\n<h2 id=\"基于注解的-AOP-编程\"><a href=\"#基于注解的-AOP-编程\" class=\"headerlink\" title=\"基于注解的 AOP 编程\"></a>基于注解的 AOP 编程</h2><p><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/@AspectJ%E5%88%87%E7%82%B9%E5%87%BD%E6%95%B0.jpg\" alt=\"@AspectJ切点函数\"></p>\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在定义匹配表达式时，通配符几乎随处可见，如*、.. 、+ ，它们的含义如下：</p></blockquote>\n<ul>\n<li><p><code>..</code> 匹配方法定义中的任意数量的参数，此外还匹配类定义中的任意数量包</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//任意返回值，任意名称，任意参数的公共方法</span>\n<span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//匹配com.mjm.dao包及其子包中所有类中的所有方法</span>\n<span class=\"token function\">within</span><span class=\"token punctuation\">(</span>com<span class=\"token punctuation\">.</span>mjm<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>+</code> 匹配给定类的任意子类</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//匹配实现了DaoUser接口的所有子类的方法</span>\n<span class=\"token function\">within</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mjm<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span>DaoUser</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>*</code> 匹配任意数量字符</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//匹配com.mjm.service包及其子包中所有类的所有方法</span>\n<span class=\"token function\">within</span><span class=\"token punctuation\">(</span>com<span class=\"token punctuation\">.</span>mjm<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//匹配以set开头，参数为int类型，任意返回值的方法</span>\n<span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> set<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"类型签名表达式\"><a href=\"#类型签名表达式\" class=\"headerlink\" title=\"类型签名表达式\"></a>类型签名表达式</h3></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为了方便类型（如接口、类名、包名）过滤方法，Spring AOP 提供了within关键字。</p></blockquote>\n<p>语法格式如下： </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// type name 则使用包名或者类名替换</span>\n<span class=\"token function\">within</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>type name<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// example</span>\n<span class=\"token comment\">//匹配com.mjm.dao包及其子包中所有类中的所有方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(com.mjm.dao..*)\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配UserDaoImpl类中所有方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(com.mjm.dao.UserDaoImpl)\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配UserDaoImpl类及其子类中所有方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(com.mjm.dao.UserDaoImpl+)\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配所有实现UserDao接口的类的所有的方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(com.mjm.dao.UserDao+)\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"方法签名表达式\"><a href=\"#方法签名表达式\" class=\"headerlink\" title=\"方法签名表达式\"></a>方法签名表达式</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>对方发签名进行过滤， 对于给定的作用域、返回值类型、完全限定类名以及参数匹配的方法将会应用切点函数指定的通知 <code>execution</code></p></blockquote>\n<p>语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//scope ：方法作用域，如public,private,protect</span>\n<span class=\"token comment\">//returnt-type：方法返回值类型</span>\n<span class=\"token comment\">//fully-qualified-class-name：方法所在类的完全限定名称</span>\n<span class=\"token comment\">//parameters 方法参数</span>\n<span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">return</span><span class=\"token operator\">-</span>type<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>fully<span class=\"token operator\">-</span>qualified<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">-</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// example</span>\n<span class=\"token comment\">//匹配UserDaoImpl类中的所有方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.mjm.dao.UserDaoImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配UserDaoImpl类中的所有公共的方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public * com.mjm.dao.UserDaoImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配UserDaoImpl类中的所有公共方法并且返回值为int类型</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public int com.mjm.dao.UserDaoImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配UserDaoImpl类中第一个参数为int类型的所有公共的方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public * com.mjm.dao.UserDaoImpl.*(int , ..))\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"其他指示符\"><a href=\"#其他指示符\" class=\"headerlink\" title=\"其他指示符\"></a>其他指示符</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// target: 用于匹配当前目标对象类型的执行方法；</span>\n<span class=\"token comment\">//匹配了任意实现了UserDao接口的目标对象的方法进行过滤</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target(com.mjm.spring.springAop.dao.UserDao)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myPointcut3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// @within: 用于匹配所以持有指定注解类型内的方法；请注意与within是有区别的， within是用于匹配指定类型内的方法执行；</span>\n<span class=\"token comment\">//匹配使用了MarkerAnnotation注解的类(注意是类)</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@within(com.mjm.spring.annotation.MarkerAnnotation)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myPointcut4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// @annotation(com.mjm.spring.MarkerMethodAnnotation) : 根据所应用的注解进行方法过滤</span>\n<span class=\"token comment\">//匹配使用了MarkerAnnotation注解的方法(注意是方法)</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(com.mjm.spring.annotation.MarkerAnnotation)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myPointcut5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// this : 用于匹配当前AOP代理对象类型的执行方法；请注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配</span>\n<span class=\"token comment\">//匹配了任意实现了UserDao接口的代理对象的方法进行过滤</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this(com.mjm.spring.springAop.dao.UserDao)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myPointcut2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5种增强类型\"><a href=\"#5种增强类型\" class=\"headerlink\" title=\"5种增强类型\"></a>5种增强类型</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>含义ßß</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Before</td>\n<td>前置通知，在连接点方法前调用</td>\n</tr>\n<tr>\n<td>@Around</td>\n<td>环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法，后面会讲</td>\n</tr>\n<tr>\n<td>@After</td>\n<td>后置通知，在连接点方法后调用</td>\n</tr>\n<tr>\n<td>@AfterReturning</td>\n<td>返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常</td>\n</tr>\n<tr>\n<td>@AfterThrowing</td>\n<td>异常通知，当连接点方法异常时调用</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/javazejian/article/details/56267036\">关于 Spring AOP (AspectJ) 你该知晓的一切</a><br><a href=\"https://juejin.im/post/5b06bf2df265da0de2574ee1\">Spring AOP就是这么简单啦</a></p>\n","text":"springDOC 将重复性的逻辑代码横切出来其实很容易(我们简单可认为就是封装成一个类就好了)，但我们要将这些被我们横切出来的逻辑代码融合到业务逻辑中，来完成和之前(没抽取前)一样的功能！这就是AOP首要解决的问题了！这样一来，我们就在写业务时只关心业务代码，而不用关心与业务无...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"spring","slug":"spring","count":3,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":3,"path":"api/tags/spring.json"},{"name":"aop","slug":"aop","count":1,"path":"api/tags/aop.json"},{"name":"动态代理","slug":"动态代理","count":1,"path":"api/tags/动态代理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-Aop-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Spring Aop 原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AOP-%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">AOP 的实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AOP-%E6%9C%AF%E8%AF%AD\"><span class=\"toc-text\">AOP 术语</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%87%E9%9D%A2%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">切面类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84-AOP-%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">基于注解的 AOP 编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E9%85%8D%E7%AC%A6\"><span class=\"toc-text\">通配符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E7%AD%BE%E5%90%8D%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">类型签名表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%AD%BE%E5%90%8D%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">方法签名表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E6%8C%87%E7%A4%BA%E7%AC%A6\"><span class=\"toc-text\">其他指示符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E7%A7%8D%E5%A2%9E%E5%BC%BA%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">5种增强类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"mysql查询计划查看","uid":"d50659b13cff259d9728e80e6b8aee70","slug":"mysql查询计划查看","date":"2019-06-05T08:24:52.000Z","updated":"2022-03-03T15:50:13.675Z","comments":true,"path":"api/articles/mysql查询计划查看.json","keywords":null,"cover":[],"text":"MySql提供了EXPLAIN语法用来进行查询分析，在SQL语句前加一个”EXPLAIN”即可。比如我们要分析如下SQL语句： explain select * from table where table.id = 1 运行上面的sql语句后你会看到，下面的表头信息： idQu...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"mysql","slug":"mysql","count":3,"path":"api/categories/mysql.json"}],"tags":[{"name":"mysql","slug":"mysql","count":3,"path":"api/tags/mysql.json"},{"name":"查询计划","slug":"查询计划","count":1,"path":"api/tags/查询计划.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2019-04-28T10:07:13.000Z","updated":"2019-04-28T10:07:13.000Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":432,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}