{"title":"go build 实现包切换","uid":"d96ad83bba94948fc2ba2a5f3d6fbcb0","slug":"go-build-实现包切换","date":"2022-08-03T04:18:02.000Z","updated":"2022-09-03T07:45:16.171Z","comments":true,"path":"api/articles/go-build-实现包切换.json","keywords":null,"cover":null,"content":"<p>参考 <a href=\"https://github.com/gin-gonic/gin\">Gin</a> 的实现</p>\n<p>gin 在  <code>internal/json</code>包中实现了多个 json 包的序列化能力, 默认使用官方<code>encoding/json</code>包. 如何保证这些包不会冲突呢?</p>\n<p>这里用到了  <code>go build -tags</code> 的能力.</p>\n<p><code>[json.go](https://github.com/gin-gonic/gin/blob/master/internal/json/json.go)</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Copyright 2017 Bo-Yi Wu. All rights reserved.</span>\n<span class=\"token comment\">// Use of this source code is governed by a MIT style</span>\n<span class=\"token comment\">// license that can be found in the LICENSE file.</span>\n\n<span class=\"token comment\">//go:build !jsoniter &amp;&amp; !go_json &amp;&amp; !(sonic &amp;&amp; avx &amp;&amp; (linux || windows || darwin) &amp;&amp; amd64)</span>\n<span class=\"token comment\">// +build !jsoniter</span>\n<span class=\"token comment\">// +build !go_json</span>\n<span class=\"token comment\">// +build !sonic !avx !linux,!windows,!darwin !amd64</span>\n\n<span class=\"token keyword\">package</span> json\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"encoding/json\"</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">// Marshal is exported by gin/json package.</span>\n\tMarshal <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>Marshal\n\t<span class=\"token comment\">// Unmarshal is exported by gin/json package.</span>\n\tUnmarshal <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>Unmarshal\n\t<span class=\"token comment\">// MarshalIndent is exported by gin/json package.</span>\n\tMarshalIndent <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>MarshalIndent\n\t<span class=\"token comment\">// NewDecoder is exported by gin/json package.</span>\n\tNewDecoder <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>NewDecoder\n\t<span class=\"token comment\">// NewEncoder is exported by gin/json package.</span>\n\tNewEncoder <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>NewEncoder\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p><code>[jsoniter.go](https://github.com/gin-gonic/gin/blob/master/internal/json/jsoniter.go)</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Copyright 2017 Bo-Yi Wu. All rights reserved.</span>\n<span class=\"token comment\">// Use of this source code is governed by a MIT style</span>\n<span class=\"token comment\">// license that can be found in the LICENSE file.</span>\n\n<span class=\"token comment\">//go:build jsoniter</span>\n<span class=\"token comment\">// +build jsoniter</span>\n\n<span class=\"token keyword\">package</span> json\n\n<span class=\"token keyword\">import</span> jsoniter <span class=\"token string\">\"github.com/json-iterator/go\"</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tjson <span class=\"token operator\">=</span> jsoniter<span class=\"token punctuation\">.</span>ConfigCompatibleWithStandardLibrary\n\t<span class=\"token comment\">// Marshal is exported by gin/json package.</span>\n\tMarshal <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>Marshal\n\t<span class=\"token comment\">// Unmarshal is exported by gin/json package.</span>\n\tUnmarshal <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>Unmarshal\n\t<span class=\"token comment\">// MarshalIndent is exported by gin/json package.</span>\n\tMarshalIndent <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>MarshalIndent\n\t<span class=\"token comment\">// NewDecoder is exported by gin/json package.</span>\n\tNewDecoder <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>NewDecoder\n\t<span class=\"token comment\">// NewEncoder is exported by gin/json package.</span>\n\tNewEncoder <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>NewEncoder\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"切换-不同的-json实现\"><a href=\"#切换-不同的-json实现\" class=\"headerlink\" title=\"切换 不同的 json实现\"></a>切换 不同的 json实现</h2><p>采用  jsoniter包</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">go build -tags&#x3D;jsoniter .<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"条件编译\"><a href=\"#条件编译\" class=\"headerlink\" title=\"条件编译\"></a>条件编译</h2><p>通过在代码中增加注释<code>//+build xxx</code>时,编译时传递对应的tags值,就会编译不同的文件.</p>\n<ul>\n<li>构建约束以一行<code>+build</code>开始的注释.在+build之后列出了一些条件,在这些条件成立时,该文件应包含在编译的包中;</li>\n<li>约束可以出现在任何源文件中,不限于go文件;</li>\n<li><code>+build</code>必须出现在package语句之前,+build注释之后应要有一个空行.</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>-<a href=\"https://go.dev/doc/tutorial/compile-install\">Compile and install the application</a><br>-<a href=\"https://pkg.go.dev/cmd/go#hdr-Compile_packages_and_dependencies\">Compile_packages_and_dependencies</a><br>-<a href=\"https://zsy-cn.github.io/%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91.html\">Go条件编译</a></p>\n","text":"参考 Gin 的实现 gin 在 internal/json包中实现了多个 json 包的序列化能力, 默认使用官方encoding/json包. 如何保证这些包不会冲突呢? 这里用到了 go build -tags 的能力. [json.go](https://github.c...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"go","slug":"go","count":2,"path":"api/tags/go.json"},{"name":"go build","slug":"go-build","count":1,"path":"api/tags/go-build.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%87%E6%8D%A2-%E4%B8%8D%E5%90%8C%E7%9A%84-json%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">切换 不同的 json实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">条件编译</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"clickhouse-原理","uid":"7f644a5a0ef8dce45a5c7a8966cb4d95","slug":"clickhouse-原理","date":"2022-08-11T17:00:53.000Z","updated":"2022-09-08T05:05:51.621Z","comments":true,"path":"api/articles/clickhouse-原理.json","keywords":null,"cover":[],"text":" Clickhouse 是一个 用于联机分析(OLAP)的 列式存储数据库管理系统(DBMS). 常见的列式数据库有: Vertica、 Paraccel (Actian Matrix，Amazon Redshift)、 Sybase IQ、 Exasol、 Infobright...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"clickhouse","slug":"clickhouse","count":1,"path":"api/tags/clickhouse.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"洋葱架构","uid":"2797f253c04e63756fe2c781cd7fcc62","slug":"洋葱架构","date":"2022-07-23T06:23:04.000Z","updated":"2022-07-23T07:38:07.305Z","comments":true,"path":"api/articles/洋葱架构.json","keywords":null,"cover":[],"text":" 领域是一个知识范畴,他指的是我们的软件要模拟的业务知识。 领域驱动设计的核心是 领域模型,它对一个领域的流程和规则有着深刻的理解,洋葱架构实现了这一概念,并极大地改善了代码的品质,降低了复杂性,并且支持不断地发展企业系统. 详解”洋葱架构”Onion Architecture ...","link":"","photos":[],"count_time":{"symbolsCount":143,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"架构","slug":"架构","count":2,"path":"api/tags/架构.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}