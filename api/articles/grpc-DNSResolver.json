{"title":"grpc-DNSResolver","uid":"c648812ee90e87a774c05f7906322d9f","slug":"grpc-DNSResolver","date":"2022-06-21T02:58:26.000Z","updated":"2022-10-11T04:01:20.168Z","comments":true,"path":"api/articles/grpc-DNSResolver.json","keywords":null,"cover":null,"content":"<blockquote>\n</blockquote>\n<span id=\"more\"></span>\n\n\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p><code>resolver/resolver.go</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> resolver\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"net\"</span>\n\t<span class=\"token string\">\"net/url\"</span>\n\n\t<span class=\"token string\">\"google.golang.org/grpc/attributes\"</span>\n\t<span class=\"token string\">\"google.golang.org/grpc/credentials\"</span>\n\t<span class=\"token string\">\"google.golang.org/grpc/internal/pretty\"</span>\n\t<span class=\"token string\">\"google.golang.org/grpc/serviceconfig\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">// m is a map from scheme to resolver builder.</span>\n\tm <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Builder<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// defaultScheme is the default scheme to use.</span>\n\tdefaultScheme <span class=\"token operator\">=</span> <span class=\"token string\">\"passthrough\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// TODO(bar) install dns resolver in init()&#123;&#125;.</span>\n\n<span class=\"token comment\">// Register registers the resolver builder to the resolver map. b.Scheme will be</span>\n<span class=\"token comment\">// used as the scheme registered with this builder.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// NOTE: this function must only be called during initialization time (i.e. in</span>\n<span class=\"token comment\">// an init() function), and is not thread-safe. If multiple Resolvers are</span>\n<span class=\"token comment\">// registered with the same name, the one registered last will take effect.</span>\n<span class=\"token comment\">// 注册scheme -> ResolverBuilder 的映射关系. 可以注册自定义的  Resolver</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>b Builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tm<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">Scheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Get returns the resolver builder registered with the given scheme.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If no builder is register with the scheme, nil will be returned.</span>\n<span class=\"token comment\">// 根据 schema 获取 对应的 resolver 构建器</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>scheme <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Builder <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> b<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span>scheme<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> b\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// SetDefaultScheme sets the default scheme that will be used. The default</span>\n<span class=\"token comment\">// default scheme is \"passthrough\".</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// NOTE: this function must only be called during initialization time (i.e. in</span>\n<span class=\"token comment\">// an init() function), and is not thread-safe. The scheme set last overrides</span>\n<span class=\"token comment\">// previously set values.</span>\n<span class=\"token comment\">// 设置默认的  schema,grpc 默认的构建器 是  passthrough</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SetDefaultScheme</span><span class=\"token punctuation\">(</span>scheme <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tdefaultScheme <span class=\"token operator\">=</span> scheme\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// GetDefaultScheme gets the default scheme that will be used.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetDefaultScheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> defaultScheme\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// AddressType indicates the address type returned by name resolution.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Deprecated: use Attributes in Address instead.</span>\n<span class=\"token keyword\">type</span> AddressType <span class=\"token builtin\">uint8</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">// Backend indicates the address is for a backend server.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: use Attributes in Address instead.</span>\n\tBackend AddressType <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n\t<span class=\"token comment\">// GRPCLB indicates the address is for a grpclb load balancer.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: to select the GRPCLB load balancing policy, use a service</span>\n\t<span class=\"token comment\">// config with a corresponding loadBalancingConfig.  To supply balancer</span>\n\t<span class=\"token comment\">// addresses to the GRPCLB load balancing policy, set State.Attributes</span>\n\t<span class=\"token comment\">// using balancer/grpclb/state.Set.</span>\n\tGRPCLB\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Address represents a server the client connects to.</span>\n<span class=\"token comment\">// 表示客户端需要访问的服务器地址</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Experimental</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Notice: This type is EXPERIMENTAL and may be changed or removed in a</span>\n<span class=\"token comment\">// later release.</span>\n<span class=\"token keyword\">type</span> Address <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Addr is the server address on which a connection will be established.</span>\n    <span class=\"token comment\">// 用于构建  connection 的服务器地址</span>\n\tAddr <span class=\"token builtin\">string</span>\n\n\t<span class=\"token comment\">// ServerName is the name of this address.</span>\n\t<span class=\"token comment\">// If non-empty, the ServerName is used as the transport certification authority for</span>\n\t<span class=\"token comment\">// the address, instead of the hostname from the Dial target string. In most cases,</span>\n\t<span class=\"token comment\">// this should not be set.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// If Type is GRPCLB, ServerName should be the name of the remote load</span>\n\t<span class=\"token comment\">// balancer, not the name of the backend.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// WARNING: ServerName must only be populated with trusted values. It</span>\n\t<span class=\"token comment\">// is insecure to populate it with data from untrusted inputs since untrusted</span>\n\t<span class=\"token comment\">// values could be used to bypass the authority checks performed by TLS.</span>\n\tServerName <span class=\"token builtin\">string</span>\n\n\t<span class=\"token comment\">// Attributes contains arbitrary data about this address intended for</span>\n\t<span class=\"token comment\">// consumption by the SubConn.</span>\n\tAttributes <span class=\"token operator\">*</span>attributes<span class=\"token punctuation\">.</span>Attributes\n\n\t<span class=\"token comment\">// BalancerAttributes contains arbitrary data about this address intended</span>\n\t<span class=\"token comment\">// for consumption by the LB policy.  These attribes do not affect SubConn</span>\n\t<span class=\"token comment\">// creation, connection establishment, handshaking, etc.</span>\n\tBalancerAttributes <span class=\"token operator\">*</span>attributes<span class=\"token punctuation\">.</span>Attributes\n\n\t<span class=\"token comment\">// Type is the type of this address.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: use Attributes instead.</span>\n\tType AddressType\n\n\t<span class=\"token comment\">// Metadata is the information associated with Addr, which may be used</span>\n\t<span class=\"token comment\">// to make load balancing decision.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: use Attributes instead.</span>\n\tMetadata <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Equal returns whether a and o are identical.  Metadata is compared directly,</span>\n<span class=\"token comment\">// not with any recursive introspection.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a Address<span class=\"token punctuation\">)</span> <span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>o Address<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>Addr <span class=\"token operator\">==</span> o<span class=\"token punctuation\">.</span>Addr <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>ServerName <span class=\"token operator\">==</span> o<span class=\"token punctuation\">.</span>ServerName <span class=\"token operator\">&amp;&amp;</span>\n\t\ta<span class=\"token punctuation\">.</span>Attributes<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>Attributes<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\ta<span class=\"token punctuation\">.</span>BalancerAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>BalancerAttributes<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\ta<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">==</span> o<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>Metadata <span class=\"token operator\">==</span> o<span class=\"token punctuation\">.</span>Metadata\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// String returns JSON formatted string representation of the address.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a Address<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> pretty<span class=\"token punctuation\">.</span><span class=\"token function\">ToJSON</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// BuildOptions includes additional information for the builder to create</span>\n<span class=\"token comment\">// the resolver.</span>\n<span class=\"token keyword\">type</span> BuildOptions <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// DisableServiceConfig indicates whether a resolver implementation should</span>\n\t<span class=\"token comment\">// fetch service config data.</span>\n\tDisableServiceConfig <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// DialCreds is the transport credentials used by the ClientConn for</span>\n\t<span class=\"token comment\">// communicating with the target gRPC service (set via</span>\n\t<span class=\"token comment\">// WithTransportCredentials). In cases where a name resolution service</span>\n\t<span class=\"token comment\">// requires the same credentials, the resolver may use this field. In most</span>\n\t<span class=\"token comment\">// cases though, it is not appropriate, and this field may be ignored.</span>\n\tDialCreds credentials<span class=\"token punctuation\">.</span>TransportCredentials\n\t<span class=\"token comment\">// CredsBundle is the credentials bundle used by the ClientConn for</span>\n\t<span class=\"token comment\">// communicating with the target gRPC service (set via</span>\n\t<span class=\"token comment\">// WithCredentialsBundle). In cases where a name resolution service</span>\n\t<span class=\"token comment\">// requires the same credentials, the resolver may use this field. In most</span>\n\t<span class=\"token comment\">// cases though, it is not appropriate, and this field may be ignored.</span>\n\tCredsBundle credentials<span class=\"token punctuation\">.</span>Bundle\n\t<span class=\"token comment\">// Dialer is the custom dialer used by the ClientConn for dialling the</span>\n\t<span class=\"token comment\">// target gRPC service (set via WithDialer). In cases where a name</span>\n\t<span class=\"token comment\">// resolution service requires the same dialer, the resolver may use this</span>\n\t<span class=\"token comment\">// field. In most cases though, it is not appropriate, and this field may</span>\n\t<span class=\"token comment\">// be ignored.</span>\n\tDialer <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// State contains the current Resolver state relevant to the ClientConn.</span>\n<span class=\"token keyword\">type</span> State <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Addresses is the latest set of resolved addresses for the target.</span>\n\tAddresses <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Address\n\n\t<span class=\"token comment\">// ServiceConfig contains the result from parsing the latest service</span>\n\t<span class=\"token comment\">// config.  If it is nil, it indicates no service config is present or the</span>\n\t<span class=\"token comment\">// resolver does not provide service configs.</span>\n\tServiceConfig <span class=\"token operator\">*</span>serviceconfig<span class=\"token punctuation\">.</span>ParseResult\n\n\t<span class=\"token comment\">// Attributes contains arbitrary data about the resolver intended for</span>\n\t<span class=\"token comment\">// consumption by the load balancing policy.</span>\n\tAttributes <span class=\"token operator\">*</span>attributes<span class=\"token punctuation\">.</span>Attributes\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ClientConn contains the callbacks for resolver to notify any updates</span>\n<span class=\"token comment\">// to the gRPC ClientConn.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This interface is to be implemented by gRPC. Users should not need a</span>\n<span class=\"token comment\">// brand new implementation of this interface. For the situations like</span>\n<span class=\"token comment\">// testing, the new implementation should embed this interface. This allows</span>\n<span class=\"token comment\">// gRPC to add new methods to this interface.</span>\n<span class=\"token keyword\">type</span> ClientConn <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// UpdateState updates the state of the ClientConn appropriately.</span>\n\t<span class=\"token function\">UpdateState</span><span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\t<span class=\"token comment\">// ReportError notifies the ClientConn that the Resolver encountered an</span>\n\t<span class=\"token comment\">// error.  The ClientConn will notify the load balancer and begin calling</span>\n\t<span class=\"token comment\">// ResolveNow on the Resolver with exponential backoff.</span>\n\t<span class=\"token function\">ReportError</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// NewAddress is called by resolver to notify ClientConn a new list</span>\n\t<span class=\"token comment\">// of resolved addresses.</span>\n\t<span class=\"token comment\">// The address list should be the complete list of resolved addresses.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: Use UpdateState instead.</span>\n\t<span class=\"token function\">NewAddress</span><span class=\"token punctuation\">(</span>addresses <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Address<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// NewServiceConfig is called by resolver to notify ClientConn a new</span>\n\t<span class=\"token comment\">// service config. The service config should be provided as a json string.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: Use UpdateState instead.</span>\n\t<span class=\"token function\">NewServiceConfig</span><span class=\"token punctuation\">(</span>serviceConfig <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// ParseServiceConfig parses the provided service config and returns an</span>\n\t<span class=\"token comment\">// object that provides the parsed config.</span>\n\t<span class=\"token function\">ParseServiceConfig</span><span class=\"token punctuation\">(</span>serviceConfigJSON <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>serviceconfig<span class=\"token punctuation\">.</span>ParseResult\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Target represents a target for gRPC, as specified in:</span>\n<span class=\"token comment\">// https://github.com/grpc/grpc/blob/master/doc/naming.md.</span>\n<span class=\"token comment\">// It is parsed from the target string that gets passed into Dial or DialContext</span>\n<span class=\"token comment\">// by the user. And gRPC passes it to the resolver and the balancer.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If the target follows the naming spec, and the parsed scheme is registered</span>\n<span class=\"token comment\">// with gRPC, we will parse the target string according to the spec. If the</span>\n<span class=\"token comment\">// target does not contain a scheme or if the parsed scheme is not registered</span>\n<span class=\"token comment\">// (i.e. no corresponding resolver available to resolve the endpoint), we will</span>\n<span class=\"token comment\">// apply the default scheme, and will attempt to reparse it.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Examples:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// - \"dns://some_authority/foo.bar\"</span>\n<span class=\"token comment\">//   Target&#123;Scheme: \"dns\", Authority: \"some_authority\", Endpoint: \"foo.bar\"&#125;</span>\n<span class=\"token comment\">// - \"foo.bar\"</span>\n<span class=\"token comment\">//   Target&#123;Scheme: resolver.GetDefaultScheme(), Endpoint: \"foo.bar\"&#125;</span>\n<span class=\"token comment\">// - \"unknown_scheme://authority/endpoint\"</span>\n<span class=\"token comment\">//   Target&#123;Scheme: resolver.GetDefaultScheme(), Endpoint: \"unknown_scheme://authority/endpoint\"&#125;</span>\n<span class=\"token keyword\">type</span> Target <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Deprecated: use URL.Scheme instead.</span>\n\tScheme <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// Deprecated: use URL.Host instead.</span>\n\tAuthority <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// Deprecated: use URL.Path or URL.Opaque instead. The latter is set when</span>\n\t<span class=\"token comment\">// the former is empty.</span>\n\tEndpoint <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// URL contains the parsed dial target with an optional default scheme added</span>\n\t<span class=\"token comment\">// to it if the original dial target contained no scheme or contained an</span>\n\t<span class=\"token comment\">// unregistered scheme. Any query params specified in the original dial</span>\n\t<span class=\"token comment\">// target can be accessed from here.</span>\n\tURL url<span class=\"token punctuation\">.</span>URL\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Builder creates a resolver that will be used to watch name resolution updates.</span>\n<span class=\"token comment\">// 自定义一个 resolver 必须实现这个接口</span>\n<span class=\"token keyword\">type</span> Builder <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Build creates a new resolver for the given target.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// gRPC dial calls Build synchronously, and fails if the returned error is</span>\n\t<span class=\"token comment\">// not nil.</span>\n\t<span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>target Target<span class=\"token punctuation\">,</span> cc ClientConn<span class=\"token punctuation\">,</span> opts BuildOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Resolver<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Scheme returns the scheme supported by this resolver.</span>\n\t<span class=\"token comment\">// Scheme is defined at https://github.com/grpc/grpc/blob/master/doc/naming.md.</span>\n    <span class=\"token comment\">// 指定构建的是那种 Scheme 类型的解析器，就是客户端调用的 scheme 名字</span>\n\t<span class=\"token function\">Scheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ResolveNowOptions includes additional information for ResolveNow.</span>\n<span class=\"token comment\">// execute ResolveNow 的 一些附属信息</span>\n<span class=\"token keyword\">type</span> ResolveNowOptions <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Resolver watches for the updates on the specified target.</span>\n<span class=\"token comment\">// Updates include address updates and service config updates.</span>\n<span class=\"token comment\">// 要实现自定义的解析器,必须实现 Resolver 接口(解析器监听target 上的更新, 更新内容包括 已resolved的 地址列表 和 服务配置)</span>\n<span class=\"token keyword\">type</span> Resolver <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// ResolveNow will be called by gRPC to try to resolve the target name</span>\n\t<span class=\"token comment\">// again. It's just a hint, resolver can ignore this if it's not necessary.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// It could be called multiple times concurrently.</span>\n\t<span class=\"token function\">ResolveNow</span><span class=\"token punctuation\">(</span>ResolveNowOptions<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 通过channel的方式 唤醒select ，立即解析</span>\n\t<span class=\"token comment\">// Close closes the resolver.</span>\n\t<span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// UnregisterForTesting removes the resolver builder with the given scheme from the</span>\n<span class=\"token comment\">// resolver map.</span>\n<span class=\"token comment\">// This function is for testing only.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">UnregisterForTesting</span><span class=\"token punctuation\">(</span>scheme <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> scheme<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":" Coderesolver/resolver.go package resolver import ( \"context\" \"net\" \"net/url\" \"google.golang.org/grpc/attributes\" \"google.golang.org/grpc/cr...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"DNSResolver","slug":"DNSResolver","count":1,"path":"api/tags/DNSResolver.json"},{"name":"grpc","slug":"grpc","count":1,"path":"api/tags/grpc.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code\"><span class=\"toc-text\">Code</span></a></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"算法-线段树","uid":"f618fdcc06390449a60431b1cd6a19c6","slug":"算法-线段树","date":"2022-06-25T02:07:37.000Z","updated":"2022-10-11T04:01:22.019Z","comments":true,"path":"api/articles/算法-线段树.json","keywords":null,"cover":[],"text":"线段树是经常用来维护区间信息的数据结构,线段树可以在 O(logN) 的时间复杂度内实现单点修改,区间修改,区间查询(区间求和,区间最大值,区间最小值) 等操作. 线段树的数据结构 线段树是一种近似的完全二叉树,每个节点代表一个区间,节点的权值. 根节点是整个区间.每个节点的左孩...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"algorithm","slug":"algorithm","count":1,"path":"api/tags/algorithm.json"},{"name":"线段树","slug":"线段树","count":1,"path":"api/tags/线段树.json"},{"name":"区间","slug":"区间","count":1,"path":"api/tags/区间.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"docker-compose etcd","uid":"2c7dd58c559020b938dd674699ae2dad","slug":"docker-compose-etcd","date":"2022-06-20T08:53:05.000Z","updated":"2022-06-20T09:00:41.662Z","comments":true,"path":"api/articles/docker-compose-etcd.json","keywords":null,"cover":[],"text":"codedocker-compose.yml version: &#39;3&#39; networks: etcd-net: driver: bridge # 网桥模式 volumes: etcd1_data: # 挂在到 本地数据卷 名 driver: local etcd2...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"docker","slug":"docker","count":2,"path":"api/tags/docker.json"},{"name":"docker-compose","slug":"docker-compose","count":1,"path":"api/tags/docker-compose.json"},{"name":"etcd","slug":"etcd","count":1,"path":"api/tags/etcd.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}