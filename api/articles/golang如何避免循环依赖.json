{"title":"golang如何避免循环依赖","uid":"993a22b9aed98844bcb1901957913e2a","slug":"golang如何避免循环依赖","date":"2022-11-18T13:12:04.000Z","updated":"2022-11-18T13:18:17.634Z","comments":true,"path":"api/articles/golang如何避免循环依赖.json","keywords":null,"cover":[],"content":"<p>golang 包引用之间不允许循环依赖.<br>循环依赖的本质上是一个错误的设计, 在 golang中 循环依赖是 会产生编译时错误.</p>\n<p><img src=\"/post/golang%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/dependency-cycle.png\" alt=\"dependency-cycle\"></p>\n<p>golang中为什么不允许循环依赖呢?</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. 没有支持循环导入,目的是迫使 Go 程序员更多地考虑程序的依赖关系.\n  - 保持依赖关系图的简洁。\n  - 快速的程序构建。\n2. 如果支持循环导入，很容易会造成懒惰、不良的依赖性管理和缓慢的构建。这是设计者不希望看见的。\n  - 混乱的依赖关系。\n  - 缓慢的程序构建<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>golang中的循环依赖对编译的性能 和  程序的依赖关系的清晰非常不利, 所以在程序设计上,要保持 干净的 <code>DAG</code>.</p>\n<h2 id=\"常见的循环依赖-和-优化代码技巧\"><a href=\"#常见的循环依赖-和-优化代码技巧\" class=\"headerlink\" title=\"常见的循环依赖  和 优化代码技巧\"></a>常见的循环依赖  和 优化代码技巧</h2><h3 id=\"1-抽象顶层包\"><a href=\"#1-抽象顶层包\" class=\"headerlink\" title=\"1. 抽象顶层包\"></a>1. 抽象顶层包</h3><p>ddd 的项目结构 一般是  依赖倒置,  在 service层定义接口,   infrastrue 层实现,目的是为了解耦， 实现可替换.</p>\n<p>你可能将代码写成这样: </p>\n<p>repo包代码如下:</p>\n<p>repo包依赖 service包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> repo\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/service\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> channelRepo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewChannelRepo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>channelRepo <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>channelRepo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c channelRepo<span class=\"token punctuation\">)</span> <span class=\"token function\">GetByID</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>service<span class=\"token punctuation\">.</span>Channel<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>service 包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> service\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/repo\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Channel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tID <span class=\"token builtin\">int64</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> ChannelRepo <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">GetByID</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Channel<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> ChannelService <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tchannelRepo ChannelRepo\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewChannelService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ChannelService <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>ChannelService<span class=\"token punctuation\">&#123;</span>\n\t\tchannelRepo<span class=\"token punctuation\">:</span> repo<span class=\"token punctuation\">.</span><span class=\"token function\">NewChannelRepo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cs <span class=\"token operator\">*</span>ChannelService<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/golang%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/cycle1.png\"></p>\n<p>解决方式之一是我们可以引入一个顶层包 handler, 依赖  service &amp; repo:</p>\n<p>形成如下依赖关系:</p>\n<p><img src=\"/post/golang%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/cycle-resolve1.png\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> repo\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/service\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> channelRepo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewChannelRepo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>channelRepo <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>channelRepo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c channelRepo<span class=\"token punctuation\">)</span> <span class=\"token function\">GetByID</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>service<span class=\"token punctuation\">.</span>Channel<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>service包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> service\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Channel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tID <span class=\"token builtin\">int64</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> ChannelRepo <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">GetByID</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Channel<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> ChannelService <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tchannelRepo ChannelRepo\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewChannelService</span><span class=\"token punctuation\">(</span>channelRepo ChannelRepo<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ChannelService <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>ChannelService<span class=\"token punctuation\">&#123;</span>\n\t\tchannelRepo<span class=\"token punctuation\">:</span> channelRepo<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cs <span class=\"token operator\">*</span>ChannelService<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>handler包代码如下:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> handler\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/repo\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/service\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">useCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tchannelRepo <span class=\"token operator\">:=</span> repo<span class=\"token punctuation\">.</span><span class=\"token function\">NewChannelRepo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tchannelService <span class=\"token operator\">:=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">NewChannelService</span><span class=\"token punctuation\">(</span>channelRepo<span class=\"token punctuation\">)</span>\n\tchannelService<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-和上面的场景类似-也是抽象一个顶层解决\"><a href=\"#2-和上面的场景类似-也是抽象一个顶层解决\" class=\"headerlink\" title=\"2. 和上面的场景类似, 也是抽象一个顶层解决\"></a>2. 和上面的场景类似, 也是抽象一个顶层解决</h3><p>比如我们没用争取使用策略模式的分包.</p>\n<p>有下面这种场景,做 一些数据过滤, 在  filter 包里面定义了filter 接口, 将实现定义在子包里面.</p>\n<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">type Filter interface &#123;\n\tPreAction(ctx context.Context, data map[string]interface&#123;&#125;) error\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-子包-word\"><a href=\"#1-子包-word\" class=\"headerlink\" title=\"1. 子包  word\"></a>1. 子包  word</h4><p>word包引用了  filter包的  对象 <code>DataContext</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> word\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> wordFilter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>w wordFilter<span class=\"token punctuation\">)</span> <span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>cycle<span class=\"token punctuation\">.</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"implement me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewWordFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>wordFilter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>wordFilter<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-子包-policy\"><a href=\"#2-子包-policy\" class=\"headerlink\" title=\"2. 子包 policy\"></a>2. 子包 policy</h4><p>word包引用了  filter包的  对象 <code>DataContext</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> policy\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> policyFilter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewPolicyFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>policyFilter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>policyFilter<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p policyFilter<span class=\"token punctuation\">)</span> <span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>cycle<span class=\"token punctuation\">.</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"implement me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-在filter包中使用\"><a href=\"#3-在filter包中使用\" class=\"headerlink\" title=\"3. 在filter包中使用\"></a>3. <strong>在filter包中使用</strong></h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> filter\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/policy\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/word\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> filterRegistry <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Filter\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilterRegistry <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Filter<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token string\">\"word\"</span><span class=\"token punctuation\">:</span>   word<span class=\"token punctuation\">.</span><span class=\"token function\">NewWordFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"policy\"</span><span class=\"token punctuation\">:</span> policy<span class=\"token punctuation\">.</span><span class=\"token function\">NewPolicyFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> DataContext <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Filter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetFilter</span><span class=\"token punctuation\">(</span>filterType <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Filter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> filterRegistry<span class=\"token punctuation\">[</span>filterType<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">|filter\n├── filter.go\n├── policy\n│   └── filter.go\n└── word\n    └── filter.go\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>此时产生了循环依赖.</p>\n<h4 id=\"解决的方式-其实应该属于编程技巧\"><a href=\"#解决的方式-其实应该属于编程技巧\" class=\"headerlink\" title=\"解决的方式:  其实应该属于编程技巧:\"></a>解决的方式:  其实应该属于编程技巧:</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不要再 filter包中有使用 filter 的逻辑, <strong>filer包仅定义接口</strong>, 在 filter包之外进行调用</p></blockquote>\n<p>修改后的方案: </p>\n<ul>\n<li><p>filter包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> filter\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilterRegistry <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Filter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> filterRegistry <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Filter\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>filterKey <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> filter Filter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilterRegistry<span class=\"token punctuation\">[</span>filterKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> filter\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> DataContext <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Filter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetFilter</span><span class=\"token punctuation\">(</span>filterType <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Filter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> filterRegistry<span class=\"token punctuation\">[</span>filterType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>word子包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> word\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/filter\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilter<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NewWordFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> wordFilter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>w wordFilter<span class=\"token punctuation\">)</span> <span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>filter<span class=\"token punctuation\">.</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//TODO implement me</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"implement me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewWordFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>wordFilter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>wordFilter<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>policy子包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> policy\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/filter\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilter<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"policy\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NewPolicyFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> policyFilter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewPolicyFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>policyFilter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>policyFilter<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p policyFilter<span class=\"token punctuation\">)</span> <span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>filter<span class=\"token punctuation\">.</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//TODO implement me</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"implement me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>添加上层调用:</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> cycle\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/filter\"</span>\n\t<span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/xxx/cycle/filter/policy\"</span>\n\t<span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/xxx/cycle/filter/word\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilter<span class=\"token punctuation\">.</span><span class=\"token function\">GetFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word\"</span><span class=\"token punctuation\">)</span>\n\tfilter<span class=\"token punctuation\">.</span><span class=\"token function\">GetFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"policy\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h3 id=\"3-使用事件总线解耦\"><a href=\"#3-使用事件总线解耦\" class=\"headerlink\" title=\"3. 使用事件总线解耦\"></a>3. 使用事件总线解耦</h3><p>想分享的是上面两种方案， 之后又在网上看到了某些方案:<br> 比如事件总线，简单说就是: 使用时如果不关心返回结果, 就可以通过消息的方式解耦.</p>\n<ol>\n<li><p>eventBus 包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> eventBus\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"github.com/asaskevich/EventBus\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">var</span> globalEventBus EventBus<span class=\"token punctuation\">.</span>Bus\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tglobalEventBus <span class=\"token operator\">=</span> EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fn <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> globalEventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">SubscribeAsync</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fn <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> transactional <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> globalEventBus<span class=\"token punctuation\">.</span><span class=\"token function\">SubscribeAsync</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> transactional<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tglobalEventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>packageA</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> package_a\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"cycle/eventBus\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\teventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PrintA\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>PackageA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>PrintA<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">type</span> PackageA <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a PackageA<span class=\"token punctuation\">)</span> <span class=\"token function\">PrintA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a PackageA<span class=\"token punctuation\">)</span> <span class=\"token function\">PrintAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ta<span class=\"token punctuation\">.</span><span class=\"token function\">PrintA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\teventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PrintB\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>packageB</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> package_b\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"cycle/eventBus\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\teventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PrintB\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>PackageB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>PrintB<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">type</span> PackageB <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b PackageB<span class=\"token punctuation\">)</span> <span class=\"token function\">PrintB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm b!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b PackageB<span class=\"token punctuation\">)</span> <span class=\"token function\">PrintAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">PrintB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\teventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PrintA\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>编写代码要符合规范，包的组织结构 和 依赖 要清晰, 符合规范.<br>golang的包组织规范可以参考:  </p>\n<ul>\n<li><a href=\"https://github.com/golang-standards\">golang-standards</a></li>\n<li><a href=\"https://github.com/go-kratos/kratos-layout\">kratos-layout</a></li>\n<li></li>\n</ul>\n<hr>\n<p>[参考]<br><a href=\"https://golang3.eddycjy.com/posts/cyclic-import/\">循环引用</a><br><a href=\"https://libuba.com/2020/11/02/golang%E5%8C%85%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/\">golang包循环引用的几种解决方案</a></p>\n","feature":true,"text":"golang 包引用之间不允许循环依赖.循环依赖的本质上是一个错误的设计, 在 golang中 循环依赖是 会产生编译时错误. golang中为什么不允许循环依赖呢? 1. 没有支持循环导入,目的是迫使 Go 程序员更多地考虑程序的依赖关系. - 保持依赖关系图的简洁。 - 快速...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96-%E5%92%8C-%E4%BC%98%E5%8C%96%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">常见的循环依赖  和 优化代码技巧</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%8A%BD%E8%B1%A1%E9%A1%B6%E5%B1%82%E5%8C%85\"><span class=\"toc-text\">1. 抽象顶层包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%92%8C%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%9C%BA%E6%99%AF%E7%B1%BB%E4%BC%BC-%E4%B9%9F%E6%98%AF%E6%8A%BD%E8%B1%A1%E4%B8%80%E4%B8%AA%E9%A1%B6%E5%B1%82%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">2. 和上面的场景类似, 也是抽象一个顶层解决</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AD%90%E5%8C%85-word\"><span class=\"toc-text\">1. 子包  word</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%AD%90%E5%8C%85-policy\"><span class=\"toc-text\">2. 子包 policy</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%9C%A8filter%E5%8C%85%E4%B8%AD%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3. 在filter包中使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%9A%84%E6%96%B9%E5%BC%8F-%E5%85%B6%E5%AE%9E%E5%BA%94%E8%AF%A5%E5%B1%9E%E4%BA%8E%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">解决的方式:  其实应该属于编程技巧:</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF%E8%A7%A3%E8%80%A6\"><span class=\"toc-text\">3. 使用事件总线解耦</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"大数据-数据仓库大宽表","uid":"7b7fae18844a9a83dfd9701a806d24e8","slug":"大数据-数据仓库大宽表","date":"2023-03-01T13:17:02.000Z","updated":"2023-03-01T15:59:43.086Z","comments":true,"path":"api/articles/大数据-数据仓库大宽表.json","keywords":null,"cover":null,"text":"什么是大宽表, 为什么要使用大宽表, 大宽表有什么优缺点, 设计大宽表要注意什么? 参考一起聊聊数仓大宽表 ","link":"","photos":[],"count_time":{"symbolsCount":62,"symbolsTime":"1 mins."},"categories":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/categories/bigdata.json"}],"tags":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/tags/bigdata.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Go-Test-Gomonkey使用","uid":"03cc55fb6473717cac5c2d4cd07b1cc0","slug":"Go-Test-Gomonkey使用","date":"2022-11-14T11:54:08.000Z","updated":"2022-11-14T11:54:08.621Z","comments":true,"path":"api/articles/Go-Test-Gomonkey使用.json","keywords":null,"cover":null,"text":"golang的单测, 有一些约定, 例如文件名是 xxx.go, 测试文件名必须是 xxx_test.go, 且测试函数的方法名 都是以 Test开头, 使用go test 命令, 有时发现mock不住,一般都是内联(简短)函数mock失败,可以执行的时候加上编译条件禁止内联 -...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"gomonkey","slug":"gomonkey","count":1,"path":"api/tags/gomonkey.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}