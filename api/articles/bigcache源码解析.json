{"title":"bigcache源码解析","uid":"411297e7dedff7a6e68a4f8255b55a82","slug":"bigcache源码解析","date":"2022-10-10T15:58:44.000Z","updated":"2022-10-10T17:02:41.761Z","comments":true,"path":"api/articles/bigcache源码解析.json","keywords":null,"cover":[],"content":"<p>[TOC]</p>\n<h2 id=\"Bigcache-的特点\"><a href=\"#Bigcache-的特点\" class=\"headerlink\" title=\"Bigcache 的特点:\"></a>Bigcache 的特点:</h2><p>并发支持,快速, 过期大量条目而不影响性能.<br>bigcache将 缓存条目放在了堆上,节省了GC. 为了实现这一点. 需要对字节切片进行操作. 因此涉及到缓存条目的序列化与反序列化.</p>\n<p><a href=\"https://github.com/allegro/bigcache-bench\">bigcache, freecache 和 map 的基准测试</a></p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"内存使用情况\"><a href=\"#内存使用情况\" class=\"headerlink\" title=\"内存使用情况\"></a>内存使用情况</h2><p>可能会遇到,系统内存指数增长. 属于预期内行为. Go 运行时 以 跨度(span)为单位分配内存,并在不需要他们是将状态修改为 <code>free</code> 来通知操作系统.在操作系统需要重新调整地址用途之前. 跨度将保留为进程资源的一部分.</p>\n<h2 id=\"怎么做到的高性能\"><a href=\"#怎么做到的高性能\" class=\"headerlink\" title=\"怎么做到的高性能?\"></a>怎么做到的高性能?</h2><p>BigCache依赖于 go1.5中做出的优化.<a href=\"https://github.com/golang/go/issues/9477\">issue9477</a>: <code>对于key value 中没有指针的map,GC将忽略其内容.</code>因此 bigCache 中使用 <code>map[uint64]uint32</code>, key 为 hash(key). value 是 item的 偏移量.</p>\n<p>item 保存在字节切片中,目的是为了 再次忽略  GC. 字节切片大小可以增长到 MB 而不影响性能, 因为 GC只能看到指向他们的 单个 指针. </p>\n<h2 id=\"如何解决-hash-冲突-Hash-Collisions\"><a href=\"#如何解决-hash-冲突-Hash-Collisions\" class=\"headerlink\" title=\"如何解决 hash 冲突(Hash Collisions)?\"></a>如何解决 hash 冲突(Hash Collisions)?</h2><p>Bigcache 不解决 hash 冲突. 当一个新的item 与老 item  hash(key)相同. 新 item 会覆盖老item.</p>\n<h2 id=\"Bigcache-Vs-freecche\"><a href=\"#Bigcache-Vs-freecche\" class=\"headerlink\" title=\"Bigcache Vs freecche\"></a>Bigcache Vs freecche</h2><p>两种缓存都提供了相同的功能. 但是他们是以不同的方式 减少 GC开销. bigCache 一依赖 <code>map[uint64]uint32</code>, freecache 实现了自己的基于切片的映射 来减少指针数量.</p>\n<p><code>Bigcache</code> 相对于  <code>freecache</code> 的优势之一是: 不需要提前知道  缓存大小,因为 <code>Bigcache</code> 已满时,可以为新item 重新分配额外的内存. 而不是像 <code>freecache</code> 那样覆盖现有的.但是 <code>Bigcache</code> 也提供了参数 <code>HardMaxCacheSize</code> 设置缓存最大大小.</p>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"1-一些概念\"><a href=\"#1-一些概念\" class=\"headerlink\" title=\"1. 一些概念\"></a>1. 一些概念</h3><h4 id=\"1-shard\"><a href=\"#1-shard\" class=\"headerlink\" title=\"1. shard\"></a>1. shard</h4><p>分片,  用于 减少锁粒度 ,增加并发度.  cache 默认 有 1024 个分片. (需要时  2^n,  快速进行 hash计算)<br>shards 初始化以后是 不可以扩容的.</p>\n<h4 id=\"2-CleanWindow\"><a href=\"#2-CleanWindow\" class=\"headerlink\" title=\"2. CleanWindow\"></a>2. CleanWindow</h4><p>删除过期entry 的  时间间隔(interval).<br>默认配置为 1s. 如果设置为  &lt; 1s, 可能会适得其反.</p>\n<h4 id=\"3-lifeWindow\"><a href=\"#3-lifeWindow\" class=\"headerlink\" title=\"3. lifeWindow\"></a>3. lifeWindow</h4><p>entry 的过期时间. </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>bigcache 的一个feature: 不支持为 特定的entry 单独设置  过期时间. </p></blockquote>\n<h3 id=\"2-数据结构\"><a href=\"#2-数据结构\" class=\"headerlink\" title=\"2. 数据结构\"></a>2. 数据结构</h3><p><img src=\"/post/bigcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/bigcache%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\"></p>\n<h4 id=\"1-cache\"><a href=\"#1-cache\" class=\"headerlink\" title=\"1. cache\"></a>1. cache</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// BigCache is fast, concurrent, evicting cache created to keep big number of entries without impact on performance.</span>\n<span class=\"token comment\">// It keeps entries on heap but omits GC for them. To achieve that, operations take place on byte arrays,</span>\n<span class=\"token comment\">// therefore entries (de)serialization in front of the cache will be needed in most use cases.</span>\n<span class=\"token keyword\">type</span> BigCache <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tshards     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cacheShard <span class=\"token comment\">// shard分片 减小锁粒度,长度为 2^N</span>\n\tlifeWindow <span class=\"token builtin\">uint64</span>\n\tclock      clock <span class=\"token comment\">// 时钟,计算过期时间 会用到</span>\n\thash       Hasher <span class=\"token comment\">// hash 算法 分 shard</span>\n\tconfig     Config\n\tshardMask  <span class=\"token builtin\">uint64</span> <span class=\"token comment\">// 2^N-1</span>\n\t<span class=\"token builtin\">close</span>      <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-shard\"><a href=\"#2-shard\" class=\"headerlink\" title=\"2. shard\"></a>2. shard</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">type</span> cacheShard <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\thashmap     <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint32</span> <span class=\"token comment\">//存储索引 key: hashKey  value: value存入  byteQueue的 offset</span>\n\tentries     queue<span class=\"token punctuation\">.</span>BytesQueue  <span class=\"token comment\">// 存储实际的数据 的 环形字节数组</span>\n\tlock        sync<span class=\"token punctuation\">.</span>RWMutex      <span class=\"token comment\">// 锁</span>\n\tentryBuffer <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>            <span class=\"token comment\">//</span>\n\tonRemove    onRemoveCallback  <span class=\"token comment\">// 回调函数, 有多种实现方式</span>\n\n\tisVerbose    <span class=\"token builtin\">bool</span>\n\tstatsEnabled <span class=\"token builtin\">bool</span>\n\tlogger       Logger\n\tclock        clock\n\tlifeWindow   <span class=\"token builtin\">uint64</span>\n\n\thashmapStats <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint32</span> <span class=\"token comment\">// 记录 key的 requestCount</span>\n\tstats        Stats             <span class=\"token comment\">// shard 的 缓存 统计状态</span>\n\tcleanEnabled <span class=\"token builtin\">bool</span>              <span class=\"token comment\">// 是否开启 清理</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-entry\"><a href=\"#3-entry\" class=\"headerlink\" title=\"3. entry\"></a>3. entry</h4><p><img src=\"/post/bigcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/bigcache-entry.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; EntryInfo holds informations about entry in the cache\ntype EntryInfo struct &#123;\n\ttimestamp uint64\n\thash      uint64\n\tkey       string\n\tvalue     []byte\n\terr       error\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>timestamp: 8byte.<br>Hash:      8byte.<br>keyLen:    2byte.<br>key:       Nbyte.<br>value:     Nbyte.<br>&#x2F;&#x2F; headerSize(timestamp + hash + keyLen)  &#x3D; 18byte</p>\n<p>将 kv 包装成 entry.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// header                | kv</span>\n<span class=\"token comment\">// timestamp|hash|keySize|key|value</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">wrapEntry</span><span class=\"token punctuation\">(</span>timestamp <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> hash <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> entry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> buffer <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">&#123;</span>\n\tkeyLength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tblobLength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> headersSizeInBytes <span class=\"token operator\">+</span> keyLength\n\n\t<span class=\"token comment\">// 如果 blob 长度 > buffer,重新申请一个  buffer</span>\n\t<span class=\"token keyword\">if</span> blobLength <span class=\"token operator\">></span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token operator\">*</span>buffer <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> blobLength<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tblob <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span>buffer\n\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint64</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span>\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint64</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span>\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint16</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token operator\">+</span>hashSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span>keyLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token operator\">+</span>keyLength<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> blob<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>blobLength<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>解析 entry 为 kv 结构:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 读取 value:  array[headersSizeInBytes + keyLen:]</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readEntry</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 读取 keyLen</span>\n\tlength <span class=\"token operator\">:=</span> binary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">Uint16</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token operator\">+</span>hashSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// copy on read</span>\n\tdst <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>headersSizeInBytes<span class=\"token operator\">+</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token operator\">+</span>length<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> dst\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 读取 timestamp:  uint64(array)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readTimestampFromEntry</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> binary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">Uint64</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 读取 key:  array[headerSize:headerSize + keyLen]</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readKeyFromEntry</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\tlength <span class=\"token operator\">:=</span> binary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">Uint16</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token operator\">+</span>hashSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// copy on read</span>\n\tdst <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token punctuation\">:</span>headersSizeInBytes<span class=\"token operator\">+</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">bytesToString</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// compare key and entry.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">compareKeyFromEntry</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\tlength <span class=\"token operator\">:=</span> binary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">Uint16</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token operator\">+</span>hashSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">bytesToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token punctuation\">:</span>headersSizeInBytes<span class=\"token operator\">+</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//  读取 hash:  uint64(array[timestampSizeinByte:])</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readHashFromEntry</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> binary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">Uint64</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"4-byteQueue\"><a href=\"#4-byteQueue\" class=\"headerlink\" title=\"4. byteQueue\"></a>4. byteQueue</h4><p>实际存储数据.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> BytesQueue <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tfull         <span class=\"token builtin\">bool</span>\n\tarray        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\tcapacity     <span class=\"token builtin\">int</span>\n\tmaxCapacity  <span class=\"token builtin\">int</span>\n\thead         <span class=\"token builtin\">int</span>\n\ttail         <span class=\"token builtin\">int</span>\n\tcount        <span class=\"token builtin\">int</span>\n\trightMargin  <span class=\"token builtin\">int</span>\n\theaderBuffer <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\tverbose      <span class=\"token builtin\">bool</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一个  kv 结构 是一个 <code>entry</code>. <code>entry</code> 存储在 array 里面.   通过 offset 来进行访问.</p>\n<h3 id=\"3-常用方法\"><a href=\"#3-常用方法\" class=\"headerlink\" title=\"3. 常用方法\"></a>3. 常用方法</h3><h4 id=\"3-1-缓存初始化\"><a href=\"#3-1-缓存初始化\" class=\"headerlink\" title=\"3.1  缓存初始化\"></a>3.1  缓存初始化</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// NewBigCache initialize new instance of BigCache</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewBigCache</span><span class=\"token punctuation\">(</span>config Config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>BigCache<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">newBigCache</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>systemClock<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">newBigCache</span><span class=\"token punctuation\">(</span>config Config<span class=\"token punctuation\">,</span> clock clock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>BigCache<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// param check</span>\n\t<span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>Hasher <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tconfig<span class=\"token punctuation\">.</span>Hasher <span class=\"token operator\">=</span> <span class=\"token function\">newDefaultHasher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tcache <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>BigCache<span class=\"token punctuation\">&#123;</span>\n\t\tshards<span class=\"token punctuation\">:</span>     <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cacheShard<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>Shards<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tlifeWindow<span class=\"token punctuation\">:</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>LifeWindow<span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tclock<span class=\"token punctuation\">:</span>      clock<span class=\"token punctuation\">,</span>\n\t\thash<span class=\"token punctuation\">:</span>       config<span class=\"token punctuation\">.</span>Hasher<span class=\"token punctuation\">,</span>\n\t\tconfig<span class=\"token punctuation\">:</span>     config<span class=\"token punctuation\">,</span>\n\t\tshardMask<span class=\"token punctuation\">:</span>  <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>Shards <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用于 快速计算 hash 值</span>\n\t\t<span class=\"token builtin\">close</span><span class=\"token punctuation\">:</span>      <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 接收 close 信号的 一个 chan, 关闭主动清理任务</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 设置 onremove 回调函数</span>\n\t<span class=\"token keyword\">var</span> onRemove <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>wrappedEntry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> reason RemoveReason<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>OnRemoveWithMetadata <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tonRemove <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>providedOnRemoveWithMetadata\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>OnRemove <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tonRemove <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>providedOnRemove\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>OnRemoveWithReason <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tonRemove <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>providedOnRemoveWithReason\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\tonRemove <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>notProvidedOnRemove\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 逐个初始化  shard</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> config<span class=\"token punctuation\">.</span>Shards<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\tcache<span class=\"token punctuation\">.</span>shards<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">initNewShard</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> onRemove<span class=\"token punctuation\">,</span> clock<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 主动清理  过期数据</span>\n\t<span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>CleanWindow <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tticker <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTicker</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>CleanWindow<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">defer</span> ticker<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> t <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ticker<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span>\n\t\t\t\t\tcache<span class=\"token punctuation\">.</span><span class=\"token function\">cleanUp</span><span class=\"token punctuation\">(</span><span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 进行过期数据清理</span>\n\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>cache<span class=\"token punctuation\">.</span><span class=\"token builtin\">close</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"3-2-Get\"><a href=\"#3-2-Get\" class=\"headerlink\" title=\"3.2 Get\"></a>3.2 Get</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Get reads entry for the key.</span>\n<span class=\"token comment\">// It returns an ErrEntryNotFound when</span>\n<span class=\"token comment\">// no entry exists for the given key.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>BigCache<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\thashedKey <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tshard <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getShard</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 取余操作,    c.shards[hashedKey&amp;c.shardMask]</span>\n\t<span class=\"token keyword\">return</span> shard<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 调用 shard.get 获取  value</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>bigcache.hash 默认使用  fnv hash算法.  <code>new 64-bit FNV-1a Hasher</code> 算法 可以 0 内存申请.</p>\n<p><code>shard.Get</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>cacheShard<span class=\"token punctuation\">)</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> hashedKey <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 加 读锁, 保护   hashmap</span>\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\twrappedEntry<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedEntry</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 判断 key 是否相同. 当发生hash冲突时,如果 key不相同, 直接返回 ErrEntryNotFound</span>\n\t<span class=\"token comment\">// bigcache 不解决 hash Collision</span>\n\t<span class=\"token keyword\">if</span> entryKey <span class=\"token operator\">:=</span> <span class=\"token function\">readKeyFromEntry</span><span class=\"token punctuation\">(</span>wrappedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> key <span class=\"token operator\">!=</span> entryKey <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">collision</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>isVerbose <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Collision detected. Both %q and %q have the same hash %x\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> entryKey<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 如果  key 不存在, 返回  `ErrEntryNotFound`</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> ErrEntryNotFound\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// entry: value的 字节数组</span>\n\tentry <span class=\"token operator\">:=</span> <span class=\"token function\">readEntry</span><span class=\"token punctuation\">(</span>wrappedEntry<span class=\"token punctuation\">)</span>\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">hit</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h4 id=\"3-3-Set\"><a href=\"#3-3-Set\" class=\"headerlink\" title=\"3.3 Set\"></a>3.3 Set</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Set saves entry under the key</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>BigCache<span class=\"token punctuation\">)</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> entry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\thashedKey <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 计算 hash 值</span>\n\tshard <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getShard</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 根据  取余 计算 分片 </span>\n\t<span class=\"token keyword\">return</span> shard<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>shard ：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>cacheShard<span class=\"token punctuation\">)</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> hashedKey <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> entry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\tcurrentTimestamp <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">Epoch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// hash Collision| key 已存在(并未进行更新), 将原来的 entry 软删除</span>\n\t<span class=\"token keyword\">if</span> previousIndex <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">[</span>hashedKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> previousIndex <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> previousEntry<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>previousIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">resetKeyFromEntry</span><span class=\"token punctuation\">(</span>previousEntry<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">//remove hashkey</span>\n\t\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 如果 未开启  定时 清理任务, 那么 主动调用, 将最早的数据 清理(如果过期)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span>cleanEnabled <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> oldestEntry<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">onEvict</span><span class=\"token punctuation\">(</span>oldestEntry<span class=\"token punctuation\">,</span> currentTimestamp<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>removeOldestEntry<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 将kv 封装成  entry. ( 从这个方法里面可以 看出 entry 的 数据结构.)</span>\n\tw <span class=\"token operator\">:=</span> <span class=\"token function\">wrapEntry</span><span class=\"token punctuation\">(</span>currentTimestamp<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">.</span>entryBuffer<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//  循环目的是为了 保证 一定放入 数据成功.</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 放入  entrys 中  (bytesQueue)</span>\n\t\t<span class=\"token keyword\">if</span> index<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Push() 也可以看一下</span>\n\t\t\ts<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">[</span>hashedKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 如果 放入 失败, (空间不足, 那么 就用 LRU算法, 清理出空间)</span>\n\t\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">removeOldestEntry</span><span class=\"token punctuation\">(</span>NoSpace<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entry is bigger than max shard size\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>bigcache</code> 为何不提供更新的操作? 其实这是显而易见的:</p>\n<p>每次插入元素, bigCache 会根据插入的 key 和 value 在 BytesQueue 中申请一个固定大小的空间. 因为无法保证更新的 value 值和旧的 value 长度相同(这也是数据定长存储的劣势),这样对 bigcache &gt; 来说，按照时间顺序的 <code>head</code> 和 <code>tail</code> 索引值会乱掉,所以干脆就不提供更新接口了.</p></blockquote>\n<h5 id=\"wrapEntry\"><a href=\"#wrapEntry\" class=\"headerlink\" title=\"wrapEntry\"></a>wrapEntry</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// header                | kv</span>\n<span class=\"token comment\">// timestamp|hash|keySize|key|value</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">wrapEntry</span><span class=\"token punctuation\">(</span>timestamp <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> hash <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> entry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> buffer <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">&#123;</span>\n\tkeyLength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tblobLength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> headersSizeInBytes <span class=\"token operator\">+</span> keyLength\n\n\t<span class=\"token comment\">// 如果 blob 长度 > buffer,重新申请一个  buffer</span>\n\t<span class=\"token keyword\">if</span> blobLength <span class=\"token operator\">></span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token operator\">*</span>buffer <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> blobLength<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tblob <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span>buffer\n\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint64</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span>\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint64</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span>\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint16</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token operator\">+</span>hashSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span>keyLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token operator\">+</span>keyLength<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> blob<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>blobLength<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"3-4-Delete\"><a href=\"#3-4-Delete\" class=\"headerlink\" title=\"3.4 Delete\"></a>3.4 Delete</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Delete removes the key</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>BigCache<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\thashedKey <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tshard <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getShard</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> shard<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>shard.del()</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Optimistic 乐观锁机制</span>\n<span class=\"token comment\">// 主动删除, 将 entry 中 hash值 置为 0， 如果 不存在,直接返回, 不用加写锁</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>cacheShard<span class=\"token punctuation\">)</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>hashedKey <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Optimistic pre-check using only readlock</span>\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\titemIndex <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">[</span>hashedKey<span class=\"token punctuation\">]</span>\n\n\t\t<span class=\"token keyword\">if</span> itemIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">delmiss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> ErrEntryNotFound\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">CheckGet</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>itemIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">delmiss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// After obtaining the writelock, we need to read the same again,</span>\n\t\t<span class=\"token comment\">// since the data delivered earlier may be stale now</span>\n\t\titemIndex <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">[</span>hashedKey<span class=\"token punctuation\">]</span>\n\n\t\t<span class=\"token keyword\">if</span> itemIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">delmiss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> ErrEntryNotFound\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\twrappedEntry<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>itemIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">delmiss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">)</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">onRemove</span><span class=\"token punctuation\">(</span>wrappedEntry<span class=\"token punctuation\">,</span> Deleted<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>statsEnabled <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>hashmapStats<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 将 entry 中的 hash值 置为0,表示删除. (并不是立即回收空间)</span>\n\t\t<span class=\"token function\">resetKeyFromEntry</span><span class=\"token punctuation\">(</span>wrappedEntry<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">delhit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h3 id=\"4-BytesQueue\"><a href=\"#4-BytesQueue\" class=\"headerlink\" title=\"4. BytesQueue\"></a>4. BytesQueue</h3><p><a href=\"https://github.com/allegro/bigcache/blob/master/queue/bytes_queue.go\">BytesQueue</a> 是一个循环数组, 存储 entry 数据. 通过 offset 来进行访问. 减少 GC 开销. (shard 中的 hashmap 存储的是  hash(key) 与 offset 的映射关系).</p>\n<p><img src=\"/post/bigcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/bigcache-entry.png\"></p>\n<p>bytesQueue 的几个特点: </p>\n<ol>\n<li>存储的 entry  不会是  截断的. (一部分数据在tail, 一部分数据在  头部.)</li>\n<li>entry 的数据格式:   如上图所示.</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// go doc queue BytesQueue</span>\n<span class=\"token keyword\">package</span> queue <span class=\"token comment\">// import \"github.com/allegro/bigcache/v3/queue\"</span>\n\n<span class=\"token keyword\">type</span> BytesQueue <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Has unexported fields.</span>\n<span class=\"token punctuation\">&#125;</span>\n    BytesQueue is a non<span class=\"token operator\">-</span>thread safe queue <span class=\"token keyword\">type</span> of fifo based on bytes array<span class=\"token punctuation\">.</span> For\n    every push operation index of entry is returned<span class=\"token punctuation\">.</span> It can be used to read the\n    entry later\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewBytesQueue</span><span class=\"token punctuation\">(</span>capacity <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> maxCapacity <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> verbose <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>BytesQueue\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">CheckGet</span><span class=\"token punctuation\">(</span>index <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>index <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"bigcache-的缺点-和使用中要注意的点\"><a href=\"#bigcache-的缺点-和使用中要注意的点\" class=\"headerlink\" title=\"bigcache 的缺点 和使用中要注意的点:\"></a>bigcache 的缺点 和使用中要注意的点:</h3><ol>\n<li>bigcache 不支持 为单个key 设置 过期时间, bigcache 中所有的 key 的过期时间是一样的. (如果有需求自己开发)</li>\n<li>bigcache set key 时 不会 更新 entry, 而是将原来的 entry 软删除, 在append 一个entry.</li>\n<li>无持久化功能, 只能用作单机缓存</li>\n<li>BytesQueue 的扩容操作可能会影响性能</li>\n</ol>\n<hr>\n<p>[参考]<br><a href=\"https://blog.allegro.tech/2016/03/writing-fast-cache-service-in-go.html\">Writing a very fast cache service with millions of entries in Go</a><br><a href=\"https://pandaychen.github.io/2020/03/03/BIGCACHE-ANALYSIS/\">Golang 高性能 LocalCache：BigCache 设计与分析</a><br><a href=\"https://blog.csdn.net/weixin_38683995/article/details/113522023\">Golang 中map与GC“纠缠不清”的关系</a><br><a href=\"https://github.com/majunmin/bigcache\">源码</a></p>\n","text":"[TOC] Bigcache 的特点:并发支持,快速, 过期大量条目而不影响性能.bigcache将 缓存条目放在了堆上,节省了GC. 为了实现这一点. 需要对字节切片进行操作. 因此涉及到缓存条目的序列化与反序列化. bigcache, freecache 和 map 的基准测...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"},{"name":"bigcache","slug":"bigcache","count":1,"path":"api/tags/bigcache.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Bigcache-%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">Bigcache 的特点:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">内存使用情况</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%8E%E4%B9%88%E5%81%9A%E5%88%B0%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">怎么做到的高性能?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3-hash-%E5%86%B2%E7%AA%81-Hash-Collisions\"><span class=\"toc-text\">如何解决 hash 冲突(Hash Collisions)?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Bigcache-Vs-freecche\"><span class=\"toc-text\">Bigcache Vs freecche</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">源码解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 一些概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-shard\"><span class=\"toc-text\">1. shard</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-CleanWindow\"><span class=\"toc-text\">2. CleanWindow</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-lifeWindow\"><span class=\"toc-text\">3. lifeWindow</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2. 数据结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-cache\"><span class=\"toc-text\">1. cache</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-shard\"><span class=\"toc-text\">2. shard</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-entry\"><span class=\"toc-text\">3. entry</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-byteQueue\"><span class=\"toc-text\">4. byteQueue</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3. 常用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E7%BC%93%E5%AD%98%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">3.1  缓存初始化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-Get\"><span class=\"toc-text\">3.2 Get</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-Set\"><span class=\"toc-text\">3.3 Set</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#wrapEntry\"><span class=\"toc-text\">wrapEntry</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-Delete\"><span class=\"toc-text\">3.4 Delete</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-BytesQueue\"><span class=\"toc-text\">4. BytesQueue</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bigcache-%E7%9A%84%E7%BC%BA%E7%82%B9-%E5%92%8C%E4%BD%BF%E7%94%A8%E4%B8%AD%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9\"><span class=\"toc-text\">bigcache 的缺点 和使用中要注意的点:</span></a></li></ol></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"freecache源码解析","uid":"33024321d4d721b36bc422db43cf754d","slug":"freecache源码解析","date":"2022-10-10T15:59:17.000Z","updated":"2022-10-10T17:01:20.789Z","comments":true,"path":"api/articles/freecache源码解析.json","keywords":null,"cover":[],"text":"代码仓库地址 freeCache 相比较 golang 的原生map实现缓存,可以通过减少指针的数量避免 GC压力,无论存储了多少数据,内部只会占用 512个指针, 数据集 通过 hash(key) 被分片256个 segment,每个 segment 有两个指针, 一个存储键和...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"大数据相关的一些名词","uid":"abbd863cb849430f5ba6ae97c8807bd7","slug":"大数据相关的一些名词","date":"2022-09-09T16:36:11.000Z","updated":"2023-03-01T15:59:46.874Z","comments":true,"path":"api/articles/大数据相关的一些名词.json","keywords":null,"cover":null,"text":" 据仓库(data warehouse) 也可以简称为 DW DH 数据仓库中的分层:1. 数据运营层 ODS ODS(Operation Data Store): 数据准备区,也称为 贴源层. 数据仓库中 源头系统的数据通常会原封不动的存储一份. 这成为 ODS. 是后续数据仓...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/categories/bigdata.json"}],"tags":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/tags/bigdata.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}