{"title":"Go-Test-Gomonkey使用","uid":"03cc55fb6473717cac5c2d4cd07b1cc0","slug":"Go-Test-Gomonkey使用","date":"2022-11-14T11:54:08.000Z","updated":"2022-11-14T11:54:08.621Z","comments":true,"path":"api/articles/Go-Test-Gomonkey使用.json","keywords":null,"cover":null,"content":"<p>golang的单测, 有一些约定, 例如文件名是  xxx.go, 测试文件名必须是 xxx_test.go, 且测试函数的方法名 都是以 <code>Test</code>开头, 使用<code>go test</code> 命令, 有时发现mock不住,一般都是内联(简短)函数mock失败,可以执行的时候加上编译条件禁止内联 <code>-gcflags=all=-l</code>.</p>\n<p>Feature:</p>\n<ul>\n<li>support a patch for a <strong>function</strong></li>\n<li>support a patch for a <strong>public member method</strong></li>\n<li>support a patch for a <strong>private member method</strong></li>\n<li>support a patch for a <strong>interface</strong></li>\n<li>support a patch for a <strong>function variable</strong></li>\n<li>support a patch for a <strong>global variable</strong></li>\n<li>support patches of a <strong>specified sequence for a function</strong></li>\n<li>support patches of a <strong>specified sequence for a member method</strong></li>\n<li>support patches of a <strong>specified sequence for a interface</strong></li>\n<li>support patches of a <strong>specified sequence for a function variable</strong></li>\n</ul>\n<h2 id=\"gomonkey-使用\"><a href=\"#gomonkey-使用\" class=\"headerlink\" title=\"gomonkey 使用\"></a>gomonkey 使用</h2><p><a href=\"https://github.com/agiledragon/gomonkey\">github</a></p>\n<p>gomonkey 可以为函数打桩,做数据mock, 有如下功能:</p>\n<ol>\n<li><strong>为函数打桩</strong></li>\n<li><strong>为成员方法打桩</strong></li>\n<li><strong>为全局变量打桩</strong></li>\n<li><strong>为函数变量打桩</strong></li>\n<li><strong>为函数打一个特定的桩序列</strong></li>\n<li>为成员方法打一个特定桩序列</li>\n<li>为函数变量打一个特定的桩序列</li>\n</ol>\n<h3 id=\"1-为函数打桩\"><a href=\"#1-为函数打桩\" class=\"headerlink\" title=\"1. 为函数打桩\"></a>1. 为函数打桩</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// @param target: 被mock的函数</span>\n<span class=\"token comment\">// @param double: 桩函数定义</span>\n<span class=\"token comment\">// @return Patches: 测试完成后,通过patches调用 Reset() 删除桩</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyFunc</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFunc</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p><strong>Demo</strong>: 使用 gomonkey.ApplyFunc mock <code>netWorkFunc</code> 函数</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">logicFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tsum<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">netWorkFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">netWorkFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\terrmsg <span class=\"token operator\">:=</span> <span class=\"token string\">\"a&lt;0 &amp;&amp; b&lt;0\"</span> <span class=\"token comment\">//gomonkey有bug，函数一定要有栈分配变量，不然mock不住</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\"</span><span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestDemo</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFunc</span><span class=\"token punctuation\">(</span>netWorkFunc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">99999999</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// out:  99999999</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">logicFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-为成员方法打桩\"><a href=\"#2-为成员方法打桩\" class=\"headerlink\" title=\"2.  为成员方法打桩\"></a>2.  为成员方法打桩</h3><p>method 与 Func 不同, method 属于类型的一部分, Func 属于包的一部分, 在函数地址分配的方式有所不同,因此不能直接去 <code>ApplyFunc</code> 去 mock, 需要使用 <code>ApplyMethod</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// @param target      被mock类型  </span>\n<span class=\"token comment\">// @param methodName  方法名</span>\n<span class=\"token comment\">// @param double      桩函数定义</span>\n<span class=\"token comment\">// @return </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyMethod</span><span class=\"token punctuation\">(</span>target reflect<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> methodName <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> double <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyMethod</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">,</span> double<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li><ol>\n<li>无法为 unexported 方法打桩</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>类型为 T的 method只包含recever为 T 的method, 类型为<code>*T</code> 的包含receiver 为 T | <code>*T</code> 的</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>写桩函数定义时,要把receiver写进去.</li>\n</ol>\n</li>\n</ul>\n<p><strong>Demo</strong>:  </p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">type</span> MyType <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>mt <span class=\"token operator\">*</span>MyType<span class=\"token punctuation\">)</span> <span class=\"token function\">logicFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tsum<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mt<span class=\"token punctuation\">.</span><span class=\"token function\">NetWorkFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>mt <span class=\"token operator\">*</span>MyType<span class=\"token punctuation\">)</span> <span class=\"token function\">NetWorkFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\terrmsg <span class=\"token operator\">:=</span> <span class=\"token string\">\"a&lt;0 &amp;&amp; b&lt;0\"</span> <span class=\"token comment\">//gomonkey有bug，函数一定要有栈分配变量，不然mock不住</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\"</span><span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token comment\">// test case</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Test_ApplyMethod</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">var</span> m <span class=\"token operator\">*</span>MyType\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyMethod</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NetWorkFunc\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> <span class=\"token operator\">*</span>MyType<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">99999999</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tres<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">logicFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token number\">99999999</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"3-为全局变量打桩\"><a href=\"#3-为全局变量打桩\" class=\"headerlink\" title=\"3. 为全局变量打桩\"></a>3. 为全局变量打桩</h3><p><strong>函数签名</strong>:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// @param target : 全局变量地址</span>\n<span class=\"token comment\">// @param double : 全局变量的桩</span>\n<span class=\"token comment\">// @retrun Patches</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyGlobalVar</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyGlobalVar</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tnum <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\tmat <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Test_ApplyGlobalVar</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyGlobalVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\n\n\tpatches2 <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyGlobalVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches2<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h3 id=\"4-为函数变量打桩\"><a href=\"#4-为函数变量打桩\" class=\"headerlink\" title=\"4. 为函数变量打桩\"></a>4. 为函数变量打桩</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// @param target 目标函数变量地址</span>\n<span class=\"token comment\">// @param double 目标函数的桩</span>\n<span class=\"token comment\">// @return patches </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyFuncVar</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncVar</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>Demo</strong>: mock 一个函数变量的行为</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> Marshal <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Test_ApplyFuncVar</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tstr <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello world.\"</span>\n\n\tgomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Marshal<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n\tbytes<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n<h3 id=\"5-为函数打一个特定的桩序列\"><a href=\"#5-为函数打一个特定的桩序列\" class=\"headerlink\" title=\"5. 为函数打一个特定的桩序列\"></a>5. 为函数打一个特定的桩序列</h3><p>有时,我们需要多次调用同一个函数,且需要有不同的返回值, 且保持顺序, 如是果是你要怎么实实现?</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// @param target  目标函数</span>\n<span class=\"token comment\">// @param outputs 返回值序列</span>\n<span class=\"token comment\">// @return patches </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyFuncSeq</span><span class=\"token punctuation\">(</span>target <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> outputs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>OutputCell<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncSeq</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>Demo</strong>:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token function\">ReadLeaf</span><span class=\"token punctuation\">(</span>value <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s:%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestApplyFuncSeq</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tinfo1 <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello world.\"</span>\n\tinfo2 <span class=\"token operator\">:=</span> <span class=\"token string\">\"majm.\"</span>\n\tinfo3 <span class=\"token operator\">:=</span> <span class=\"token string\">\"nancy.\"</span>\n\n    <span class=\"token comment\">// default time is 1 </span>\n\toutputCells <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>gomonkey<span class=\"token punctuation\">.</span>OutputCell<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncSeq</span><span class=\"token punctuation\">(</span>ReadLeaf<span class=\"token punctuation\">,</span> outputCells<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tresult1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">ReadLeaf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info1<span class=\"token punctuation\">,</span> result1<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tresult2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">ReadLeaf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info2<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tresult3<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">ReadLeaf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info3<span class=\"token punctuation\">,</span> result3<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Params <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> OutputCell <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tValues Params\n\tTimes  <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Params: []interface{}: 返回结果<br>Times: 出现的次数</p>\n<ul>\n<li>如果 outputs + times 声明了 N次,当调用超过N次后悔报错.</li>\n<li>Times 默认是 1 次</li>\n</ul>\n<h3 id=\"6-为成员方法打一个特定桩序列\"><a href=\"#6-为成员方法打一个特定桩序列\" class=\"headerlink\" title=\"6. 为成员方法打一个特定桩序列\"></a>6. 为成员方法打一个特定桩序列</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// @param target    目标类型</span>\n<span class=\"token comment\">// @param methodName 目标类型方法</span>\n<span class=\"token comment\">// @param outputs    返回值序列</span>\n<span class=\"token comment\">// @return  patches</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyMethodSeq</span><span class=\"token punctuation\">(</span>target reflect<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> methodName <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> outputs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>OutputCell<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyMethodSeq</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p><strong>Demo</strong>:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">type</span> Etcd <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>Etcd<span class=\"token punctuation\">)</span> <span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\toutput <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s, %s!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Etcd\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> output<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Test_ApplyMethodSeq</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tinfo1 <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello world.\"</span>\n\tinfo2 <span class=\"token operator\">:=</span> <span class=\"token string\">\"majm.\"</span>\n\tinfo3 <span class=\"token operator\">:=</span> <span class=\"token string\">\"nancy.\"</span>\n\n\t<span class=\"token keyword\">var</span> e <span class=\"token operator\">*</span>Etcd\n\toutputs <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>gomonkey<span class=\"token punctuation\">.</span>OutputCell<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyMethodSeq</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Retrieve\"</span><span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tresult1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url1\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info1<span class=\"token punctuation\">,</span> result1<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tresult2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url2\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info2<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tresult3<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url3\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info3<span class=\"token punctuation\">,</span> result3<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"7-为函数变量打一个特定的桩序列\"><a href=\"#7-为函数变量打一个特定的桩序列\" class=\"headerlink\" title=\"7. 为函数变量打一个特定的桩序列\"></a>7. 为函数变量打一个特定的桩序列</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// @param:  target  目标函数变量地址</span>\n<span class=\"token comment\">// @param:  outputs 返回结果序列</span>\n<span class=\"token comment\">// @return: patches</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyFuncVarSeq</span><span class=\"token punctuation\">(</span>target <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> outputs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>OutputCell<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncVarSeq</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>Demo</strong>:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Test_ApplyFuncVarSeq</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tinfo1 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world.\"</span><span class=\"token punctuation\">)</span>\n\tinfo2 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"majm.\"</span><span class=\"token punctuation\">)</span>\n\tinfo3 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nancy.\"</span><span class=\"token punctuation\">)</span>\n\n\toutputCells <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>gomonkey<span class=\"token punctuation\">.</span>OutputCell<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncVarSeq</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Marshal<span class=\"token punctuation\">,</span> outputCells<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tresult1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> result1<span class=\"token punctuation\">,</span> info1<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\n\tresult2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">,</span> info2<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\n\tresult3<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> result3<span class=\"token punctuation\">,</span> info3<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n","text":"golang的单测, 有一些约定, 例如文件名是 xxx.go, 测试文件名必须是 xxx_test.go, 且测试函数的方法名 都是以 Test开头, 使用go test 命令, 有时发现mock不住,一般都是内联(简短)函数mock失败,可以执行的时候加上编译条件禁止内联 -...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"gomonkey","slug":"gomonkey","count":1,"path":"api/tags/gomonkey.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gomonkey-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">gomonkey 使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%B8%BA%E5%87%BD%E6%95%B0%E6%89%93%E6%A1%A9\"><span class=\"toc-text\">1. 为函数打桩</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%BA%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E6%89%93%E6%A1%A9\"><span class=\"toc-text\">2.  为成员方法打桩</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%BA%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E6%89%93%E6%A1%A9\"><span class=\"toc-text\">3. 为全局变量打桩</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%98%E9%87%8F%E6%89%93%E6%A1%A9\"><span class=\"toc-text\">4. 为函数变量打桩</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E4%B8%BA%E5%87%BD%E6%95%B0%E6%89%93%E4%B8%80%E4%B8%AA%E7%89%B9%E5%AE%9A%E7%9A%84%E6%A1%A9%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">5. 为函数打一个特定的桩序列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%B8%BA%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E6%89%93%E4%B8%80%E4%B8%AA%E7%89%B9%E5%AE%9A%E6%A1%A9%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">6. 为成员方法打一个特定桩序列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%98%E9%87%8F%E6%89%93%E4%B8%80%E4%B8%AA%E7%89%B9%E5%AE%9A%E7%9A%84%E6%A1%A9%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">7. 为函数变量打一个特定的桩序列</span></a></li></ol></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"golang如何避免循环依赖","uid":"993a22b9aed98844bcb1901957913e2a","slug":"golang如何避免循环依赖","date":"2022-11-18T13:12:04.000Z","updated":"2022-11-18T13:18:17.634Z","comments":true,"path":"api/articles/golang如何避免循环依赖.json","keywords":null,"cover":[],"text":"golang 包引用之间不允许循环依赖.循环依赖的本质上是一个错误的设计, 在 golang中 循环依赖是 会产生编译时错误. golang中为什么不允许循环依赖呢? 1. 没有支持循环导入,目的是迫使 Go 程序员更多地考虑程序的依赖关系. - 保持依赖关系图的简洁。 - 快速...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Go-Test-Convey使用","uid":"7197218ba2b31b3e36651d378424a532","slug":"Go-Test-Convey使用","date":"2022-11-14T11:53:51.000Z","updated":"2022-11-14T11:53:51.655Z","comments":true,"path":"api/articles/Go-Test-Convey使用.json","keywords":null,"cover":[],"text":"ConveyWiki Feature: 直接与 go test 集成 全自动的 WEBUI(与 go test 一起工作) 大量的回归测试 展示测试覆盖率 可读的,彩色控制台输出(可以被其他人理解) 测试代码自动生成 桌面通知(optional) 立即打开问题行. 1. Why ...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"convey","slug":"convey","count":1,"path":"api/tags/convey.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}