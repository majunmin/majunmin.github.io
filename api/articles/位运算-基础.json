{"title":"位运算-基础","uid":"0fbff2d6e80a66fc76d63bc97dc872bd","slug":"位运算-基础","date":"2022-07-19T15:29:47.000Z","updated":"2022-07-23T04:15:53.391Z","comments":true,"path":"api/articles/位运算-基础.json","keywords":null,"cover":null,"content":"<span id=\"more\"></span>\n\n\n<h2 id=\"异或操作\"><a href=\"#异或操作\" class=\"headerlink\" title=\"异或操作\"></a>异或操作</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">x ^ 0  &#x3D; x\nx ^ 1s &#x3D; ~x  &#x2F;&#x2F; 1s  &#x3D; ~0\nx ^ ~x &#x3D; 1s\nx ^ x  &#x3D; 0\nc &#x3D; a ^ b  &#x3D;&gt; a ^ c &#x3D; b,  b ^ c &#x3D; a    &#x2F;&#x2F; 交换两个数\na ^ b ^ c &#x3D; a ^ (b ^ c) &#x3D; (a ^ b) ^ c  &#x2F;&#x2F; associate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"指定位置的-位运算\"><a href=\"#指定位置的-位运算\" class=\"headerlink\" title=\"指定位置的 位运算\"></a>指定位置的 位运算</h2><ol>\n<li>将 x 最右边的 n位清零  :   <code>x &amp; (~0 &lt;&lt; n)</code></li>\n<li>获取 x 的第n位的值(1|0):   <code>(x &gt;&gt; n) &amp; 1</code></li>\n<li>获取 x 的第n位的幂值   :    <code>x &amp;(1 &lt;&lt; n)</code></li>\n<li>仅将第 n 位置 1       :    <code>x | (1&lt;&lt; n)</code></li>\n<li>仅将第 n 位置 0       :    <code>x &amp; ~(1&lt;&lt; n)</code></li>\n<li>仅将第 n 位取反       :    <code>x ^ (1&lt;&lt; n)</code></li>\n<li>将x最高位至第n(含)位清零:    <code>x&amp;((1&lt;&lt;n) - 1)</code></li>\n<li>获取x  最右边的 1     :     <code>x &amp; -x</code> (lowbit操作)</li>\n</ol>\n<ul>\n<li>a      &#x3D; 00110100</li>\n<li>~a     &#x3D; 11001011</li>\n<li>-a     &#x3D; 11001100</li>\n<li>a &amp; -a &#x3D; 00000100</li>\n</ul>\n<h2 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h2><ol>\n<li>判断奇偶</li>\n</ol>\n<ul>\n<li>x % 2 &#x3D;&#x3D; 0  &#x3D;&gt;   (x &amp; 1) &#x3D;&#x3D; 0</li>\n<li>x % 2 &#x3D;&#x3D; 1  &#x3D;&gt;   (x &amp; 1) &#x3D;&#x3D; 1</li>\n</ul>\n<ol start=\"2\">\n<li><p>x &gt;&gt; 1 &#x3D;&#x3D; x &#x2F; 2<br>mid &#x3D; (left + right) &#x2F; 2   &#x3D;&#x3D; mid &#x3D; (left + right) &gt;&gt; 1 </p>\n</li>\n<li><p>x &#x3D; x &amp;(x-1)  清零最低位的1</p>\n</li>\n<li><p>x &amp; -x       得到最低位的 1 </p>\n</li>\n<li><p>x &amp; ~x  &#x3D;&#x3D; 0</p>\n</li>\n</ol>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ul>\n<li>bloomFilter</li>\n<li></li>\n</ul>\n","text":" 异或操作x ^ 0 &#x3D; x x ^ 1s &#x3D; ~x &#x2F;&#x2F; 1s &#x3D; ~0 x ^ ~x &#x3D; 1s x ^ x &#x3D; 0 c &#x3D; a ^ b &#x3D;&gt; a ^ c &#x3D; b, b ^...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"},{"name":"位运算","slug":"位运算","count":1,"path":"api/tags/位运算.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">异或操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E7%9A%84-%E4%BD%8D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">指定位置的 位运算</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">常用操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">应用</span></a></li></ol>","author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"六边形架构","uid":"911037a657c82ed3571b8e922dfd713c","slug":"六边形架构","date":"2022-07-23T02:47:02.000Z","updated":"2022-07-23T03:26:42.646Z","comments":true,"path":"api/articles/六边形架构.json","keywords":null,"cover":[],"text":"分层架构是一种架构风格,本质是避免耦合,使边界清晰.六边形架构 遵循了分层架构的所有约束与特性，其实使用 端口与适配器这个名字更加合适.因为六边形架构的 边数没有意义. 六边形架构能够充分地区分 领域模型与 输入输出设备之间的界限. 1. 六边形架构(端口与适配器) 一种具有对称...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"架构","slug":"架构","count":2,"path":"api/tags/架构.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"《架构整洁之道》-读书笔记:7-11章","uid":"5ed57e13aea17add1dca2c51e84aa68f","slug":"《架构整洁之道》-读书笔记-7-11章","date":"2022-07-09T06:01:58.000Z","updated":"2022-10-10T16:06:20.546Z","comments":true,"path":"api/articles/《架构整洁之道》-读书笔记-7-11章.json","keywords":null,"cover":[],"text":"《架构整洁之道》-读书笔记:7-11章架构整洁之道: 第 7-11 章 主要讲的是 设计原则, SOLID,SOLID 的主要作用是告诉我们如何将数据和函数组织称为类,以及如何将这些类链接起来组合成一个程序. 软件构建中层模块主要目标如下: 使软件可容忍被改动. 是软件更容易被理...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"读书笔记","slug":"读书笔记","count":1,"path":"api/tags/读书笔记.json"},{"name":"架构整洁之道","slug":"架构整洁之道","count":1,"path":"api/tags/架构整洁之道.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}