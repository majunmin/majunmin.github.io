{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}},"post_list":[{"title":"fastcache源码分析","uid":"e948586c90ca41ff51fdf8e035fa5502","slug":"fastcache源码解析","date":"2023-05-06T07:52:35.000Z","updated":"2023-05-06T07:52:35.049Z","comments":true,"path":"api/articles/fastcache源码解析.json","keywords":null,"cover":[],"text":"fastcache 特性: 快速, 高性能, 多 CPU上 可扩展 线程安全. 多个 goroutine 可以同时读写一个cache 实例 fastcache 设计为 在存储大量的 entry 的场景下 GC free fastcache 当 缓存数量达到阈值时 可以自动 清理 ...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"go","slug":"go","count":2,"path":"api/tags/go.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"},{"name":"fastcache","slug":"fastcache","count":1,"path":"api/tags/fastcache.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"大数据-数据仓库大宽表","uid":"7b7fae18844a9a83dfd9701a806d24e8","slug":"大数据-数据仓库大宽表","date":"2023-03-01T13:17:02.000Z","updated":"2023-03-01T15:59:43.086Z","comments":true,"path":"api/articles/大数据-数据仓库大宽表.json","keywords":null,"cover":null,"text":"什么是大宽表, 为什么要使用大宽表, 大宽表有什么优缺点, 设计大宽表要注意什么? 参考一起聊聊数仓大宽表 ","link":"","photos":[],"count_time":{"symbolsCount":62,"symbolsTime":"1 mins."},"categories":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/categories/bigdata.json"}],"tags":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/tags/bigdata.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"golang如何避免循环依赖","uid":"993a22b9aed98844bcb1901957913e2a","slug":"golang如何避免循环依赖","date":"2022-11-18T13:12:04.000Z","updated":"2022-11-18T13:18:17.634Z","comments":true,"path":"api/articles/golang如何避免循环依赖.json","keywords":null,"cover":[],"text":"golang 包引用之间不允许循环依赖.循环依赖的本质上是一个错误的设计, 在 golang中 循环依赖是 会产生编译时错误. golang中为什么不允许循环依赖呢? 1. 没有支持循环导入,目的是迫使 Go 程序员更多地考虑程序的依赖关系. - 保持依赖关系图的简洁。 - 快速...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Go-Test-Gomonkey使用","uid":"03cc55fb6473717cac5c2d4cd07b1cc0","slug":"Go-Test-Gomonkey使用","date":"2022-11-14T11:54:08.000Z","updated":"2022-11-14T11:54:08.621Z","comments":true,"path":"api/articles/Go-Test-Gomonkey使用.json","keywords":null,"cover":null,"text":"golang的单测, 有一些约定, 例如文件名是 xxx.go, 测试文件名必须是 xxx_test.go, 且测试函数的方法名 都是以 Test开头, 使用go test 命令, 有时发现mock不住,一般都是内联(简短)函数mock失败,可以执行的时候加上编译条件禁止内联 -...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"gomonkey","slug":"gomonkey","count":1,"path":"api/tags/gomonkey.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Go-Test-Convey使用","uid":"7197218ba2b31b3e36651d378424a532","slug":"Go-Test-Convey使用","date":"2022-11-14T11:53:51.000Z","updated":"2022-11-14T11:53:51.655Z","comments":true,"path":"api/articles/Go-Test-Convey使用.json","keywords":null,"cover":[],"text":"ConveyWiki Feature: 直接与 go test 集成 全自动的 WEBUI(与 go test 一起工作) 大量的回归测试 展示测试覆盖率 可读的,彩色控制台输出(可以被其他人理解) 测试代码自动生成 桌面通知(optional) 立即打开问题行. 1. Why ...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"convey","slug":"convey","count":1,"path":"api/tags/convey.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Go-Test-gomock使用","uid":"301b2e78436f0e9c40fa9a9acf52a404","slug":"Go-Test-gomock使用","date":"2022-11-14T11:53:38.000Z","updated":"2022-11-14T11:53:38.199Z","comments":true,"path":"api/articles/Go-Test-gomock使用.json","keywords":null,"cover":null,"text":"写出可测试 的代码 至关重要. 可以保证代码的稳定性. 帮助程序员减少bug. gomock 是一个go官方的模拟框架.gomock的使用场景: IO类型的数据, 本地文件,数据库,网络API,RPC等 依赖的服务还没有开发好, 这时候可以自己模拟一个服务, 加快开发进度提升开发...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"golang","slug":"golang","count":4,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"gomock","slug":"gomock","count":1,"path":"api/tags/gomock.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"freecache源码解析","uid":"33024321d4d721b36bc422db43cf754d","slug":"freecache源码解析","date":"2022-10-10T15:59:17.000Z","updated":"2022-10-10T17:01:20.789Z","comments":true,"path":"api/articles/freecache源码解析.json","keywords":null,"cover":[],"text":"代码仓库地址 freeCache 相比较 golang 的原生map实现缓存,可以通过减少指针的数量避免 GC压力,无论存储了多少数据,内部只会占用 512个指针, 数据集 通过 hash(key) 被分片256个 segment,每个 segment 有两个指针, 一个存储键和...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"bigcache源码解析","uid":"411297e7dedff7a6e68a4f8255b55a82","slug":"bigcache源码解析","date":"2022-10-10T15:58:44.000Z","updated":"2022-10-10T17:02:41.761Z","comments":true,"path":"api/articles/bigcache源码解析.json","keywords":null,"cover":[],"text":"[TOC] Bigcache 的特点:并发支持,快速, 过期大量条目而不影响性能.bigcache将 缓存条目放在了堆上,节省了GC. 为了实现这一点. 需要对字节切片进行操作. 因此涉及到缓存条目的序列化与反序列化. bigcache, freecache 和 map 的基准测...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"cache","slug":"cache","count":3,"path":"api/tags/cache.json"},{"name":"bigcache","slug":"bigcache","count":1,"path":"api/tags/bigcache.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"大数据相关的一些名词","uid":"abbd863cb849430f5ba6ae97c8807bd7","slug":"大数据相关的一些名词","date":"2022-09-09T16:36:11.000Z","updated":"2023-03-01T15:59:46.874Z","comments":true,"path":"api/articles/大数据相关的一些名词.json","keywords":null,"cover":null,"text":" 据仓库(data warehouse) 也可以简称为 DW DH 数据仓库中的分层:1. 数据运营层 ODS ODS(Operation Data Store): 数据准备区,也称为 贴源层. 数据仓库中 源头系统的数据通常会原封不动的存储一份. 这成为 ODS. 是后续数据仓...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/categories/bigdata.json"}],"tags":[{"name":"bigdata","slug":"bigdata","count":2,"path":"api/tags/bigdata.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Go Context 使用场景","uid":"c851ed248b05eaa2eb5ed28481ee6148","slug":"Go-Context-使用场景","date":"2022-08-31T03:04:55.000Z","updated":"2022-09-03T07:45:14.726Z","comments":true,"path":"api/articles/Go-Context-使用场景.json","keywords":null,"cover":[],"text":"context 使用场景1 超时控制实际使用中, context 经常和 select 关键字一起使用. 用于监听 context 结束 取消. import ( \"context\" \"fmt\" \"time\" ) func testTimeout() &#123; timerCt...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"context","slug":"context","count":2,"path":"api/tags/context.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Go源码-context","uid":"bd18eec6e0045068932a65759db44fe4","slug":"Go源码-context","date":"2022-08-30T15:39:07.000Z","updated":"2022-10-11T04:01:23.554Z","comments":true,"path":"api/articles/Go源码-context.json","keywords":null,"cover":[],"text":"在go服务器中,通常 每个传入的请求都会在自己的goroutine中进行处理. 请求处理程序通常会启动额外的goroutine来访问数据库 或者第三方服务.处理请求的一组goroutine通常需要访问特定于请求的值: 例如userid, request_id, token,tim...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"},{"name":"context","slug":"context","count":2,"path":"api/tags/context.json"},{"name":"源码剖析","slug":"源码剖析","count":1,"path":"api/tags/源码剖析.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"微服务 Trace","uid":"9a85a1a2b7a6a9bc3209cb287c73c69a","slug":"微服务-Trace","date":"2022-08-18T04:46:07.000Z","updated":"2022-08-29T08:51:32.897Z","comments":true,"path":"api/articles/微服务-Trace.json","keywords":null,"cover":null,"text":"Spection Trace 语义Trace代表一个调用链. 通常， 一个 Trace 可以被理解为一系列span 组成的有向无环图(DAG), span 之间的边称为 Reference. SpanSpan 表示一个跨进程的 RPC 或者进程内部的一个过程. 每个span 可以...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"微服务","slug":"微服务","count":2,"path":"api/tags/微服务.json"},{"name":"trace","slug":"trace","count":1,"path":"api/tags/trace.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"微服务:API Gateway","uid":"4d9104954e68f25499a2e47d5b935f32","slug":"微服务-API-Gateway","date":"2022-08-17T02:52:25.000Z","updated":"2022-08-29T08:55:33.248Z","comments":true,"path":"api/articles/微服务-API-Gateway.json","keywords":null,"cover":[],"text":"什么是 API网关API网关是一个服务器,是系统的唯一入口. 从面向对象设计的角度看，它与外观模式类似. API网关封装了系统内部架构,为每个客户端提供一个定制的API.它可能还具有其它职责,如身份验证、监控、负载均衡、缓存、协议转换、限流熔断、静态响应处理. API网关方式的核...","link":"","photos":[],"count_time":{"symbolsCount":952,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"微服务","slug":"微服务","count":2,"path":"api/tags/微服务.json"},{"name":"gateway","slug":"gateway","count":1,"path":"api/tags/gateway.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"awesome-blog","uid":"237d42f01cd872e0a7556a026d085cc6","slug":"awesome-blog","date":"2022-08-16T12:45:48.000Z","updated":"2022-09-08T05:02:48.272Z","comments":true,"path":"api/articles/awesome-blog.json","keywords":null,"cover":null,"text":"golang极客兔兔跟煎鱼学GoO神的博客曹大的博客 Java小马哥的技术博客田小波的技术博客 Architechcleancoders解道凤凰架构 LinuxFRIMIN鸟哥的首页Vamei 算法谭新宇LABULADONG 的算法网站结构之法算法之道kuangbin - 博客园...","link":"","photos":[],"count_time":{"symbolsCount":348,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"blog","slug":"blog","count":3,"path":"api/tags/blog.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"golang-sync.Pool解析","uid":"bc5ccb2e868ae0ec4cf759c000e9d341","slug":"golang-sync-Pool解析","date":"2022-08-11T17:15:26.000Z","updated":"2022-08-15T16:11:27.997Z","comments":true,"path":"api/articles/golang-sync-Pool解析.json","keywords":null,"cover":[],"text":"sync.Pool是sync包下的一个组件,可以作为临时取还对象的一个 池子. 作用: 对于很多需要重复分配、回收内存的地方,sync.Pool 是一个很好的选择.频繁地分配、回收内存会给 GC 带来一定的负担,严重的时候会引起 CPU 的毛刺,而 sync.Pool 可以将暂时...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":9,"path":"api/tags/golang.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"clickhouse-原理","uid":"7f644a5a0ef8dce45a5c7a8966cb4d95","slug":"clickhouse-原理","date":"2022-08-11T17:00:53.000Z","updated":"2022-09-08T05:05:51.621Z","comments":true,"path":"api/articles/clickhouse-原理.json","keywords":null,"cover":[],"text":" Clickhouse 是一个 用于联机分析(OLAP)的 列式存储数据库管理系统(DBMS). 常见的列式数据库有: Vertica、 Paraccel (Actian Matrix，Amazon Redshift)、 Sybase IQ、 Exasol、 Infobright...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"clickhouse","slug":"clickhouse","count":1,"path":"api/tags/clickhouse.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"go build 实现包切换","uid":"d96ad83bba94948fc2ba2a5f3d6fbcb0","slug":"go-build-实现包切换","date":"2022-08-03T04:18:02.000Z","updated":"2022-09-03T07:45:16.171Z","comments":true,"path":"api/articles/go-build-实现包切换.json","keywords":null,"cover":null,"text":"参考 Gin 的实现 gin 在 internal/json包中实现了多个 json 包的序列化能力, 默认使用官方encoding/json包. 如何保证这些包不会冲突呢? 这里用到了 go build -tags 的能力. [json.go](https://github.c...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"go","slug":"go","count":2,"path":"api/tags/go.json"},{"name":"go build","slug":"go-build","count":1,"path":"api/tags/go-build.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"洋葱架构","uid":"2797f253c04e63756fe2c781cd7fcc62","slug":"洋葱架构","date":"2022-07-23T06:23:04.000Z","updated":"2022-07-23T07:38:07.305Z","comments":true,"path":"api/articles/洋葱架构.json","keywords":null,"cover":[],"text":" 领域是一个知识范畴,他指的是我们的软件要模拟的业务知识。 领域驱动设计的核心是 领域模型,它对一个领域的流程和规则有着深刻的理解,洋葱架构实现了这一概念,并极大地改善了代码的品质,降低了复杂性,并且支持不断地发展企业系统. 详解”洋葱架构”Onion Architecture ...","link":"","photos":[],"count_time":{"symbolsCount":143,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"架构","slug":"架构","count":2,"path":"api/tags/架构.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"六边形架构","uid":"911037a657c82ed3571b8e922dfd713c","slug":"六边形架构","date":"2022-07-23T02:47:02.000Z","updated":"2022-07-23T03:26:42.646Z","comments":true,"path":"api/articles/六边形架构.json","keywords":null,"cover":[],"text":"分层架构是一种架构风格,本质是避免耦合,使边界清晰.六边形架构 遵循了分层架构的所有约束与特性，其实使用 端口与适配器这个名字更加合适.因为六边形架构的 边数没有意义. 六边形架构能够充分地区分 领域模型与 输入输出设备之间的界限. 1. 六边形架构(端口与适配器) 一种具有对称...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"架构","slug":"架构","count":2,"path":"api/tags/架构.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"位运算-基础","uid":"0fbff2d6e80a66fc76d63bc97dc872bd","slug":"位运算-基础","date":"2022-07-19T15:29:47.000Z","updated":"2022-07-23T04:15:53.391Z","comments":true,"path":"api/articles/位运算-基础.json","keywords":null,"cover":null,"text":" 异或操作x ^ 0 &#x3D; x x ^ 1s &#x3D; ~x &#x2F;&#x2F; 1s &#x3D; ~0 x ^ ~x &#x3D; 1s x ^ x &#x3D; 0 c &#x3D; a ^ b &#x3D;&gt; a ^ c &#x3D; b, b ^...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"},{"name":"位运算","slug":"位运算","count":1,"path":"api/tags/位运算.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"《架构整洁之道》-读书笔记:7-11章","uid":"5ed57e13aea17add1dca2c51e84aa68f","slug":"《架构整洁之道》-读书笔记-7-11章","date":"2022-07-09T06:01:58.000Z","updated":"2022-10-10T16:06:20.546Z","comments":true,"path":"api/articles/《架构整洁之道》-读书笔记-7-11章.json","keywords":null,"cover":[],"text":"《架构整洁之道》-读书笔记:7-11章架构整洁之道: 第 7-11 章 主要讲的是 设计原则, SOLID,SOLID 的主要作用是告诉我们如何将数据和函数组织称为类,以及如何将这些类链接起来组合成一个程序. 软件构建中层模块主要目标如下: 使软件可容忍被改动. 是软件更容易被理...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"读书笔记","slug":"读书笔记","count":1,"path":"api/tags/读书笔记.json"},{"name":"架构整洁之道","slug":"架构整洁之道","count":1,"path":"api/tags/架构整洁之道.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Intelij-快捷键","uid":"8f865e6ecd68910430d22fc2c9ae4d28","slug":"Intelij-快捷键","date":"2022-07-07T03:20:28.000Z","updated":"2022-10-08T10:33:41.365Z","comments":true,"path":"api/articles/Intelij-快捷键.json","keywords":null,"cover":null,"text":"常用快捷键 Ctrl + Command + G : 选中所有相同的的内容 Ctrl + G : 选中下一个相同的内容 ","link":"","photos":[],"count_time":{"symbolsCount":76,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Intelij","slug":"Intelij","count":1,"path":"api/tags/Intelij.json"},{"name":"快捷键","slug":"快捷键","count":1,"path":"api/tags/快捷键.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"算法-线段树","uid":"f618fdcc06390449a60431b1cd6a19c6","slug":"算法-线段树","date":"2022-06-25T02:07:37.000Z","updated":"2022-10-11T04:01:22.019Z","comments":true,"path":"api/articles/算法-线段树.json","keywords":null,"cover":[],"text":"线段树是经常用来维护区间信息的数据结构,线段树可以在 O(logN) 的时间复杂度内实现单点修改,区间修改,区间查询(区间求和,区间最大值,区间最小值) 等操作. 线段树的数据结构 线段树是一种近似的完全二叉树,每个节点代表一个区间,节点的权值. 根节点是整个区间.每个节点的左孩...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"algorithm","slug":"algorithm","count":1,"path":"api/tags/algorithm.json"},{"name":"线段树","slug":"线段树","count":1,"path":"api/tags/线段树.json"},{"name":"区间","slug":"区间","count":1,"path":"api/tags/区间.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"grpc-DNSResolver","uid":"c648812ee90e87a774c05f7906322d9f","slug":"grpc-DNSResolver","date":"2022-06-21T02:58:26.000Z","updated":"2022-10-11T04:01:20.168Z","comments":true,"path":"api/articles/grpc-DNSResolver.json","keywords":null,"cover":null,"text":" Coderesolver/resolver.go package resolver import ( \"context\" \"net\" \"net/url\" \"google.golang.org/grpc/attributes\" \"google.golang.org/grpc/cr...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"DNSResolver","slug":"DNSResolver","count":1,"path":"api/tags/DNSResolver.json"},{"name":"grpc","slug":"grpc","count":1,"path":"api/tags/grpc.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"docker-compose etcd","uid":"2c7dd58c559020b938dd674699ae2dad","slug":"docker-compose-etcd","date":"2022-06-20T08:53:05.000Z","updated":"2022-06-20T09:00:41.662Z","comments":true,"path":"api/articles/docker-compose-etcd.json","keywords":null,"cover":[],"text":"codedocker-compose.yml version: &#39;3&#39; networks: etcd-net: driver: bridge # 网桥模式 volumes: etcd1_data: # 挂在到 本地数据卷 名 driver: local etcd2...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"docker","slug":"docker","count":2,"path":"api/tags/docker.json"},{"name":"docker-compose","slug":"docker-compose","count":1,"path":"api/tags/docker-compose.json"},{"name":"etcd","slug":"etcd","count":1,"path":"api/tags/etcd.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"golang ChecksumMismath Problem Resolve","uid":"bcbdd392335684c9104bdd4f64660df8","slug":"golang-ChecksumMismath-Problem-Resolve","date":"2022-03-04T10:31:53.000Z","updated":"2022-08-31T08:29:25.613Z","comments":true,"path":"api/articles/golang-ChecksumMismath-Problem-Resolve.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"hexo中插入图片","uid":"ffad35a1622d678553fcb007d75f9511","slug":"hexo中插入图片","date":"2022-03-03T15:52:29.000Z","updated":"2022-03-03T16:35:40.358Z","comments":true,"path":"api/articles/hexo中插入图片.json","keywords":null,"cover":null,"text":"在 hexo 中使用 图片, 有如下几种方式: 1. 在 资源目录下 创建图片 hexo 配置文件 _config.yml post_asset_folder: true # 创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹 当执行命令 hexo new &quot;t...","link":"","photos":[],"count_time":{"symbolsCount":516,"symbolsTime":"1 mins."},"categories":[{"name":"hexo","slug":"hexo","count":2,"path":"api/categories/hexo.json"}],"tags":[{"name":"blog","slug":"blog","count":3,"path":"api/tags/blog.json"},{"name":"image","slug":"image","count":1,"path":"api/tags/image.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"升级hexo-cli的版本","uid":"33a93209a96a0749f2f19c4e853409bf","slug":"升级hexo-cli的版本","date":"2022-03-03T15:26:10.000Z","updated":"2022-03-03T15:48:46.861Z","comments":true,"path":"api/articles/升级hexo-cli的版本.json","keywords":null,"cover":[],"text":"最近升级 node版本后,执行 hexo d 就会报错: NFO Copying files from public folder... FATAL &#123; err: TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot...","link":"","photos":[],"count_time":{"symbolsCount":796,"symbolsTime":"1 mins."},"categories":[{"name":"hexo","slug":"hexo","count":2,"path":"api/categories/hexo.json"}],"tags":[{"name":"blog","slug":"blog","count":3,"path":"api/tags/blog.json"},{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"简单计算器实现-逆波兰表达式","uid":"0ad4121ef489a5f287d594c8cbbc513d","slug":"简单计算器实现-逆波兰表达式","date":"2021-09-25T17:16:01.000Z","updated":"2021-09-25T17:19:53.000Z","comments":true,"path":"api/articles/简单计算器实现-逆波兰表达式.json","keywords":null,"cover":null,"text":"简单计算器的实现-逆波兰表达式 一般也就是分为两步 将中缀表达式 解析为 后缀(前缀)表达式 eval 计算后缀表达式解析 出 结果 中缀表达式 一般的算数表达式, 操作符以中缀形式出现在操作数之间 前缀表达式 前缀表达式是一种没有括号的算术表达式,与中缀表达式不同的是，其将运算...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":1,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"},{"name":"Algorithm","slug":"Algorithm","count":1,"path":"api/tags/Algorithm.json"},{"name":"逆波兰表达式","slug":"逆波兰表达式","count":1,"path":"api/tags/逆波兰表达式.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Maven dependency Scope","uid":"53e5f1b621546948c5c24222a62321d5","slug":"Maven-dependency-Scope","date":"2020-09-14T07:21:10.000Z","updated":"2020-09-14T07:24:54.000Z","comments":true,"path":"api/articles/Maven-dependency-Scope.json","keywords":null,"cover":null,"text":"官网-scope描述 Maven 的作用域分为6种 optional(可选的) compile 默认的scope，表示 dependency 都可以在整个生命周期(编译 运行 测试)中使用. 而且这些dependencies 可以传递依赖 provided 跟compile相似，...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"maven","slug":"maven","count":1,"path":"api/categories/maven.json"}],"tags":[{"name":"maven","slug":"maven","count":2,"path":"api/tags/maven.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JVM-jstat命令解析","uid":"b042f3febe72fcf77aed1d68cd1e61be","slug":"JVM-jstat命令解析","date":"2019-10-16T03:23:24.000Z","updated":"2019-10-16T03:24:55.000Z","comments":true,"path":"api/articles/JVM-jstat命令解析.json","keywords":null,"cover":null,"text":" JDK8jstat命令可以查看堆内存各部分的使用量，以及加载类的数量。命令的格式如下: jstat [-命令选项] [vmid] [间隔时间&#x2F;毫秒] [查询次数] 类加载统计jstat -class [pid] Loaded Bytes Unloaded Bytes ...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"jvm","slug":"jvm","count":1,"path":"api/categories/jvm.json"}],"tags":[{"name":"jvm","slug":"jvm","count":1,"path":"api/tags/jvm.json"},{"name":"jstat","slug":"jstat","count":1,"path":"api/tags/jstat.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"linux下监控实时网速","uid":"3191f51398b532ce218b33ad1c80d29d","slug":"linux下监控实时网速","date":"2019-08-13T09:48:52.000Z","updated":"2020-09-14T07:22:38.000Z","comments":true,"path":"api/articles/linux下监控实时网速.json","keywords":null,"cover":[],"text":" NetHogs是一个小型的’net top’工具,不像大多数工具那样拖慢每个协议或者是每个子网的速度而是按照进程进行带宽分组.NetHogs NetHogs不需要依赖载入某个特殊的内核模块. 如果发生了网络阻塞你可以启动NetHogs立即看到哪个PID造成的这种状况.这样就很容...","link":"","photos":[],"count_time":{"symbolsCount":472,"symbolsTime":"1 mins."},"categories":[{"name":"linux","slug":"linux","count":2,"path":"api/categories/linux.json"}],"tags":[{"name":"linux","slug":"linux","count":2,"path":"api/tags/linux.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"记录一次kafka消费慢解决","uid":"b6fcd1b6df52f1cbb0ed1f5a0d130f42","slug":"记录一次kafka消费慢解决","date":"2019-08-03T10:37:02.000Z","updated":"2019-08-03T10:49:19.000Z","comments":true,"path":"api/articles/记录一次kafka消费慢解决.json","keywords":null,"cover":null,"text":" 最近使用kafka, 消费者速度一直跟不上，造成线上消息堆积到了 101亿，困扰了好几天，终于解决了。（其实很简单，因为 kafka消费速度本来也不慢 😂😂😂😂,其实异步+ 批量消费就满可以达到要求了） 主要原因有两个， 对 @Async 注解的不理解 批量消费 – 还有就是通...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"kafka","slug":"kafka","count":4,"path":"api/categories/kafka.json"},{"name":"consumer","slug":"kafka/consumer","count":1,"path":"api/categories/kafka/consumer.json"}],"tags":[{"name":"kafka","slug":"kafka","count":3,"path":"api/tags/kafka.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"redis-info命令详解","uid":"37aab8e3df469d14892fd29b0404f0e2","slug":"redis-info命令详解","date":"2019-07-22T09:44:36.000Z","updated":"2019-07-22T09:46:17.000Z","comments":true,"path":"api/articles/redis-info命令详解.json","keywords":null,"cover":null,"text":" redis info 命令详解 192.168.5.244(192.168.5.244:7001)&gt;info all &quot;# Server redis_version:3.0.6 redis_git_sha1:00000000 redis_git_dirty:0 ...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"redis","slug":"redis","count":1,"path":"api/categories/redis.json"}],"tags":[{"name":"redis","slug":"redis","count":1,"path":"api/tags/redis.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Docker概念","uid":"409a977ec1b75954f9585ba9c4856d49","slug":"Docker概念","date":"2019-07-20T07:30:19.000Z","updated":"2022-03-03T15:49:51.094Z","comments":true,"path":"api/articles/Docker概念.json","keywords":null,"cover":[],"text":" 了解一下Docker 概念，如今容器技术在互联网行业发展的已经相当成熟，springBoot 微服务 结合 k8s 部署线上服务，安全 高效，充分利用机器资源 ✨镜像镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"docker","slug":"docker","count":1,"path":"api/categories/docker.json"}],"tags":[{"name":"docker","slug":"docker","count":2,"path":"api/tags/docker.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Linux常用命令","uid":"596309cd0250881615133cb44c237a29","slug":"Linux常用命令","date":"2019-07-20T07:03:53.000Z","updated":"2022-10-08T10:36:09.639Z","comments":true,"path":"api/articles/Linux常用命令.json","keywords":null,"cover":[],"text":" 记录一下 CentO7 中常用的命令 命令： rpm -q package-name #检查包是否被安装 rpm -qa #列出所有安装的包 shell 脚本参数 传参数$$$ 变量 含义 $0 当前脚本的文件名 $n 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"linux","slug":"linux","count":2,"path":"api/categories/linux.json"}],"tags":[{"name":"linux","slug":"linux","count":2,"path":"api/tags/linux.json"},{"name":"centos7","slug":"centos7","count":1,"path":"api/tags/centos7.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Kafka-Consumer","uid":"536c69a65ba648fdf100fa15f3717346","slug":"Kafka-Consumer","date":"2019-07-17T12:22:08.000Z","updated":"2022-03-03T15:50:06.276Z","comments":true,"path":"api/articles/Kafka-Consumer.json","keywords":null,"cover":[],"text":"kafka-consumer 参数配置 以及默认值参数配置以及默认值 Consumer 一些概念消费者 Consumerkafka 消费者，消费kafka队列里的消息，可以有多种语言实现， python java scala Go …, consumer group 即是由多个独...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"kafka","slug":"kafka","count":4,"path":"api/categories/kafka.json"}],"tags":[{"name":"kafka","slug":"kafka","count":3,"path":"api/tags/kafka.json"},{"name":"consumer","slug":"consumer","count":1,"path":"api/tags/consumer.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Kafka-Producer","uid":"4b07e4e83f2c420c552350b44033d1ab","slug":"Kafka-Producer","date":"2019-07-10T10:26:01.000Z","updated":"2022-08-31T03:41:51.579Z","comments":true,"path":"api/articles/Kafka-Producer.json","keywords":null,"cover":[],"text":" kafka 负责向消息队列 写入消息。 kafka producer 要比 kafka consumer 简单一点，因为它不涉及复杂的组件管理，与其他的 producer 之间没有关联， 因此实现起来也比较简单。目前， kafka producer 的首要功能就是向某个 top...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"kafka","slug":"kafka","count":4,"path":"api/categories/kafka.json"}],"tags":[{"name":"kafak","slug":"kafak","count":1,"path":"api/tags/kafak.json"},{"name":"producer","slug":"producer","count":1,"path":"api/tags/producer.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"自己写一个spring-boot-start","uid":"802c655d6d6544d494d9d5e09a52a6ba","slug":"自己写一个spring-boot-start","date":"2019-07-04T11:33:13.000Z","updated":"2022-03-03T15:49:41.563Z","comments":true,"path":"api/articles/自己写一个spring-boot-start.json","keywords":null,"cover":[],"text":" Spring Boot由众多Starter组成，随着版本的推移Starter家族成员也与日俱增。在传统Maven项目中通常将一些层、组件拆分为模块来管理， 以便相互依赖复用，在Spring Boot项目中我们则可以创建自定义Spring Boot Starter来达成该目的。 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"spring","slug":"spring","count":3,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":3,"path":"api/tags/spring.json"},{"name":"springboot","slug":"springboot","count":1,"path":"api/tags/springboot.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Mysql锁概念","uid":"d876370ed0a462e054a9f9f7d4c5e0de","slug":"Mysql锁概念","date":"2019-06-13T12:31:15.000Z","updated":"2022-03-03T15:50:36.095Z","comments":true,"path":"api/articles/Mysql锁概念.json","keywords":null,"cover":[],"text":"INNODB 存储引擎中的锁 类型InnoDB 实现了如下两种类型的行锁： 共享锁(S Lock)允许事务读取一行数据 排它锁(X Lock)允许事务更新或者删除一行数据 锁的兼容性如果一个事务请求的锁模式与当前的锁兼容， InnoDB 就将请求的锁授予该事务: 反之, 如果两者...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"mysql","slug":"mysql","count":3,"path":"api/categories/mysql.json"},{"name":"锁","slug":"mysql/锁","count":1,"path":"api/categories/mysql/锁.json"}],"tags":[{"name":"mysql","slug":"mysql","count":3,"path":"api/tags/mysql.json"},{"name":"锁","slug":"锁","count":1,"path":"api/tags/锁.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Mysql索引原理","uid":"ce52f41a783fc1c1eec924862c197938","slug":"Mysql索引原理","date":"2019-06-12T14:18:19.000Z","updated":"2022-03-03T15:51:13.983Z","comments":true,"path":"api/articles/Mysql索引原理.json","keywords":null,"cover":[],"text":"索引 在系统中，为了提高查询性能，这里 主要记录 InnoDB存储引擎的索引，InnoDB 支持一下几种常见的索引 B+Tree索引 全文索引 Hash索引 为什么要有索引？索引在MySQL中也叫做 键，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能非常关键，尤其是...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"mysql","slug":"mysql","count":3,"path":"api/categories/mysql.json"}],"tags":[{"name":"mysql","slug":"mysql","count":3,"path":"api/tags/mysql.json"},{"name":"索引","slug":"索引","count":1,"path":"api/tags/索引.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Tomcat源码导入-IntelijIdea","uid":"2702307c6aa4465d038db73bd559dfd1","slug":"Tomcat源码导入-IntelijIdea","date":"2019-06-06T06:18:45.000Z","updated":"2022-03-03T15:51:26.720Z","comments":true,"path":"api/articles/Tomcat源码导入-IntelijIdea.json","keywords":null,"cover":[],"text":" 最近有兴趣阅读一下 Tomcat 源码 先把准备工作做一下， 有时间在深入阅读。 嘻嘻maven tomcat idea 官网下载 Tomcat 源码包官网 我这里用到的 tomcat 版本是 8.5.41. 项目结构 新建一个 目录 tomcat8.5-src将源码包解压到该...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"tomcat","slug":"tomcat","count":1,"path":"api/categories/tomcat.json"}],"tags":[{"name":"maven","slug":"maven","count":2,"path":"api/tags/maven.json"},{"name":"tomcat","slug":"tomcat","count":1,"path":"api/tags/tomcat.json"},{"name":"idea","slug":"idea","count":1,"path":"api/tags/idea.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"mysql查询计划查看","uid":"d50659b13cff259d9728e80e6b8aee70","slug":"mysql查询计划查看","date":"2019-06-05T08:24:52.000Z","updated":"2022-03-03T15:50:13.675Z","comments":true,"path":"api/articles/mysql查询计划查看.json","keywords":null,"cover":[],"text":"MySql提供了EXPLAIN语法用来进行查询分析，在SQL语句前加一个”EXPLAIN”即可。比如我们要分析如下SQL语句： explain select * from table where table.id = 1 运行上面的sql语句后你会看到，下面的表头信息： idQu...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"mysql","slug":"mysql","count":3,"path":"api/categories/mysql.json"}],"tags":[{"name":"mysql","slug":"mysql","count":3,"path":"api/tags/mysql.json"},{"name":"查询计划","slug":"查询计划","count":1,"path":"api/tags/查询计划.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Spring-AOP详解","uid":"bfa33a5fe2e0aa639906339c30ac4485","slug":"Spring-AOP详解","date":"2019-06-04T06:51:48.000Z","updated":"2022-03-03T15:50:52.810Z","comments":true,"path":"api/articles/Spring-AOP详解.json","keywords":null,"cover":[],"text":"springDOC 将重复性的逻辑代码横切出来其实很容易(我们简单可认为就是封装成一个类就好了)，但我们要将这些被我们横切出来的逻辑代码融合到业务逻辑中，来完成和之前(没抽取前)一样的功能！这就是AOP首要解决的问题了！这样一来，我们就在写业务时只关心业务代码，而不用关心与业务无...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"spring","slug":"spring","count":3,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":3,"path":"api/tags/spring.json"},{"name":"aop","slug":"aop","count":1,"path":"api/tags/aop.json"},{"name":"动态代理","slug":"动态代理","count":1,"path":"api/tags/动态代理.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2019-04-28T10:07:13.000Z","updated":"2019-04-28T10:07:13.000Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":432,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Apache-AB性能测试工具","uid":"ff81db1204df3c00c93bb459f070d6f2","slug":"Apache-AB性能测试工具","date":"2019-04-28T10:03:21.000Z","updated":"2019-04-28T10:08:30.000Z","comments":true,"path":"api/articles/Apache-AB性能测试工具.json","keywords":null,"cover":null,"text":"ApacheAB 官方Doc Apache AB 性能测试工具，这是 apache 免费自带的 性能测试工具, 就在 apache bin目录下，他能模拟多个并发请求，主要用来测试你的 服务每秒能承受多少并发请求。 命令ab -n 3000 -c 3000 http:&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"apacheAB","slug":"apacheAB","count":1,"path":"api/tags/apacheAB.json"},{"name":"并发","slug":"并发","count":1,"path":"api/tags/并发.json"},{"name":"性能测试工具","slug":"性能测试工具","count":1,"path":"api/tags/性能测试工具.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Kafka 入门","uid":"937bc65e7fc0650a79730217f9c7b325","slug":"Kafka-入门","date":"2019-04-28T07:08:15.000Z","updated":"2022-03-03T15:51:22.323Z","comments":true,"path":"api/articles/Kafka-入门.json","keywords":null,"cover":[],"text":"英文文档 | 中文文档 Kafka 是由 LinkedIn 开发的一个分布式的消息系统，使用 Scala 编写，它以可水平扩展和高吞吐率而被广泛使用。 Mac 安装kafka# 会自动 安装会依赖zookeeper brew install kafka # 启动 zookeepe...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"kafka","slug":"kafka","count":4,"path":"api/categories/kafka.json"}],"tags":[{"name":"kafka","slug":"kafka","count":3,"path":"api/tags/kafka.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Spring Bean生命周期","uid":"be477fe08f671338b34bfe6576dd4bfb","slug":"Spring-Bean生命周期","date":"2019-04-16T15:02:12.000Z","updated":"2019-06-04T06:57:21.000Z","comments":true,"path":"api/articles/Spring-Bean生命周期.json","keywords":null,"cover":[],"text":" 本篇文章记录一下Spring中,BeanFactory 与 ApplicationContext 中 bean 的生命周期过程，参考网上资料,总结如下 BeanFactory 当调用者调用 getBean() 想容器请求一个bean时,如果容器注册了 Instantiation...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"spring","slug":"spring","count":3,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":3,"path":"api/tags/spring.json"},{"name":"bean生命周期","slug":"bean生命周期","count":1,"path":"api/tags/bean生命周期.json"},{"name":"ApplicationContext","slug":"ApplicationContext","count":1,"path":"api/tags/ApplicationContext.json"},{"name":"BeanFactory","slug":"BeanFactory","count":1,"path":"api/tags/BeanFactory.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"Hello-World-0","date":"2018-12-16T12:17:14.000Z","updated":"2019-04-16T08:48:41.000Z","comments":true,"path":"api/articles/Hello-World-0.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[{"name":"test","slug":"test","count":1,"path":"api/categories/test.json"}],"tags":[{"name":"test","slug":"test","count":4,"path":"api/tags/test.json"},{"name":"md","slug":"md","count":1,"path":"api/tags/md.json"}],"author":{"name":"majm","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"技术分享","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}],"categories":16,"tags":53,"word_count":"219k","post_count":49}