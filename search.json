[{"title":"Apache-AB性能测试工具","url":"//post/Apache-AB%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7.html","content":"<p><a href=\"https://httpd.apache.org/docs/2.4/programs/ab.html\">ApacheAB 官方Doc</a></p>\n<blockquote>\n<p>Apache AB 性能测试工具，这是 apache 免费自带的 性能测试工具, 就在 apache bin目录下，他能模拟多个并发请求，主要用来测试你的 服务每秒能承受多少并发请求。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ab -n 3000 -c 3000 http:&#x2F;&#x2F;www.test.com&#x2F;\n# -c 3000 每次发送3000 个请求\n# -n 3000 共3000 个请求\n\nab -t 60 -c 100 http:&#x2F;&#x2F;www.test.com&#x2F;\n# -t 60 在 60s内发送请求，每次发送 100 个请求\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"带参数的的请求\"><a href=\"#带参数的的请求\" class=\"headerlink\" title=\"带参数的的请求\"></a>带参数的的请求</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ab -t 60 -c 100 -T &quot;application&#x2F;x-www-form-urlencoded&quot; p p.txt http:&#x2F;&#x2F;www.test.com&#x2F;\n# application&#x2F;x-www-form-urlencoded (默认值)\n#  就是设置表单传输的编码,典型的post请求\n# multipart&#x2F;form-data\n#  用来指定传输数据的特殊类型的，主要就是我们上传的非文本的内容，比如图片、mp3,文件等等\n# text&#x2F;plain\n#  是纯文本传输的意思<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"发送-json-数据\"><a href=\"#发送-json-数据\" class=\"headerlink\" title=\"发送 json 数据\"></a>发送 json 数据</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">ab -n 100000 -c 400 -p tempPara.txt -T application&#x2F;json http:&#x2F;&#x2F;www.test.com&#x2F;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\"># tempPara.txt\n&#123;\"driverId\": 17,\"pageNo\": 1,\"pageSize\": 20,\"status\": 1&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"常用参数说明\"><a href=\"#常用参数说明\" class=\"headerlink\" title=\"常用参数说明\"></a>常用参数说明</h2><p><a href=\"https://httpd.apache.org/docs/2.4/programs/ab.html\">参数说明</a></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">-A auth-username:password\n# 对服务器提供BASIC认证信任。 \n# 用户名和密码由一个:隔开，并以base64编码形式发送。 无论服务器是否需要(即, 是否发送了401认证需求代码)，此字符串都会被发送。\n\n-c concurrency\n#  一次产生的请求个数。默认是一次一个。\n\n-n\n# 一共请求多少次\n\n-t timelimit \n# 测试所进行的最大秒数。\n# 其内部隐含值是-n 50000。 它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。\n\n-T \n# content-type POST数据所使用的Content-type头信息。\n\n-p \n# POST-file包含了需要POST的数据的文件.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"结果解析\"><a href=\"#结果解析\" class=\"headerlink\" title=\"结果解析\"></a>结果解析</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">This is ApacheBench, Version 2.3\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http:&#x2F;&#x2F;www.zeustech.net&#x2F;\nLicensed to The Apache Software Foundation, http:&#x2F;&#x2F;www.apache.org&#x2F;\n\nBenchmarking 192.168.80.157 (be patient)\nCompleted 400 requests\nCompleted 800 requests\nCompleted 1200 requests\nCompleted 1600 requests\nCompleted 2000 requests\nCompleted 2400 requests\nCompleted 2800 requests\nCompleted 3200 requests\nCompleted 3600 requests\nCompleted 4000 requests\nFinished 4000 requests\n\nServer Software: Apache&#x2F;2.2.15\nServer Hostname: 192.168.80.157\nServer Port: 80\n\nDocument Path: &#x2F;phpinfo.php\n#测试的页面\nDocument Length: 50797 bytes\n#页面大小\n\nConcurrency Level: 1000\n#测试的并发数\nTime taken for tests: 11.846 seconds\n#整个测试持续的时间\nComplete requests: 4000\n#完成的请求数量\nFailed requests: 0\n#失败的请求数量\nWrite errors: 0\nTotal transferred: 204586997 bytes\n#整个过程中的网络传输量\nHTML transferred: 203479961 bytes\n#整个过程中的HTML内容传输量\nRequests per second: 337.67 [#&#x2F;sec] (mean)\n#最重要的指标之一，相当于LR中的每秒事务数，后面括号中的mean表示这是一个平均值\nTime per request: 2961.449 [ms] (mean)\n#最重要的指标之二，相当于LR中的平均事务响应时间，后面括号中的mean表示这是一个平均值\nTime per request: 2.961 [ms] (mean, across all concurrent requests)\n#每个连接请求实际运行时间的平均值\nTransfer rate: 16866.07 [Kbytes&#x2F;sec] received\n#平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题\nConnection Times (ms)\nmin mean[+&#x2F;-sd] median max\nConnect: 0 483 1773.5 11 9052\nProcessing: 2 556 1459.1 255 11763\nWaiting: 1 515 1459.8 220 11756\nTotal: 139 1039 2296.6 275 11843\n#网络上消耗的时间的分解，各项数据的具体算法还不是很清楚\n\nPercentage of the requests served within a certain time (ms)\n50% 275\n66% 298\n75% 328\n80% 373\n90% 3260\n95% 9075\n98% 9267\n99% 11713\n100% 11843 (longest request)\n#整个场景中所有请求的响应情况。在场景中每个请求都有一个响应时间，其中50％的用户响应时间小于275毫秒，66％的用户响应时间小于298毫秒，最大的响应时间小于11843毫秒。对于并发请求，cpu实际上并不是同时处理的，而是按照每个请求获得的时间片逐个轮转处理的，所以基本上第一个Time per request时间约等于第二个Time per request时间乘以并发请求数。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","tags":["apacheAB","并发","性能测试工具"]},{"title":"Docker概念","url":"//post/Docker%E6%A6%82%E5%BF%B5.html","content":"<blockquote>\n<p>了解一下Docker 概念，如今容器技术在互联网行业发展的已经相当成熟，<br>springBoot 微服务 结合 k8s 部署线上服务，安全 高效，充分利用机器资源</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"✨镜像\"><a href=\"#✨镜像\" class=\"headerlink\" title=\"✨镜像\"></a>✨镜像</h2><p>镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p>\n<p>镜像使用分层存储</p>\n<h2 id=\"✨容器\"><a href=\"#✨容器\" class=\"headerlink\" title=\"✨容器\"></a>✨容器</h2><p>容器是镜像的运行时实例 - 实际执行时镜像会在内存中变成什么。默认情况下，它完全独立于主机环境运行，仅在配置为访问主机文件和端口的情况下才执行此操作。</p>\n<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全，占用的内存不超过任何其他可执行文件。</p>\n<p>镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。</p>\n<p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>容器可以被创建、启动、停止、删除、暂停等</p>\n<p><img src=\"/post/Docker%E6%A6%82%E5%BF%B5/Container.png\" alt=\"Container\"><br><img src=\"/post/Docker%E6%A6%82%E5%BF%B5/VM.png\" alt=\"VM\"></p>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><p>在分布式应用中，应用的不同部分称为“服务”。例如，假设有一个视频共享网站，它可能提供用于在数据库中存储应用程序数据的服务、用于在用户上传一些内容后在后台进行视频转码的服务、用于前端的服务等。</p>\n<p>服务实际上是“生产中的容器”。一项服务仅运行一个镜像，但它会编制镜像的运行方式 - 它应使用的端口、容器的多少个从节点应运行才能使服务的容量满足其需求等。扩展服务将更改运行该软件的容器实例数，并将多个计算资源分配给进程中的服务。</p>\n<h2 id=\"Swarm\"><a href=\"#Swarm\" class=\"headerlink\" title=\"Swarm\"></a>Swarm</h2><p>swarm 是一组运行 Docker 并且已加入集群中的机器.执行此操作后,可以继续运行已使用的 Docker 命令,但现在它们在集群上由 swarm 管理节点执行。<br>swarm 中的机器可以为物理或虚拟机。加入 swarm 后，可以将它们称为节点。</p>\n<h2 id=\"✨镜像仓库-Repository\"><a href=\"#✨镜像仓库-Repository\" class=\"headerlink\" title=\"✨镜像仓库  Repository\"></a>✨镜像仓库  Repository</h2><p>镜像仓库是一组 Docker 镜像。可以通过将<strong>镜像仓库</strong>推送到<strong>镜像库</strong>服务器来对其进行共享。</p>\n<p>通常,一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p>\n<h2 id=\"✨镜像库-Docker-Registy\"><a href=\"#✨镜像库-Docker-Registy\" class=\"headerlink\" title=\"✨镜像库 Docker Registy\"></a>✨镜像库 Docker Registy</h2><p>一个镜像仓库中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。</p>\n<p><strong>镜像库</strong>是一项包含<strong>镜像仓库</strong>的托管服务</p>\n<p><a href=\"https://hub.docker.com/\">Docker Hub</a></p>\n<h2 id=\"分层存储\"><a href=\"#分层存储\" class=\"headerlink\" title=\"分层存储\"></a>分层存储</h2><p>因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>\n<p>链接: <a href=\"https://docs.docker-cn.com/glossary/?term=%E6%A6%82%E5%BF%B5\">概念</a></p>\n","categories":["docker"],"tags":["docker"]},{"title":"Go Context 使用场景","url":"//post/Go-Context-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html","content":"<h2 id=\"context-使用场景\"><a href=\"#context-使用场景\" class=\"headerlink\" title=\"context 使用场景\"></a>context 使用场景</h2><h3 id=\"1-超时控制\"><a href=\"#1-超时控制\" class=\"headerlink\" title=\"1 超时控制\"></a>1 超时控制</h3><p>实际使用中, context 经常和 select 关键字一起使用. 用于监听  context 结束 取消.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">testTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ttimerCtx<span class=\"token punctuation\">,</span> cancelFunc <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">cancelFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>timerCtx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">processLogic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tch <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//process</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上下文取消 or 超时.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"process log  succeess.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">processLogic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>其中 timerContext 是可以 在 上下文链路中传递, 当上游配置 timeout， 调用 下游 服务时, 如果 超时 , 可以通过 context 级联取消下游服务的处理, 避免下游服务占用资源.<br>(已经超时了, 还在处理业务)</p>\n<h3 id=\"2-Request-Scope-传递共享数据\"><a href=\"#2-Request-Scope-传递共享数据\" class=\"headerlink\" title=\"2.  Request Scope 传递共享数据\"></a>2.  Request Scope 传递共享数据</h3><p>比如 在 http 请求中, 传递 traceID, userID…</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> requestKeyType <span class=\"token builtin\">string</span>\n\n<span class=\"token comment\">// 避免冲突. </span>\n<span class=\"token keyword\">var</span> requestIdKey <span class=\"token operator\">=</span> <span class=\"token function\">requestKeyType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"requestID\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\th <span class=\"token operator\">:=</span> <span class=\"token function\">WithRequestID</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">)</span>\n\terr <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithRequestID</span><span class=\"token punctuation\">(</span>next http<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 从header 中提取 requestID</span>\n\t\t\trequestID <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Request-ID\"</span><span class=\"token punctuation\">)</span>\n\t\t\tvalCtx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestIdKey<span class=\"token punctuation\">,</span> requestID<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">// 构建 新的请求</span>\n\t\t\tr <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">WithContext</span><span class=\"token punctuation\">(</span>valCtx<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">//调用 http处理函数</span>\n\t\t\tnext<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>writer http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> request <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\trequestID<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>requestIdKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>requestID<span class=\"token punctuation\">)</span>\n\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>requestID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"3-tracing-组件中-carrier-SpanContext\"><a href=\"#3-tracing-组件中-carrier-SpanContext\" class=\"headerlink\" title=\"3. tracing 组件中 carrier  SpanContext\"></a>3. tracing 组件中 carrier  SpanContext</h3><h2 id=\"context-注意事项\"><a href=\"#context-注意事项\" class=\"headerlink\" title=\"context 注意事项\"></a>context 注意事项</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">- 对第三方调用要传入 context, 用于控制远程调用\n- 不要将上下文存储在结构类型中,尽可能的作为函数第一位形参传入.\n- 函数调用链必须传播上下文,实现完整链路上的控制\n- context 的继承和派生, 保证父、子级 context 的联动\n- 不传递 nil context,不确定的 context 应当使用 TODO\n- context 仅传递必要的值, 不要让可选参数揉在一起\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-对第三方调用要传入-context-用于控制远程调用\"><a href=\"#1-对第三方调用要传入-context-用于控制远程调用\" class=\"headerlink\" title=\"1.  对第三方调用要传入 context, 用于控制远程调用\"></a>1.  对第三方调用要传入 context, 用于控制远程调用</h3><p>在 golang 中 对 context 的 使用 已经是 约定俗成的规定, 因此 使用第三方 服务的时候, 要传入 context.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">httpTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\treq<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://google.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\ttimerCtx<span class=\"token punctuation\">,</span> cancelFunc <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">cancelFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\treq <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">WithContext</span><span class=\"token punctuation\">(</span>timerCtx<span class=\"token punctuation\">)</span>\n\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>DefaultClient<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.DefaultClient.Do error, err = %v \\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样子由于第三方开源库已经实现了根据 context 的超时控制,那么当你所传入的时间到达时，将会中断调用.<br>若你发现第三方开源库没支持 context, 那就 看看 是否要使用,否则出问题 没有   简单的控制手段.</p>\n<h3 id=\"2-不要将上下文存储在结构类型中-尽可能的作为函数第一位形参传入\"><a href=\"#2-不要将上下文存储在结构类型中-尽可能的作为函数第一位形参传入\" class=\"headerlink\" title=\"2. 不要将上下文存储在结构类型中,尽可能的作为函数第一位形参传入.\"></a>2. 不要将上下文存储在结构类型中,尽可能的作为函数第一位形参传入.</h3><p>在 golang 中, 所有的第三方库, 开源代码. 清一色的 会将context 作为方法的第一个参数. 并且命名为  <code>ctx</code>.<br>标准要求: context 作为方法的第一个参数,并且命名为 <code>ctx</code></p>\n<p>当然也有极少数情况 会将 context 放在结构体里面,基本常见于:</p>\n<ul>\n<li>DDD 架构</li>\n<li>底层基础库</li>\n</ul>\n<p>每个请求都是独立的,context也就不一样,想清楚业务场景最重要.否则 遵循 go基本规范就好.</p>\n<h3 id=\"3-Trace-函数调用链必须传播上下文-实现完整链路上的控制\"><a href=\"#3-Trace-函数调用链必须传播上下文-实现完整链路上的控制\" class=\"headerlink\" title=\"3. Trace 函数调用链必须传播上下文,实现完整链路上的控制\"></a>3. Trace 函数调用链必须传播上下文,实现完整链路上的控制</h3><p>把 context 作为方法第一个参数,本质是为了 传播 context, 完成调用链路的跟踪和 控制.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t\n\t<span class=\"token string\">\"github.com/jmoiron/sqlx\"</span>\n\t<span class=\"token string\">\"github.com/opentracing/opentracing-go\"</span>\n\t<span class=\"token string\">\"github.com/pkg/errors\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">List</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> db <span class=\"token operator\">*</span>sqlx<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tspan<span class=\"token punctuation\">,</span> ctx <span class=\"token operator\">:=</span> opentracing<span class=\"token punctuation\">.</span><span class=\"token function\">StartSpanFromContext</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"internal.user.List\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> span<span class=\"token punctuation\">.</span><span class=\"token function\">Finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tusers <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>User<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">const</span> q <span class=\"token operator\">=</span> <span class=\"token string\">`SELECT * FROM users`</span>\n\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">SelectContext</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>users<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Wrap</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token string\">\"selecting users\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> users<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-context-的继承和派生-保证父、子级-context-的联动\"><a href=\"#4-context-的继承和派生-保证父、子级-context-的联动\" class=\"headerlink\" title=\"4. context 的继承和派生, 保证父、子级 context 的联动\"></a>4. context 的继承和派生, 保证父、子级 context 的联动</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">ctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nctx1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\nctx2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nctx3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\nctx4 <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\nctx5 <span class=\"token operator\">:=</span> conetext<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220903095430.png\"></p>\n<p>context Value的查找是 回溯树的方式.(由下至上)<br>cancel 一个节点, 会 cancel其所有子节点.(由上至下)</p>\n<h3 id=\"5-不传递-nil-context-不确定的-context-应当使用-TODO\"><a href=\"#5-不传递-nil-context-不确定的-context-应当使用-TODO\" class=\"headerlink\" title=\"5. 不传递 nil context,不确定的 context 应当使用 TODO\"></a>5. 不传递 nil context,不确定的 context 应当使用 TODO</h3><p>在实际使用 context中,对于不知道使用什么类型的 context的时候,<br>使用 <code>context.TODO()</code>  代替，直到了解清楚 context 的实际用途, 在进行替换.</p>\n<p>$$</p>\n<h3 id=\"6-context-仅传递必要的值-不要让可选参数揉在一起\"><a href=\"#6-context-仅传递必要的值-不要让可选参数揉在一起\" class=\"headerlink\" title=\"6. context 仅传递必要的值, 不要让可选参数揉在一起\"></a>6. context 仅传递必要的值, 不要让可选参数揉在一起</h3><p>我们在使用 context 作为上下文时，经常有信息传递的诉求.<br>像是在 gRPC 中就会有 metadata 的概念, 而在 gin 中就会自己封装 context 作为参数管理.</p>\n<hr>\n<p>[参考]<br><a href=\"https://eddycjy.com/posts/go/real-context/\">分享 Go 使用 Context 的正式姿势</a><br><a href=\"https://two.github.io/2019/11/25/go-context/\">Contex 的作用</a><br><a href=\"https://go.dev/blog/context\">Go Concurrency Patterns: Context</a></p>\n","tags":["golang","context"]},{"title":"Go-Test-Convey使用","url":"//post/Go-Test-Convey%E4%BD%BF%E7%94%A8.html","content":"<p><a href=\"https://github.com/smartystreets/goconvey\">Convey</a><br><a href=\"https://github.com/smartystreets/goconvey/wiki\">Wiki</a></p>\n<p>Feature:</p>\n<ul>\n<li>直接与  <code>go test</code> 集成</li>\n<li>全自动的 WEBUI(与 go test 一起工作)</li>\n<li>大量的回归测试</li>\n<li>展示测试覆盖率</li>\n<li>可读的,彩色控制台输出(可以被其他人理解)</li>\n<li>测试代码自动生成</li>\n<li>桌面通知(optional)</li>\n<li>立即打开问题行.</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"1-Why-goconvey\"><a href=\"#1-Why-goconvey\" class=\"headerlink\" title=\"1. Why goconvey\"></a>1. Why goconvey</h2><p>Goconvey 提供了人性化的断言使用方式, 优雅的写出测试代码, 同时能够在终端输出彩色的测试结果,还支持WebUI查看</p>\n<h2 id=\"2-断言使用\"><a href=\"#2-断言使用\" class=\"headerlink\" title=\"2. 断言使用\"></a>2. 断言使用</h2><h3 id=\"2-1-普通判等\"><a href=\"#2-1-普通判等\" class=\"headerlink\" title=\"2.1. 普通判等\"></a>2.1. 普通判等</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token function\">So</span><span class=\"token punctuation\">(</span>thing1<span class=\"token punctuation\">,</span> ShouldEqual<span class=\"token punctuation\">,</span> thing2<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>thing1<span class=\"token punctuation\">,</span> ShouldNotEqual<span class=\"token punctuation\">,</span> thing2<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>thing1<span class=\"token punctuation\">,</span> ShouldResemble<span class=\"token punctuation\">,</span> thing2<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// a deep equals for arrays, slices, maps, and structs</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>thing1<span class=\"token punctuation\">,</span> ShouldNotResemble<span class=\"token punctuation\">,</span> thing2<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>thing1<span class=\"token punctuation\">,</span> ShouldPointTo<span class=\"token punctuation\">,</span> thing2<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>thing1<span class=\"token punctuation\">,</span> ShouldNotPointTo<span class=\"token punctuation\">,</span> thing2<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>thing1<span class=\"token punctuation\">,</span> ShouldBeNil<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>thing1<span class=\"token punctuation\">,</span> ShouldNotBeNil<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>thing1<span class=\"token punctuation\">,</span> ShouldBeTrue<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>thing1<span class=\"token punctuation\">,</span> ShouldBeFalse<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>thing1<span class=\"token punctuation\">,</span> ShouldBeZeroValue<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"2-2-数值类型比较\"><a href=\"#2-2-数值类型比较\" class=\"headerlink\" title=\"2.2. 数值类型比较\"></a>2.2. 数值类型比较</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ShouldBeGreaterThan<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ShouldBeGreaterThanOrEqualTo<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ShouldBeLessThan<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ShouldBeLessThanOrEqualTo<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> ShouldBeBetween<span class=\"token punctuation\">,</span> <span class=\"token number\">.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> ShouldNotBeBetween<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> ShouldBeBetweenOrEqual<span class=\"token punctuation\">,</span> <span class=\"token number\">.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> ShouldNotBeBetweenOrEqual<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> ShouldAlmostEqual<span class=\"token punctuation\">,</span> <span class=\"token number\">0.99999999</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.0001</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// tolerance is optional; default 0.0000000001</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> ShouldNotAlmostEqual<span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.0001</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"2-3-集合类型\"><a href=\"#2-3-集合类型\" class=\"headerlink\" title=\"2.3. 集合类型\"></a>2.3. 集合类型</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ShouldContain<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ShouldNotContain<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> ShouldBeIn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> ShouldNotBeIn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ShouldBeEmpty<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ShouldNotBeEmpty<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ShouldContainKey<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ShouldNotContainKey<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ShouldNotBeEmpty<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ShouldBeEmpty<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ShouldHaveLength<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// supports map, slice, chan, and string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"2-4-字符串\"><a href=\"#2-4-字符串\" class=\"headerlink\" title=\"2.4. 字符串\"></a>2.4. 字符串</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asdf\"</span><span class=\"token punctuation\">,</span> ShouldStartWith<span class=\"token punctuation\">,</span> <span class=\"token string\">\"as\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asdf\"</span><span class=\"token punctuation\">,</span> ShouldNotStartWith<span class=\"token punctuation\">,</span> <span class=\"token string\">\"df\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asdf\"</span><span class=\"token punctuation\">,</span> ShouldEndWith<span class=\"token punctuation\">,</span> <span class=\"token string\">\"df\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asdf\"</span><span class=\"token punctuation\">,</span> ShouldNotEndWith<span class=\"token punctuation\">,</span> <span class=\"token string\">\"df\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asdf\"</span><span class=\"token punctuation\">,</span> ShouldContainSubstring<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sd\"</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// optional 'expected occurences' arguments?</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asdf\"</span><span class=\"token punctuation\">,</span> ShouldNotContainSubstring<span class=\"token punctuation\">,</span> <span class=\"token string\">\"er\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"adsf\"</span><span class=\"token punctuation\">,</span> ShouldBeBlank<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asdf\"</span><span class=\"token punctuation\">,</span> ShouldNotBeBlank<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-5-panic\"><a href=\"#2-5-panic\" class=\"headerlink\" title=\"2.5. panic\"></a>2.5. panic</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldPanic<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldNotPanic<span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldPanicWith<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// or errors.New(\"something\")</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldNotPanicWith<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// or errors.New(\"something\")</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-6-类型检查\"><a href=\"#2-6-类型检查\" class=\"headerlink\" title=\"2.6. 类型检查\"></a>2.6. 类型检查</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ShouldHaveSameTypeAs<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ShouldNotHaveSameTypeAs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"asdf\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"2-7-时间类型\"><a href=\"#2-7-时间类型\" class=\"headerlink\" title=\"2.7. 时间类型\"></a>2.7. 时间类型</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token function\">So</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldHappenBefore<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldHappenOnOrBefore<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldHappenAfter<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldHappenOnOrAfter<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldHappenBetween<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldHappenOnOrBetween<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldNotHappenOnOrBetween<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldHappenWithin<span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">So</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldNotHappenWithin<span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"3-Convey-使用\"><a href=\"#3-Convey-使用\" class=\"headerlink\" title=\"3. Convey 使用\"></a>3. Convey 使用</h2><h3 id=\"3-1\"><a href=\"#3-1\" class=\"headerlink\" title=\"3.1\"></a>3.1</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token function\">StringSliceEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> a <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> v <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestStringSliceEqual</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token function\">Convey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestStringSliceEqual should return true when a != nil  &amp;&amp; b != nil\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\ta <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"convey\"</span><span class=\"token punctuation\">&#125;</span>\n\t\tb <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"convey1\"</span><span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token function\">StringSliceEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldBeTrue<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-2-Convey-语句的嵌套\"><a href=\"#3-2-Convey-语句的嵌套\" class=\"headerlink\" title=\"3.2 Convey 语句的嵌套\"></a>3.2 Convey 语句的嵌套</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestStringSliceEqual</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token function\">Convey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestStringSliceEqual\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">Convey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return true when a != nil  &amp;&amp; b != nil\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ta <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"goconvey\"</span><span class=\"token punctuation\">&#125;</span>\n\t\t\tb <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"goconvey\"</span><span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token function\">StringSliceEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldBeTrue<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token function\">Convey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return true when a ＝= nil  &amp;&amp; b ＝= nil\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token function\">StringSliceEqual</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldBeTrue<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token function\">Convey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return false when a ＝= nil  &amp;&amp; b != nil\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ta <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t\t\tb <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token function\">StringSliceEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldBeFalse<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token function\">Convey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return false when a != nil  &amp;&amp; b != nil\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ta <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">&#125;</span>\n\t\t\tb <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"goconvey\"</span><span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token function\">So</span><span class=\"token punctuation\">(</span><span class=\"token function\">StringSliceEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ShouldBeFalse<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>只有最外层的  Convey 需要传入 <code>*testing.T</code></li>\n</ul>\n<h2 id=\"4-最佳实践\"><a href=\"#4-最佳实践\" class=\"headerlink\" title=\"4. 最佳实践\"></a>4. 最佳实践</h2><ol>\n<li><code>import goconvey</code>包时，前面加点号”.”，以减少冗余的代码.凡是在测试代码中看到Convey和So两个方法,肯定是convey包的,不要在产品代码中定义相同的函数名</li>\n<li>测试函数的名字必须以Test开头，而且参数类型必须为<code>*testing.T</code></li>\n<li>每个测试用例必须使用Convey函数包裹起来</li>\n</ol>\n<ul>\n<li>它的第一个参数为string类型的测试描述</li>\n<li>第二个参数为测试函数的入参(类型为<code>*testing.T</code>)</li>\n<li>第三个参数为不接收任何参数也不返回任何值的函数(习惯使用闭包)</li>\n</ul>\n<ol start=\"4\">\n<li>Convey函数的第三个参数闭包的实现中通过So函数完成断言判断,</li>\n</ol>\n<ul>\n<li>第一个参数为实际值</li>\n<li>第二个参数为断言函数变量</li>\n<li>第三个参数或者没有(当第二个参数为类ShouldBeTrue形式的函数变量)或者有(当第二个函数为类ShouldEqual形式的函数变量)</li>\n</ul>\n<ol start=\"5\">\n<li>使用嵌套的形式包裹多个测试用例, 输出结果看起来优雅</li>\n</ol>\n<h2 id=\"5-WebUI\"><a href=\"#5-WebUI\" class=\"headerlink\" title=\"5.  WebUI\"></a>5.  WebUI</h2><p>在 test文件所在目录下执行  <code>$GOBIN/goconvey</code> 命令</p>\n<p>之后可以通过 <code>localhost:8080</code> 查看webUI界面</p>\n<p><img src=\"http://d79i1fxsrar4t.cloudfront.net/goconvey.co/gc-1-dark.png\"></p>\n<p>[参考]</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/e3b2b1194830\">GoConvey框架使用指南</a></li>\n<li><a href=\"https://www.liwenzhou.com/posts/Go/golang-unit-test-5/\">Go单测从零到溜系列5—goconvey的使用</a></li>\n</ul>\n","categories":["golang"],"tags":["golang","test","convey"]},{"title":"Go-Test-Gomonkey使用","url":"//post/Go-Test-Gomonkey%E4%BD%BF%E7%94%A8.html","content":"<p>golang的单测, 有一些约定, 例如文件名是  xxx.go, 测试文件名必须是 xxx_test.go, 且测试函数的方法名 都是以 <code>Test</code>开头, 使用<code>go test</code> 命令, 有时发现mock不住,一般都是内联(简短)函数mock失败,可以执行的时候加上编译条件禁止内联 <code>-gcflags=all=-l</code>.</p>\n<p>Feature:</p>\n<ul>\n<li>support a patch for a <strong>function</strong></li>\n<li>support a patch for a <strong>public member method</strong></li>\n<li>support a patch for a <strong>private member method</strong></li>\n<li>support a patch for a <strong>interface</strong></li>\n<li>support a patch for a <strong>function variable</strong></li>\n<li>support a patch for a <strong>global variable</strong></li>\n<li>support patches of a <strong>specified sequence for a function</strong></li>\n<li>support patches of a <strong>specified sequence for a member method</strong></li>\n<li>support patches of a <strong>specified sequence for a interface</strong></li>\n<li>support patches of a <strong>specified sequence for a function variable</strong></li>\n</ul>\n<h2 id=\"gomonkey-使用\"><a href=\"#gomonkey-使用\" class=\"headerlink\" title=\"gomonkey 使用\"></a>gomonkey 使用</h2><p><a href=\"https://github.com/agiledragon/gomonkey\">github</a></p>\n<p>gomonkey 可以为函数打桩,做数据mock, 有如下功能:</p>\n<ol>\n<li><strong>为函数打桩</strong></li>\n<li><strong>为成员方法打桩</strong></li>\n<li><strong>为全局变量打桩</strong></li>\n<li><strong>为函数变量打桩</strong></li>\n<li><strong>为函数打一个特定的桩序列</strong></li>\n<li>为成员方法打一个特定桩序列</li>\n<li>为函数变量打一个特定的桩序列</li>\n</ol>\n<h3 id=\"1-为函数打桩\"><a href=\"#1-为函数打桩\" class=\"headerlink\" title=\"1. 为函数打桩\"></a>1. 为函数打桩</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// @param target: 被mock的函数</span>\n<span class=\"token comment\">// @param double: 桩函数定义</span>\n<span class=\"token comment\">// @return Patches: 测试完成后,通过patches调用 Reset() 删除桩</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyFunc</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFunc</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p><strong>Demo</strong>: 使用 gomonkey.ApplyFunc mock <code>netWorkFunc</code> 函数</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">logicFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tsum<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">netWorkFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">netWorkFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\terrmsg <span class=\"token operator\">:=</span> <span class=\"token string\">\"a&lt;0 &amp;&amp; b&lt;0\"</span> <span class=\"token comment\">//gomonkey有bug，函数一定要有栈分配变量，不然mock不住</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\"</span><span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestDemo</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFunc</span><span class=\"token punctuation\">(</span>netWorkFunc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">99999999</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// out:  99999999</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">logicFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-为成员方法打桩\"><a href=\"#2-为成员方法打桩\" class=\"headerlink\" title=\"2.  为成员方法打桩\"></a>2.  为成员方法打桩</h3><p>method 与 Func 不同, method 属于类型的一部分, Func 属于包的一部分, 在函数地址分配的方式有所不同,因此不能直接去 <code>ApplyFunc</code> 去 mock, 需要使用 <code>ApplyMethod</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// @param target      被mock类型  </span>\n<span class=\"token comment\">// @param methodName  方法名</span>\n<span class=\"token comment\">// @param double      桩函数定义</span>\n<span class=\"token comment\">// @return </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyMethod</span><span class=\"token punctuation\">(</span>target reflect<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> methodName <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> double <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyMethod</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">,</span> double<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li><ol>\n<li>无法为 unexported 方法打桩</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>类型为 T的 method只包含recever为 T 的method, 类型为<code>*T</code> 的包含receiver 为 T | <code>*T</code> 的</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>写桩函数定义时,要把receiver写进去.</li>\n</ol>\n</li>\n</ul>\n<p><strong>Demo</strong>:  </p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">type</span> MyType <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>mt <span class=\"token operator\">*</span>MyType<span class=\"token punctuation\">)</span> <span class=\"token function\">logicFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tsum<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mt<span class=\"token punctuation\">.</span><span class=\"token function\">NetWorkFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>mt <span class=\"token operator\">*</span>MyType<span class=\"token punctuation\">)</span> <span class=\"token function\">NetWorkFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\terrmsg <span class=\"token operator\">:=</span> <span class=\"token string\">\"a&lt;0 &amp;&amp; b&lt;0\"</span> <span class=\"token comment\">//gomonkey有bug，函数一定要有栈分配变量，不然mock不住</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\"</span><span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token comment\">// test case</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Test_ApplyMethod</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">var</span> m <span class=\"token operator\">*</span>MyType\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyMethod</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NetWorkFunc\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> <span class=\"token operator\">*</span>MyType<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">99999999</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tres<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">logicFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token number\">99999999</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"3-为全局变量打桩\"><a href=\"#3-为全局变量打桩\" class=\"headerlink\" title=\"3. 为全局变量打桩\"></a>3. 为全局变量打桩</h3><p><strong>函数签名</strong>:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// @param target : 全局变量地址</span>\n<span class=\"token comment\">// @param double : 全局变量的桩</span>\n<span class=\"token comment\">// @retrun Patches</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyGlobalVar</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyGlobalVar</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tnum <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\tmat <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Test_ApplyGlobalVar</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyGlobalVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\n\n\tpatches2 <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyGlobalVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches2<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h3 id=\"4-为函数变量打桩\"><a href=\"#4-为函数变量打桩\" class=\"headerlink\" title=\"4. 为函数变量打桩\"></a>4. 为函数变量打桩</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// @param target 目标函数变量地址</span>\n<span class=\"token comment\">// @param double 目标函数的桩</span>\n<span class=\"token comment\">// @return patches </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyFuncVar</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncVar</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> double<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>Demo</strong>: mock 一个函数变量的行为</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> Marshal <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Test_ApplyFuncVar</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tstr <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello world.\"</span>\n\n\tgomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Marshal<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n\tbytes<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n<h3 id=\"5-为函数打一个特定的桩序列\"><a href=\"#5-为函数打一个特定的桩序列\" class=\"headerlink\" title=\"5. 为函数打一个特定的桩序列\"></a>5. 为函数打一个特定的桩序列</h3><p>有时,我们需要多次调用同一个函数,且需要有不同的返回值, 且保持顺序, 如是果是你要怎么实实现?</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// @param target  目标函数</span>\n<span class=\"token comment\">// @param outputs 返回值序列</span>\n<span class=\"token comment\">// @return patches </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyFuncSeq</span><span class=\"token punctuation\">(</span>target <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> outputs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>OutputCell<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncSeq</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>Demo</strong>:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token function\">ReadLeaf</span><span class=\"token punctuation\">(</span>value <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s:%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestApplyFuncSeq</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tinfo1 <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello world.\"</span>\n\tinfo2 <span class=\"token operator\">:=</span> <span class=\"token string\">\"majm.\"</span>\n\tinfo3 <span class=\"token operator\">:=</span> <span class=\"token string\">\"nancy.\"</span>\n\n    <span class=\"token comment\">// default time is 1 </span>\n\toutputCells <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>gomonkey<span class=\"token punctuation\">.</span>OutputCell<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncSeq</span><span class=\"token punctuation\">(</span>ReadLeaf<span class=\"token punctuation\">,</span> outputCells<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tresult1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">ReadLeaf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info1<span class=\"token punctuation\">,</span> result1<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tresult2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">ReadLeaf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info2<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tresult3<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">ReadLeaf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info3<span class=\"token punctuation\">,</span> result3<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Params <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> OutputCell <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tValues Params\n\tTimes  <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Params: []interface{}: 返回结果<br>Times: 出现的次数</p>\n<ul>\n<li>如果 outputs + times 声明了 N次,当调用超过N次后悔报错.</li>\n<li>Times 默认是 1 次</li>\n</ul>\n<h3 id=\"6-为成员方法打一个特定桩序列\"><a href=\"#6-为成员方法打一个特定桩序列\" class=\"headerlink\" title=\"6. 为成员方法打一个特定桩序列\"></a>6. 为成员方法打一个特定桩序列</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// @param target    目标类型</span>\n<span class=\"token comment\">// @param methodName 目标类型方法</span>\n<span class=\"token comment\">// @param outputs    返回值序列</span>\n<span class=\"token comment\">// @return  patches</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyMethodSeq</span><span class=\"token punctuation\">(</span>target reflect<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> methodName <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> outputs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>OutputCell<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyMethodSeq</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p><strong>Demo</strong>:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">type</span> Etcd <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>Etcd<span class=\"token punctuation\">)</span> <span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\toutput <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s, %s!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Etcd\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> output<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Test_ApplyMethodSeq</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tinfo1 <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello world.\"</span>\n\tinfo2 <span class=\"token operator\">:=</span> <span class=\"token string\">\"majm.\"</span>\n\tinfo3 <span class=\"token operator\">:=</span> <span class=\"token string\">\"nancy.\"</span>\n\n\t<span class=\"token keyword\">var</span> e <span class=\"token operator\">*</span>Etcd\n\toutputs <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>gomonkey<span class=\"token punctuation\">.</span>OutputCell<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyMethodSeq</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Retrieve\"</span><span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tresult1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url1\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info1<span class=\"token punctuation\">,</span> result1<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tresult2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url2\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info2<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tresult3<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url3\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> info3<span class=\"token punctuation\">,</span> result3<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"7-为函数变量打一个特定的桩序列\"><a href=\"#7-为函数变量打一个特定的桩序列\" class=\"headerlink\" title=\"7. 为函数变量打一个特定的桩序列\"></a>7. 为函数变量打一个特定的桩序列</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// @param:  target  目标函数变量地址</span>\n<span class=\"token comment\">// @param:  outputs 返回结果序列</span>\n<span class=\"token comment\">// @return: patches</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ApplyFuncVarSeq</span><span class=\"token punctuation\">(</span>target <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> outputs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>OutputCell<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Patches <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncVarSeq</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>Demo</strong>:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Test_ApplyFuncVarSeq</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tinfo1 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world.\"</span><span class=\"token punctuation\">)</span>\n\tinfo2 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"majm.\"</span><span class=\"token punctuation\">)</span>\n\tinfo3 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nancy.\"</span><span class=\"token punctuation\">)</span>\n\n\toutputCells <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>gomonkey<span class=\"token punctuation\">.</span>OutputCell<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>Values<span class=\"token punctuation\">:</span> gomonkey<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">&#123;</span>info3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tpatches <span class=\"token operator\">:=</span> gomonkey<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyFuncVarSeq</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Marshal<span class=\"token punctuation\">,</span> outputCells<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> patches<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tresult1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> result1<span class=\"token punctuation\">,</span> info1<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\n\tresult2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">,</span> info2<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\n\tresult3<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> result3<span class=\"token punctuation\">,</span> info3<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n","categories":["golang"],"tags":["golang","test","gomonkey"]},{"title":"Go-Test-gomock使用","url":"//post/Go-Test-gomock%E4%BD%BF%E7%94%A8.html","content":"<p>写出可测试 的代码 至关重要.  可以保证代码的稳定性.  帮助程序员减少bug.</p>\n<p>gomock 是一个go官方的模拟框架.<br>gomock的使用场景:</p>\n<ul>\n<li>IO类型的数据, 本地文件,数据库,网络API,RPC等</li>\n<li>依赖的服务还没有开发好, 这时候可以自己模拟一个服务, 加快开发进度提升开发效率</li>\n<li>压力性能测试的时候屏蔽外部依赖, 专注测试本模块</li>\n<li>依赖的内部函数非常复杂, 要构造数据非常不方便，这也是一种</li>\n</ul>\n<p><a href=\"https://github.com/golang/mock\">gomock</a></p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">go get github.com&#x2F;golang&#x2F;mock\n\ngo install github.com&#x2F;golang&#x2F;mock&#x2F;mockgen@latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>gomock在许多 开源项目中都有使用.   可以参考一些开源项目。  比如 <code>[gocache](https://github.com/eko/gocache)</code></p>\n<p>使用mockgen 支持两种 自动生成代码的方式.</p>\n<ol>\n<li><p>指定source,从源文件生成 mock接口</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mockgen -source&#x3D;.&#x2F;foo.go  -destination&#x3D;..&#x2F;test&#x2F;mock&#x2F; -pakcage&#x3D;mock<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>通过 <code>reflect</code> 的方式, 这种方式需要传递两种非标志参数来启动. <code>导入路径 import</code>  和  <code>逗号分隔的需要mock的接口列表</code></p>\n</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mockgen database&#x2F;sql&#x2F;driver  Conn,Driver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"mockgen-相关参数\"><a href=\"#mockgen-相关参数\" class=\"headerlink\" title=\"mockgen 相关参数\"></a>mockgen 相关参数</h3><ul>\n<li><code>-source</code>: 要模拟的接口文件</li>\n<li><code>-desitination</code>: mock文件输出的地方,如不设置,默认输出到标准输出中.</li>\n<li><code>-package</code>: 生成的 mock 文件的包名, 如不设置则为 <code>mock_</code> 前缀加上输入的文件名。</li>\n<li><code>-imports</code>: 应该在生成的源码文件中显示的导入的<strong>包列表</strong>.  声明为  <code>foo=bar/baz</code> 形式的并且以逗号分隔的列表. <code>foo</code>表示生成的源码文件中报的标识符, <code>bar/baz</code> 是要导入的包.</li>\n<li><code>-aux_files</code>: 应查阅的附加文件列表, 已解决例如在不同文件中定义的嵌入式接口(embbed interface). 声明为  <code>foo=bar/baz.go</code> 形式的并且以逗号分隔的列表.  <code>bar/baz.go</code> 是指定的源文件.  <code>foo</code> 是<code>-source</code> 指定的文件的包名.</li>\n<li><code>-build_flags</code>: 这个参数只在 reflect模式下使用. 用于 <code>go build</code> 中使用. </li>\n<li><code>-mock_names</code>: 自定义生成mock的文件列表.  使用逗号分隔. 例如: <code>Repository=MockSensorRepository,Endpoint=MockSensorEndpoint</code>. Repository Endpoint 是要模拟的接口, <code>MockSensorRepository</code> 和 <code>MockSensorEndpoint</code> 是模拟的实现类名.  如果不指定,则使用默认值.</li>\n</ul>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p><code>gomock.NewController</code>: 返回 gomock.Controller，它代表 mock 生态系统中的顶级控件。定义了 mock 对象的范围、生命周期和期待值。另外它在多个 goroutine 中是安全的<br><code>mock.NewMockMale</code>: 创建一个新的 mock 实例<br><code>gomock.InOrder</code>: 声明给定的调用应按顺序进行(是对 gomock.After 的二次封装)<br><code>mockMale.EXPECT().Get(id).Return(nil)</code>: 这里有三个步骤，EXPECT()返回一个允许调用者设置期望和返回值的对象. Get(id) 是设置入参并调用 mock 实例中的方法. Return(nil) 是设置先前调用的方法出参。简单来说，就是设置入参并调用，最后设置返回值<br><code>NewUser(mockMale)</code>: 创建 User 实例, 值得注意的是，在这里注入了 mock 对象,因此实际在随后的 user.GetUserInfo(id) 调用(入参：id 为 1)中. 它调用的是我们事先模拟好的 mock 方法<br><code>ctrl.Finish()</code>: 进行 mock 用例的期望值断言，一般会使用 defer 延迟执行，以防止我们忘记这一操作</p>\n<p><a href=\"https://github.com/golang/mock/tree/main/sample\">官方Demo</a></p>\n<h2 id=\"参数匹配器\"><a href=\"#参数匹配器\" class=\"headerlink\" title=\"参数匹配器\"></a>参数匹配器</h2><p><code>[Matcher](https://github.com/golang/mock/blob/main/gomock/matchers.go#L25)</code> 表示values 的类型.  通常用于表示  mock方法的期望参数.</p>\n<p>Matcher接口定义:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// A Matcher is a representation of a class of values.</span>\n<span class=\"token comment\">// It is used to represent the valid or expected arguments to a mocked method.</span>\n<span class=\"token keyword\">type</span> Matcher <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Matches returns whether x is a match.</span>\n\t<span class=\"token function\">Matches</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n\n\t<span class=\"token comment\">// String describes what the matcher matches.</span>\n\t<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>有时,不关心 调用mock时的特定参数,使用 gomock, 可以预期参数 具有固定值(通过 指定预期的 参数值),与谓词匹配, 称为匹配器.  </p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">gomock.Any():匹配任何值(任何类型)\ngomock.Eq(x):使用反射来匹配是值DeepEqual 到 x\ngomock.Nil(): 火柴 nil\ngomock.Not(m):(m 匹配器在哪里)匹配匹配器不匹配的值 m, gomock.Not(x)(式中， x 是 不 一个Matcher)匹配的值不 DeepEqual 至 x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"需要掌握的\"><a href=\"#需要掌握的\" class=\"headerlink\" title=\"需要掌握的\"></a>需要掌握的</h2><ul>\n<li>使用  <code>mockgen</code> 生成代码 一节   使用 <code>go:generate</code>  批量生成代码</li>\n<li>了解 gomock 是对接口的mock<ul>\n<li>期望入参</li>\n<li>期望返回值</li>\n<li>调用次数</li>\n<li>调用顺序</li>\n<li>执行 <code>Do</code> mock逻辑</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>参考<br><a href=\"https://xiaoming.net.cn/2021/06/29/gomock%20%E4%BD%BF%E7%94%A8/\">gomock 使用</a><br><a href=\"https://zhuanlan.zhihu.com/p/410445621\">GoMock快速上手教程</a><br><a href=\"https://pkg.go.dev/github.com/golang/mock/gomock#pkg-index\">Gomock文档</a></p>\n","categories":["golang"],"tags":["golang","test","gomock"]},{"title":"Go源码-context","url":"//post/Go%E6%BA%90%E7%A0%81-context.html","content":"<p>在go服务器中,通常 每个传入的请求都会在自己的<code>goroutine</code>中进行处理. 请求处理程序通常会启动额外的<code>goroutine</code>来访问数据库 或者第三方服务.<br>处理请求的一组<code>goroutine</code>通常需要访问特定于请求的值: 例如<code>userid</code>, <code>request_id</code>, <code>token</code>,<code>timeout</code>…,当请求被取消或者超时时,所有处理该请求的goroutine都应该快速退出. 以便系统可以快速回收他们正在使用的任何资源.</p>\n<p><a href=\"https://pkg.go.dev/context\">context</a> 是 go 1.14 引入 的一个概念. 用于解决上述问题.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"context-源码解析\"><a href=\"#context-源码解析\" class=\"headerlink\" title=\"context 源码解析\"></a>context 源码解析</h2><p><img src=\"/./Go%E6%BA%90%E7%A0%81-context/context.png\" alt=\"context\"></p>\n<h3 id=\"context-Context\"><a href=\"#context-Context\" class=\"headerlink\" title=\"context.Context\"></a>context.Context</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Context 是协程安全的,context 的方法可以被多个协程同时调用</span>\n<span class=\"token keyword\">type</span> Context <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// </span>\n\t<span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 返回一个 channel,当 这个 context 被取消时,这个channel 会写入一个 struct</span>\n\t<span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// Done 还没有被关闭， 返回  nil</span>\n    <span class=\"token comment\">// 如果  Done  已经被关闭, 返回 error:</span>\n    <span class=\"token comment\">// - Canceled</span>\n    <span class=\"token comment\">// - DeadlineExceeded</span>\n    <span class=\"token comment\">// 一旦返回 error,这个方法之后就是幂等的</span>\n\t<span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key any<span class=\"token punctuation\">)</span> any\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ol>\n<li><p><code>Deadline</code><br>如果 该 Context 被设置了超时，该函数返回  <code>true &amp; 对应的超时时间</code>， 否则 返回 <code>false &amp; nil</code>.</p>\n</li>\n<li><p><code>Done</code></p>\n</li>\n</ol>\n<p>返回一个只读 Channel, 但context 主动取消或者 自动超时取消时，该 context 以及 该context 的所有 子context 的 Done channel 都会被 close.<br>级联取消所有的子过程.</p>\n<ol start=\"3\">\n<li><code>Err()</code></li>\n</ol>\n<p><code>Done()</code> 返回的 channel被 close 之前 会返回nil.<br>在 close 之后会返回error(表示比关闭的原因).</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Canceled is the error returned by Context.Err when the context is canceled.</span>\n<span class=\"token keyword\">var</span> Canceled <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context canceled\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// DeadlineExceeded is the error returned by Context.Err when the context's</span>\n<span class=\"token comment\">// deadline passes.</span>\n<span class=\"token keyword\">var</span> DeadlineExceeded <span class=\"token builtin\">error</span> <span class=\"token operator\">=</span> deadlineExceededError<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<ol start=\"4\">\n<li><code>Value(key any) any</code></li>\n</ol>\n<p>返回绑定在 该 context 上 给定 key 对应的 value.  如果没有 返回 nil.</p>\n<p>为了防止Key冲突,最好将 key设置为 非导出类型,然后为其定义访问器.(这在许多开源项目中都有影子)</p>\n<p>key可是任意可比较的类型.</p>\n<p>下面是一个 context 共享 User 信息的 一个例子.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> user\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"context\"</span>\n\n<span class=\"token comment\">// User 是 要存储在Context中的value 的类型.</span>\n<span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// key 被定义为非导出类型 为了防止与其他包冲突</span>\n<span class=\"token comment\">// key is an unexported type for keys defined in this package.</span>\n<span class=\"token comment\">// This prevents collisions with keys defined in other packages.</span>\n<span class=\"token keyword\">type</span> key <span class=\"token builtin\">int</span>\n\n<span class=\"token comment\">// userKey 用来关联 请求中的user信息, 绑定在 context上.他是非导出的.</span>\n<span class=\"token comment\">// 通过  NewContext &amp; FromContext 来设置和读取  user.User 信息， 而不是直接使用 userKey.</span>\n<span class=\"token comment\">// userKey is the key for user.User values in Contexts. It is</span>\n<span class=\"token comment\">// unexported; clients use user.NewContext and user.FromContext</span>\n<span class=\"token comment\">// instead of using this key directly.</span>\n<span class=\"token keyword\">var</span> userKey key\n\n<span class=\"token comment\">// 携带 value</span>\n<span class=\"token comment\">// NewContext returns a new Context that carries value u.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewContext</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> u <span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span>Context <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> userKey<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//读取 context 中的 存储的 user信息</span>\n<span class=\"token comment\">// FromContext returns the User value stored in ctx, if any.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">FromContext</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    u<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>userKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> u<span class=\"token punctuation\">,</span> ok\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>context.Context 的实现.<br><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220903100716.png\"></p>\n<h3 id=\"1-emptyContext\"><a href=\"#1-emptyContext\" class=\"headerlink\" title=\"1. emptyContext\"></a>1. emptyContext</h3><p>emtptyContext 不是一个结构体,而是一个int类型,这样每一个值 都有独立的地址. 是 Context 的一个空的实现</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tbackground <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>emptyCtx<span class=\"token punctuation\">)</span>\n\ttodo       <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>emptyCtx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>context.Background() 通常被用作根节点,不能被取消,也不会超时.<br>通过 <code>WithCancel</code> 从 <code>context.Background()</code> 派生出的 Context 要注意在对应过程完结后及时 cancel, 否则会造成 Context 泄露.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// An emptyCtx is never canceled, has no values, and has no deadline. It is not</span>\n<span class=\"token comment\">// struct&#123;&#125;, since vars of this type must have distinct addresses.</span>\n<span class=\"token keyword\">type</span> emptyCtx <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptyCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptyCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptyCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptyCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key any<span class=\"token punctuation\">)</span> any <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>emptyCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">switch</span> e <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> background<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"context.Background\"</span>\n\t<span class=\"token keyword\">case</span> todo<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"context.TODO\"</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"unknown empty Context\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h3 id=\"2-context-cancelCtx\"><a href=\"#2-context-cancelCtx\" class=\"headerlink\" title=\"2. context.cancelCtx\"></a>2. context.cancelCtx</h3><p>context核心实现在这里,包括树形结构的构建 以及 进行级联取消.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// A cancelCtx can be canceled. When canceled, it also cancels any children</span>\n<span class=\"token comment\">// that implement canceler.</span>\n<span class=\"token keyword\">type</span> cancelCtx <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tContext\n\n\tmu       sync<span class=\"token punctuation\">.</span>Mutex            <span class=\"token comment\">// protects following fields 保护下面的字段</span>\n\tdone     atomic<span class=\"token punctuation\">.</span>Value          <span class=\"token comment\">// of chan struct&#123;&#125;, created lazily, closed by first cancel call</span>\n\tchildren <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>canceler<span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// set to nil by the first cancel call</span>\n\terr      <span class=\"token builtin\">error</span>                 <span class=\"token comment\">// set to non-nil by the first cancel call</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 递归查找 parentCtx 中第一个  cancelCtx</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key any<span class=\"token punctuation\">)</span> any <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> key <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>cancelCtxKey <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// </span>\n\t\t<span class=\"token keyword\">return</span> c\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>\n\td <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\td <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\td <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t\tc<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\terr <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>err\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// cancel closes c.done, cancels each of c's children, and, if</span>\n<span class=\"token comment\">// removeFromParent is true, removes c from its parent's children.</span>\n<span class=\"token comment\">// cancel  关闭 c.done, 关闭 context 及其所有子节点. 如果  removeFromParent = true, 那么将会把 context 从起 父节点移除.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span>removeFromParent <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context: internal error: missing cancel error\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// process</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token comment\">// already canceled</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>err <span class=\"token operator\">=</span> err\n\td<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>closedchan<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 遍历子节点,  递归调用 子节点的 cancel()</span>\n\t<span class=\"token keyword\">for</span> child <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// NOTE: acquiring the child's lock while holding parent's lock.</span>\n\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// c.Context 保存的是其 父节点</span>\n\t<span class=\"token keyword\">if</span> removeFromParent <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>cancelContext.Value() 方法  遇到特殊key<code>cancelCtxKey</code> 时会返回自身, 其实这是 复用了  <code>Value()</code>的 回溯逻辑(后面<code>回溯树构建</code>中会用到).<br>从而在 context树种回溯遍历时, 可以找到给定context中的第一个祖先 <code>cancelContext</code>实例.</p>\n<p><code>WithCancel</code>:<br><code>WithCancel()</code> 通过 调用<code>propagateCancel()</code>  实现回溯树的构建.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// WithCancel returns a copy of parent with a new Done channel. The returned</span>\n<span class=\"token comment\">// context's Done channel is closed when the returned cancel function is called</span>\n<span class=\"token comment\">// or when the parent context's Done channel is closed, whichever happens first.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Canceling this context releases resources associated with it, so code should</span>\n<span class=\"token comment\">// call cancel as soon as the operations running in this Context complete.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> parent <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create context from nil parent\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">newCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// propagateCancel arranges for child to be canceled when parent is.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> child canceler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tdone <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> done <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token comment\">// parent is never canceled</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 如果父节点已经被取消, 级联取消当前子节点.</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\">// parent is already canceled</span>\n\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 否则: </span>\n\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//  如果是 cancelCtx 类型,那就简单了， 将 curCtx 放到  parent.child 里面.</span>\n\t\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 父节点已经被取消</span>\n\t\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>children <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tp<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>canceler<span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// lazy create</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tp<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>                                    <span class=\"token comment\">//  如果 不是 cancelCtx类型, 就开启一个协程监听  parent 与 curCtx 是否有取消操作</span>\n\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>goroutines<span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token comment\">// 当 parent 时cancelCtx时才会调用此方法.</span>\n<span class=\"token comment\">// 通过 调用 `parent.Value(&amp;cancelCtxKey)` 找到最里面的  cancelCtx, </span>\n<span class=\"token comment\">// 然后检查  parent.Done == cancelCtx.Done(). </span>\n<span class=\"token comment\">// 如果 不匹配, 说明 cancelCtx 被包裹在了一个 自定义实现中,提供不同的 done通道. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// parentCancelCtx returns the underlying *cancelCtx for parent.</span>\n<span class=\"token comment\">// It does this by looking up parent.Value(&amp;cancelCtxKey) to find</span>\n<span class=\"token comment\">// the innermost enclosing *cancelCtx and then checking whether</span>\n<span class=\"token comment\">// parent.Done() matches that *cancelCtx. (If not, the *cancelCtx</span>\n<span class=\"token comment\">// has been wrapped in a custom implementation providing a</span>\n<span class=\"token comment\">// different done channel, in which case we should not bypass it.)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tdone <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> done <span class=\"token operator\">==</span> closedchan <span class=\"token operator\">||</span> done <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 传入</span>\n\tp<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cancelCtxKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tpdone<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> pdone <span class=\"token operator\">!=</span> done <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-context-timerCtx\"><a href=\"#3-context-timerCtx\" class=\"headerlink\" title=\"3. context.timerCtx\"></a>3. context.timerCtx</h3><p>超时取消, 顾名思义,  内部应该会有一个定时执行的函数, 调用 cancel().<br>这里包含两种取消模式: 1. 主动调用  cancel() 2. 时间到了, 执行 cancel()</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// timerCtx  携带了一个 timer 和一个 deadline.</span>\n<span class=\"token comment\">// timerCtx 内嵌了一个  cancelCtx  复用其  `Done()`  and `Err()`.</span>\n<span class=\"token comment\">// 当时间到了的时候,会调用  cacnelCtx 的 cancel() 执行取消</span>\n<span class=\"token comment\">// A timerCtx carries a timer and a deadline. It embeds a cancelCtx to</span>\n<span class=\"token comment\">// implement Done and Err. It implements cancel by stopping its timer then</span>\n<span class=\"token comment\">// delegating to cancelCtx.cancel.</span>\n<span class=\"token keyword\">type</span> timerCtx <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tcancelCtx\n\ttimer <span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Timer <span class=\"token comment\">// Under cancelCtx.mu.</span>\n\n\tdeadline time<span class=\"token punctuation\">.</span>Time\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>timerCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>deadline<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>timerCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">contextName</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>cancelCtx<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".WithDeadline(\"</span> <span class=\"token operator\">+</span>\n\t\tc<span class=\"token punctuation\">.</span>deadline<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" [\"</span> <span class=\"token operator\">+</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Until</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>deadline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"])\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>timerCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span>removeFromParent <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc<span class=\"token punctuation\">.</span>cancelCtx<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> removeFromParent <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Remove this timerCtx from its parent cancelCtx's children.</span>\n\t\t<span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>cancelCtx<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tc<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>创建一个 timerCtx:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> d time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> parent <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create context from nil parent\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> cur<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">Before</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// The current deadline is already sooner than the new one.</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>timerCtx<span class=\"token punctuation\">&#123;</span>\n\t\tcancelCtx<span class=\"token punctuation\">:</span> <span class=\"token function\">newCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdeadline<span class=\"token punctuation\">:</span>  d<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 下卖弄会分析， 回溯树的构建</span>\n\t<span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\tdur <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Until</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 如果已经超时了, 直接取消</span>\n\t<span class=\"token keyword\">if</span> dur <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> DeadlineExceeded<span class=\"token punctuation\">)</span> <span class=\"token comment\">// deadline has already passed</span>\n\t\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> Canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 添加一个延时任务</span>\n\t\tc<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">AfterFunc</span><span class=\"token punctuation\">(</span>dur<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> DeadlineExceeded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-valueCtx\"><a href=\"#4-valueCtx\" class=\"headerlink\" title=\"4. valueCtx\"></a>4. valueCtx</h3><p>创建:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// WithValue returns a copy of parent in which the value associated with key is</span>\n<span class=\"token comment\">// val.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Use context Values only for request-scoped data that transits processes and</span>\n<span class=\"token comment\">// APIs, not for passing optional parameters to functions.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The provided key must be comparable and should not be of type</span>\n<span class=\"token comment\">// string or any other built-in type to avoid collisions between</span>\n<span class=\"token comment\">// packages using context. Users of WithValue should define their own</span>\n<span class=\"token comment\">// types for keys. To avoid allocating when assigning to an</span>\n<span class=\"token comment\">// interface&#123;&#125;, context keys often have concrete type</span>\n<span class=\"token comment\">// struct&#123;&#125;. Alternatively, exported context key variables' static</span>\n<span class=\"token comment\">// type should be a pointer or interface.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val any<span class=\"token punctuation\">)</span> Context <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> parent <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create context from nil parent\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> key <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nil key\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>reflectlite<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Comparable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key is not comparable\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>valueCtx<span class=\"token punctuation\">&#123;</span>parent<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// A valueCtx carries a key-value pair. It implements Value for that key and</span>\n<span class=\"token comment\">// delegates all other calls to the embedded Context.</span>\n<span class=\"token keyword\">type</span> valueCtx <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tContext\n\tkey<span class=\"token punctuation\">,</span> val any\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"5-1-构建-context-树\"><a href=\"#5-1-构建-context-树\" class=\"headerlink\" title=\"5.1.  构建 context 树\"></a>5.1.  构建 context 树</h3><p>树的构建 级联取消的不分 基础代码在 <code>cancelCtx</code> 中, timerCtx和 <code>valuectx</code> 都会引用 cancelCtx 这部分代码.</p>\n<p><code>WithCancel()</code> 创建了 一个 Donechannel 和 拷贝了parentCtx.<br>当  <code>parentCtx 被取消</code> 或者 <code>当前context 的 cancel() 被调用</code>, 当前 <code>context.Done()</code> 的channel将会被 close.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> parent <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create context from nil parent\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">newCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>子 context 持有 父 context 的引用.</li>\n<li>context 持有 其 所有子节点(子context) 的引用.</li>\n</ol>\n<p><code>propagateCancel()</code>: 保证当parentCtx 被取消时,遍历取消 childCtx, 构建一个回溯树.</p>\n<ul>\n<li>监听 parentContext.Done(), 收到取消信号时,级联取消子节点</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// propagateCancel arranges for child to be canceled when parent is.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> child canceler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// parent.Done() 返回nil， 说明 parentContext 根本无法取消</span>\n\t<span class=\"token comment\">// 1. 比如 context.Background() || context.TODO()</span>\n\tdone <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> done <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token comment\">// parent is never canceled</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 2. 判断 parentContext 已经取消 </span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\">// parent is already canceled</span>\n\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// parentCancelCtx  用于获取底层可取消的 Context(cancelContext)</span>\n\t<span class=\"token comment\">// 如果 parent Context 本身就是 *cancelCtx 或者是标准库中基于 cancelCtx 衍生的 Context 会返回 true</span>\n\t<span class=\"token comment\">// 如果 parent Context 已经取消/或者根本无法取消 会返回 false</span>\n\t<span class=\"token comment\">// 如果 parent Context 无法转换为一个 *cancelCtx 也会返回 false</span>\n\t<span class=\"token comment\">// 如果 parent Context 是一个自定义深度包装的 cancelCtx(自己定义了 done channel) 则也会返回 false</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// ok 为 true 说明 parent Context 为 标准库的 cancelCtx 或者至少可以完全转换为 *cancelCtx</span>\n\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加锁  double check</span>\n\t\t<span class=\"token comment\">// 所以并发加锁情况下如果 parent Context 的 err 不为空说明已经被取消了</span>\n\t\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// parent has already been canceled</span>\n\t\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 如果 parent Context没有被取消, 就将 自身 context 加入到 parentContext.children 中,建立关联</span>\n\t\t\t<span class=\"token comment\">// 当 parentContext被取消时, 会遍历  parent.children, 一次调用  child.cancel() </span>\n\t\t\t<span class=\"token comment\">// 所以 -> p.children 中所有的 context 都可以转化为  cancelCtx 节点.</span>\n\t\t\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>children <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tp<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>canceler<span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tp<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// ok 为false 说明 parent Context 已经取消 || 根本无法取消 || 无法转换为一个 \t`cancelContext` || 是一个自定义的深度包装的 `cancelCtx`</span>\n\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>goroutines<span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// 由于代码一开始已经判断了 parentContext 已经取消  和  根本无法取消 的两种情况.</span>\n\t\t<span class=\"token comment\">// 所以这里  &lt;- parent.Done() 并不会产生 panic</span>\n\t\t<span class=\"token comment\">//</span>\n\t\t<span class=\"token comment\">// 后两种情况下 无法通过  parentContext.child(map) 建立关联, 只能通过 一个 goroutine 完成 级联取消操作.</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><code>parentCancelCtx()</code>:  parentCancelCtx  用于获取底层可取消的 Context(cancelContext)</p>\n<ul>\n<li>如果 parent Context 本身就是 *cancelCtx 或者是标准库中基于 cancelCtx 衍生的 Context 会返回 true</li>\n<li>如果 parent Context 已经取消&#x2F;或者根本无法取消 会返回 false</li>\n<li>如果 parent Context 无法转换为一个 *cancelCtx 也会返回 false</li>\n<li>如果 parent Context 是一个自定义深度包装的 cancelCtx(自己定义了 done channel) 则也会返回 false</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// parentCancelCtx returns the underlying *cancelCtx for parent.</span>\n<span class=\"token comment\">// It does this by looking up parent.Value(&amp;cancelCtxKey) to find</span>\n<span class=\"token comment\">// the innermost enclosing *cancelCtx and then checking whether</span>\n<span class=\"token comment\">// parent.Done() matches that *cancelCtx. (If not, the *cancelCtx</span>\n<span class=\"token comment\">// has been wrapped in a custom implementation providing a</span>\n<span class=\"token comment\">// different done channel, in which case we should not bypass it.)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tdone <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 1.</span>\n\t<span class=\"token comment\">// parentContext.Done()   == nil 说明不是一个 cancelContext</span>\n\t<span class=\"token comment\">// parentContext.Done()   == closedchan(一个可复用的表示关闭), 说明 parentContext  已经被关闭了.</span>\n\t<span class=\"token keyword\">if</span> done <span class=\"token operator\">==</span> closedchan <span class=\"token operator\">||</span> done <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 2.</span>\n\t<span class=\"token comment\">// parentContex 无法转换为一个   cancelCtx</span>\n\tp<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cancelCtxKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 3. </span>\n\t<span class=\"token comment\">// 经过上面的判断后，说明 parent context 可以被转换为 *cancelCtx，这时存在多种情况:</span>\n\t<span class=\"token comment\">//   - parent context 就是 *cancelCtx</span>\n\t<span class=\"token comment\">//   - parent context 是标准库中的 timerCtx</span>\n\t<span class=\"token comment\">//   - parent context 是个自己自定义包装的 cancelCtx</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 针对这 3 种情况需要进行判断，判断方法就是: </span>\n\t<span class=\"token comment\">//   判断 parent context 通过 Done() 方法获取的 done channel 与 Value 查找到的 context 的 done channel 是否一致</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// 一致情况说明 parent context 为 cancelCtx 或 timerCtx 或 自定义的 cancelCtx 且未重写 Done()，</span>\n\t<span class=\"token comment\">// 这种情况下可以认为拿到了底层的 *cancelCtx</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// 不一致情况说明 parent context 是一个自定义的 cancelCtx 且重写了 Done(), 并且并未返回标准 `*cancelCtx` 的</span>\n\t<span class=\"token comment\">// 的 done channel，这种情况需要单独处理，故返回 nil, false</span>\n\tpdone<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> pdone <span class=\"token operator\">!=</span> done <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"5-2-级联取消-cancel\"><a href=\"#5-2-级联取消-cancel\" class=\"headerlink\" title=\"5.2 级联取消 cancel\"></a>5.2 级联取消 cancel</h3><p>级联取消的关键函数是<code> cancelCtx.cancel()</code>,  在 当前 cancelCtx 取消时,需要级联取消  以该context为根节点的 context树中所有context,<br>并将 cancelCtx 从 其父节点摘除,以便让 GC 回收该 cancelCtx 子树的所有资源.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// cancel closes c.done, cancels each of c's children, and, if</span>\n<span class=\"token comment\">// removeFromParent is true, removes c from its parent's children.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span>removeFromParent <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">// err == nil,那么 直接 panic</span>\n\t<span class=\"token comment\">// 这么做的目的是因为 `cancel()`是个私有方法，标准库内任何调用 `cancel()`</span>\n    <span class=\"token comment\">// 的方法保证了一定会传入 err, 如果没传那就是非正常调用,所以可以直接 panic</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context: internal error: missing cancel error\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 已经被取消了, 防止重复调用 cancel()</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token comment\">// already canceled</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>err <span class=\"token operator\">=</span> err\n\td<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 判断 c.done 是否为 nil，因为 context.WithCancel 创建 cancelContext 时, c.done是延迟初始化的, 所以可能为nil</span>\n\t<span class=\"token comment\">// 如果 c.done == nil, 将其赋值为 可 复用的  closechan.</span>\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>closedchan<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 如果当前 Context 下面还有关联的 child Context，且这些 child Context 都是</span>\n\t<span class=\"token comment\">// 可以转换成 *cancelCtx 的 Context(见上面的 propagateCancel()分析).</span>\n\t<span class=\"token comment\">// 那么直接遍历 childre map，并且调用 child Context 的 cancel 即可</span>\n\t<span class=\"token comment\">// 如果关联的 child Context 不能转换成 *cancelCtx，那么由 propagateCancel 方法</span>\n\t<span class=\"token comment\">// 中已经创建了单独的 Goroutine 来关闭这些 child Context</span>\n\t<span class=\"token keyword\">for</span> child <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// NOTE: acquiring the child's lock while holding parent's lock.</span>\n\t\tchild<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 递归调用 子context cancel</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> removeFromParent <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">//从 parent 中找出 curContext</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// removeChild removes a context from its parent.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> child canceler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tp<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>children <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tp<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tdone <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> done <span class=\"token operator\">==</span> closedchan <span class=\"token operator\">||</span> done <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tp<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cancelCtxKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tpdone<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> pdone <span class=\"token operator\">!=</span> done <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<p><a href=\"https://mritd.com/2021/06/27/golang-context-source-code\">Golang Context 源码分析</a></p>\n","tags":["golang","context","源码剖析"]},{"title":"Hello World","url":"//post/Hello-World-0.html","content":"","categories":["test"],"tags":["test","md"]},{"title":"Intelij-快捷键","url":"//post/Intelij-%E5%BF%AB%E6%8D%B7%E9%94%AE.html","content":"<h2 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">\nCtrl + Command + G :  选中所有相同的的内容\n\nCtrl + G :            选中下一个相同的内容\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","tags":["Intelij","快捷键"]},{"title":"JVM-jstat命令解析","url":"//post/JVM-jstat%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90.html","content":"<blockquote>\n<p>JDK8<br>jstat命令可以查看堆内存各部分的使用量，以及加载类的数量。命令的格式如下: </p>\n</blockquote>\n<span id=\"more\"></span>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">jstat [-命令选项] [vmid] [间隔时间&#x2F;毫秒] [查询次数]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"类加载统计\"><a href=\"#类加载统计\" class=\"headerlink\" title=\"类加载统计\"></a>类加载统计</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">jstat -class [pid]\n\nLoaded  Bytes  Unloaded  Bytes     Time\n 10701 20086.0        0     0.0       5.62<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>Loaded: 加载class的数量</li>\n<li>Bytes: 所占用空间大小</li>\n<li>Unloaded: 未加载数量</li>\n<li>Bytes: 未加载占用空间</li>\n<li>Time: 时间</li>\n</ul>\n<h2 id=\"编译统计\"><a href=\"#编译统计\" class=\"headerlink\" title=\"编译统计\"></a>编译统计</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">jstat -compiler [pid]\n\nCompiled Failed Invalid   Time   FailedType FailedMethod\n    5642      6       0     1.51          1 com&#x2F;sun&#x2F;beans&#x2F;TypeResolver prepare<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>Compiled: 编译数量。</li>\n<li>Failed: 失败数量</li>\n<li>Invalid: 不可用数量</li>\n<li>Time: 时间</li>\n<li>FailedType: 失败类型</li>\n<li>FailedMethod: 失败的方法</li>\n<li>Compiled: 编译数量。</li>\n<li>Failed: 失败数量</li>\n<li>Invalid: 不可用数量</li>\n<li>Time: 时间</li>\n<li>FailedType: 失败类型</li>\n<li>FailedMethod: 失败的方法</li>\n</ul>\n<h2 id=\"垃圾回收统计\"><a href=\"#垃圾回收统计\" class=\"headerlink\" title=\"垃圾回收统计\"></a>垃圾回收统计</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">jstat -gc [pid]\n\n S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT\n157248.0 157248.0  0.0   42754.5 1258368.0 1110221.2 2621440.0     0.0     38528.0 36701.5 5248.0 4838.0      1    0.041   0      0.000    0.041<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>S0C: 第一个幸存区的大小</li>\n<li>S1C: 第二个幸存区的大小</li>\n<li>S0U: 第一个幸存区的使用大小</li>\n<li>S1U: 第二个幸存区的使用大小</li>\n<li>EC: Eden 的大小</li>\n<li>EU: Eden 的使用大小</li>\n<li>OC: 老年代大小</li>\n<li>OU: 老年代使用大小</li>\n<li>MC: 方法区大小</li>\n<li>MU: 方法区使用大小</li>\n<li>CCSC:压缩类空间大小</li>\n<li>CCSU:压缩类空间使用大小</li>\n<li>YGC: 年轻代垃圾回收次数</li>\n<li>YGCT: 年轻代垃圾回收消耗时间</li>\n<li>FGC: 老年代垃圾回收次数</li>\n<li>FGCT: 老年代垃圾回收消耗时间</li>\n<li>GCT: 垃圾回收消耗总时间</li>\n</ul>\n<h2 id=\"堆内存统计\"><a href=\"#堆内存统计\" class=\"headerlink\" title=\"堆内存统计\"></a>堆内存统计</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">jstat -gccapacity [pid]\n\n NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC\n1572864.0 1572864.0 1572864.0 157248.0 157248.0 1258368.0  2621440.0  2621440.0  2621440.0  2621440.0      0.0 1083392.0  38528.0      0.0 1048576.0   5248.0      1     0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>NGCMN: 新生代最小容量</li>\n<li>NGCMX: 新生代最大容量</li>\n<li>NGC: 当前新生代容量</li>\n<li>S0C: 第一个幸存区大小</li>\n<li>S1C: 第二个幸存区的大小</li>\n<li>EC: Eden区的大小</li>\n<li>OGCMN: 老年代最小容量</li>\n<li>OGCMX: 老年代最大容量</li>\n<li>OGC: 当前老年代大小</li>\n<li>OC:当前老年代大小</li>\n<li>MCMN:最小元数据容量</li>\n<li>MCMX: 最大元数据容量</li>\n<li>MC: 当前元数据空间大小</li>\n<li>CCSMN: 最小压缩类空间大小</li>\n<li>CCSMX: 最大压缩类空间大小</li>\n<li>CCSC: 当前压缩类空间大小</li>\n<li>YGC: 年轻代gc次数</li>\n<li>FGC: 老年代GC次数</li>\n</ul>\n<h2 id=\"新生代垃圾回收统计\"><a href=\"#新生代垃圾回收统计\" class=\"headerlink\" title=\"新生代垃圾回收统计\"></a>新生代垃圾回收统计</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">jstat -gcnew [pid]\n\n S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT\n157248.0 157248.0    0.0 42754.5  6   6 78624.0 1258368.0 1143777.8      1    0.041<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"新生代内存统计\"><a href=\"#新生代内存统计\" class=\"headerlink\" title=\"新生代内存统计\"></a>新生代内存统计</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">jstat -gcnewcapacity [pid]\n\n  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC\n 1572864.0  1572864.0  1572864.0 157248.0 157248.0 157248.0 157248.0  1258368.0  1258368.0     1     0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"老年代垃圾回收统计\"><a href=\"#老年代垃圾回收统计\" class=\"headerlink\" title=\"老年代垃圾回收统计\"></a>老年代垃圾回收统计</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">jstat -gcold [pid]\n\n   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT\n 38528.0  36701.5   5248.0   4838.0   2621440.0         0.0      1     0    0.000    0.041<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"老年代内存统计\"><a href=\"#老年代内存统计\" class=\"headerlink\" title=\"老年代内存统计\"></a>老年代内存统计</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">jstat -gcoldcapacity [pid]\n\n   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT\n  2621440.0   2621440.0   2621440.0   2621440.0     1     0    0.000    0.041<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"元数据空间统计\"><a href=\"#元数据空间统计\" class=\"headerlink\" title=\"元数据空间统计\"></a>元数据空间统计</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">jstat -gcmetacapacity [pid]\n\n   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT\n       0.0  1083392.0    38528.0        0.0  1048576.0     5248.0     1     0    0.000    0.041<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>MCMN: 最小元数据容量</li>\n<li>MCMX: 最大元数据容量</li>\n<li>MC: 当前元数据空间大小</li>\n<li>CCSMN: 最小压缩类空间大小</li>\n<li>CCSMX: 最大压缩类空间大小</li>\n<li>CCSC: 当前压缩类空间大小</li>\n<li>YGC: 年轻代垃圾回收次数</li>\n<li>FGC: 老年代垃圾回收次数</li>\n<li>FGCT: 老年代垃圾回收消耗时间</li>\n<li>GCT: 垃圾回收消耗总时间</li>\n</ul>\n<h2 id=\"垃圾回收统计-1\"><a href=\"#垃圾回收统计-1\" class=\"headerlink\" title=\"垃圾回收统计\"></a>垃圾回收统计</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">jstat -gcutil [pid]\n\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n  0.00  27.19  90.89   0.00  95.26  92.19      1    0.041     0    0.000    0.041<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>S0: 幸存1区当前使用比例</li>\n<li>S1: 幸存2区当前使用比例</li>\n<li>E: Eden 区使用比例</li>\n<li>O: 老年代使用比例</li>\n<li>M: 元数据区使用比例</li>\n<li>CCS: 压缩使用比例</li>\n<li>YGC: 年轻代垃圾回收次数</li>\n<li>FGC: 老年代垃圾回收次数</li>\n<li>FGCT: 老年代垃圾回收消耗时间</li>\n<li>GCT: 垃圾回收消耗总时间</li>\n</ul>\n<h2 id=\"JVM编译方法统计\"><a href=\"#JVM编译方法统计\" class=\"headerlink\" title=\"JVM编译方法统计\"></a>JVM编译方法统计</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">jstat -printcompilation [pid]\n\nCompiled  Size  Type Method\n    5773     18    1 com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;SerializeWriter isEnabled<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>Compiled: 最近编译方法的数量</li>\n<li>Size: 最近编译方法的字节码数量</li>\n<li>Type: 最近编译方法的编译类型</li>\n<li>Method: 方法名标识</li>\n</ul>\n","categories":["jvm"],"tags":["jvm","jstat"]},{"title":"Kafka-Consumer","url":"//post/Kafka-Consumer.html","content":"<p>kafka-consumer</p>\n<span id=\"more\"></span>\n\n<h2 id=\"参数配置-以及默认值\"><a href=\"#参数配置-以及默认值\" class=\"headerlink\" title=\"参数配置 以及默认值\"></a>参数配置 以及默认值</h2><p><a href=\"http://kafka.apache.org/documentation/#consumerconfigs\">参数配置以及默认值</a></p>\n<h2 id=\"Consumer-一些概念\"><a href=\"#Consumer-一些概念\" class=\"headerlink\" title=\"Consumer 一些概念\"></a>Consumer 一些概念</h2><h3 id=\"消费者-Consumer\"><a href=\"#消费者-Consumer\" class=\"headerlink\" title=\"消费者 Consumer\"></a>消费者 Consumer</h3><p>kafka 消费者，消费kafka队列里的消息，可以有多种语言实现， <code>python</code>  <code>java</code>  <code>scala</code> <code>Go</code> …,</p>\n<p><code>consumer group</code>  即是由多个独立消费者组成，消费 Topic 下的消息， 独立消费者 <code>standalong consumer</code> 执行独立的消费。</p>\n<h3 id=\"消费者组-Consuemer-group\"><a href=\"#消费者组-Consuemer-group\" class=\"headerlink\" title=\"消费者组 Consuemer group\"></a>消费者组 Consuemer group</h3><p>Kafka消费者是<code>消费组</code>的一部分，当多个消费者形成一个消费组来消费<code>主题</code>时，每个消费者会收到不同<code>分区</code>的消息。</p>\n<ul>\n<li><code>consumer group</code> 可能有若干个 <code>consumer</code> 实例</li>\n<li>对于同一个  <code>group</code> 而言， <code>topic</code> 的每一条消息只能被发送到该 <code>group</code> 下的一个 <code>consumer</code> 实例上</li>\n<li><code>topic</code> 消息可以发送到 订阅该 <code>topic</code> 的 多个 <code>group</code></li>\n</ul>\n<p>kafkaConsuemr 是非线程安全的，与 kafkaProducer 是不同的。<br>所以无法在多线程中使用同一个 kafkaConsuemr 进行消费。</p>\n<ol>\n<li>每个线程维护一个 kafkaonsumer<br>  用户创建多线程消费kafka分区数据， 每个线程中创建一个单独的 kafkaConsumer 实例。</li>\n</ol>\n<blockquote>\n<p>为什么要使用 <code>Consumer Group</code>?<br><code>consumer Group</code> 是实现高伸缩性，高容错性的 <code>consumer</code> 机制，而且一旦某个 <code>consumer</code> 挂了，<code>cosnuemr Group</code> 会立即将已经崩溃的  <code>consumer</code> 负责的分区转交给 其他 <code>consumer</code> 负责，从而保证了整个 group 可以继续工作，不丢失数据，这个过程被称为–<code>重平衡(reblance)</code></p>\n</blockquote>\n<blockquote>\n<p><strong>消费顺序</strong><br>kafka 目前只保证单个分区内的消息消费顺序，而不会维护全局的消息顺序，如果用户要实现 topic 全局的消息顺序读取，就只能通过让每个 consumer group 下只包含一个 consumer 来实现。</p>\n</blockquote>\n<p><strong>总结</strong></p>\n<ul>\n<li><code>consumer</code> 下 可以有一或者多个 <code>consumer</code> , 一个 <code>consuemr</code> 可以是一个线程，也可以是运行在其他机器上的进程</li>\n<li><code>group.id</code> 唯一标志一个 <code>consumer group</code></li>\n<li>对于某个 <code>consumer group</code> 而言，订阅 <code>topic</code> 的每个分区只能分配给订阅该 <code>consumer group</code> 下的一个 <code>consumer</code></li>\n</ul>\n<h3 id=\"offset-位移\"><a href=\"#offset-位移\" class=\"headerlink\" title=\"offset(位移)\"></a>offset(位移)</h3><blockquote>\n<p>这里的 offset 指的是 consumer 端的位移，与分区日志中的 offset 是不同的含义</p>\n</blockquote>\n<p>每个 consumer实例都会为它消费的分区维护属于自己的位置信息来记录当前消费了多少消息。—- offset<br>很多消息引擎都把消费端的  offset 保存在服务端(broker)， 这样做的好处当谈事实现简单，但可能会有如下三个问题：</p>\n<ol>\n<li>broker 变成了有状态，增加了同步成本，影响伸缩性</li>\n<li>需要引入应答机制(acknowledgement)，来确认消息消费成功</li>\n<li>由于需要保存很多的 consumer 的 offset故必然会引入复杂的数据结构，从而造成不必要的资源浪费</li>\n</ol>\n<p>kafka consumer 端引入了 检查点机制(checkpoint), 定期对offset 持久化，从而简化了应答机制的实现</p>\n<h4 id=\"位移提交-offset-commit\"><a href=\"#位移提交-offset-commit\" class=\"headerlink\" title=\"位移提交 (offset commit)\"></a>位移提交 (offset commit)</h4><blockquote>\n<p>consumer 客户端需要定期向 kafka 集群汇报自己的消费进度，这一过程称为 —– 位移提交.</p>\n</blockquote>\n<p>位移提交对于 consumer 而言非常重要,它不仅表征了 consumer 的消费进度，同时也直接决定了 consuemr 端消费语义的保证.</p>\n<p>新版本 consumer 把位移提交到 Kafka 内部的一个 topic(__consumer_offset) 上。因此consumer 不在依赖 Zookeeper(位移提交这件事). 这就是为什么开发新版本 consumer 不需要配置 zookeeper 地址的原因。</p>\n<h3 id=\"consumer-offset\"><a href=\"#consumer-offset\" class=\"headerlink\" title=\"__consumer_offset\"></a>__consumer_offset</h3><p>__consumer_offset 是 kafak 一个 内部 topic, </p>\n<h3 id=\"消费者组重平衡-Consumer-group-reblance\"><a href=\"#消费者组重平衡-Consumer-group-reblance\" class=\"headerlink\" title=\"消费者组重平衡 (Consumer group reblance)\"></a>消费者组重平衡 (Consumer group reblance)</h3><p>relbance 只对 consumer group 有效。</p>\n<blockquote>\n<p>relbance<br>规定了一个consumer group 下的 consuemr 如何达成一致来分配订阅 topic的所有分区。</p>\n</blockquote>\n<p>资料<br><a href=\"https://blog.csdn.net/u013256816/article/details/81123600\">Kafka分区分配策略（1）——RangeAssignor</a><br><a href=\"https://blog.csdn.net/u013256816/article/details/81123625\">Kafka分区分配策略（2）——RoundRobinAssignor和StickyAssignor</a></p>\n<h2 id=\"构建-kafka-Consumer\"><a href=\"#构建-kafka-Consumer\" class=\"headerlink\" title=\"构建 kafka Consumer\"></a>构建 kafka Consumer</h2><p>参考<br><a href=\"https://juejin.im/post/5bec10ca6fb9a049b13dc1e4\">kafka消费者Consumer参数设置及参数调优建议-kafka 商业环境实战</a></p>\n<h2 id=\"消息轮询\"><a href=\"#消息轮询\" class=\"headerlink\" title=\"消息轮询\"></a>消息轮询</h2><p>poll()</p>\n<p>Kafka Consumer是费线程安全的！如果没有显示的同步锁保护机制，kafka 会抛出 异常。<br>(将同一个kafkaConsumer 实例用在了多个线程中)</p>\n<p>kafka 的 poll() 在用户主线程中执行，，这也同时表明 消费者组执行 relbance，消息获取， coordinator 管理 异步任务结果的处理 甚至 唯一提交等操作都是运行在用户主线程中。因此仔细调优这个 poll() 相关的</p>\n<blockquote>\n<p><strong>kafka poll 为什么会有一个超时参数?</strong><br>poll()满足以下任一个条件，即可返回<br>1：获取足够多的可用数据<br>2：等待时间超过指定的超时时间。<br>目的在于让Consumer主线程定期的””苏醒”去做其他事情。比如：定期的执行常规任务，（比如写日志，写库等）。</p>\n</blockquote>\n<h2 id=\"位移管理\"><a href=\"#位移管理\" class=\"headerlink\" title=\"位移管理\"></a>位移管理</h2><blockquote>\n<p>kafka 要为每个他要读取的 分区保存消费进度，即分区当中的当前消费信息的位置 &#x3D;&#x3D;&gt; 位移 offset<br>consumer定期向kafak 提交自己的位置信息。</p>\n</blockquote>\n<p>offset 对于 kafka consuemr非常重要，因为他是实现消息交语义的保证(message semantic)。常见的三种消息交付语义：</p>\n<ul>\n<li>最多一次 (at most once) 消息可能丢失,但不会重复消费</li>\n<li>最少一次 (at least once) 消息可能会重复消费，但不会丢失消息 (<strong>default</strong>)</li>\n<li>精确一次 (only once)    消息一定会被处理，且只会被处理一次</li>\n</ul>\n<h3 id=\"自动提交-与-手动提交\"><a href=\"#自动提交-与-手动提交\" class=\"headerlink\" title=\"自动提交 与 手动提交\"></a>自动提交 与 手动提交</h3><p>自动提交默认时间间隔 为 5s<br>自动提交减少了开发成本，但不能细粒度的控制处理位移的提交，特别是<strong>精确一次</strong>处理语义时，在这种情况下，用户可以使用手动提交位移。<br>通过设置 <code>auto.commit.interval.ms</code> 参数可以控制自动提交的时间间隔</p>\n<p>手动提交：<br>参数配置： <code>enable.auto.commit = false</code><br>然后调用 <code>commitSync()</code> <code>commitAsync()</code></p>\n<p><img src=\"/post/Kafka-Consumer/%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E4%B8%8E%E6%89%8B%E5%8A%A8%E6%8F%90%E4%BA%A4%E5%AF%B9%E6%AF%94.jpg\" alt=\"自动提交与手动提交对比\"></p>\n<h2 id=\"重平衡-rebalance\"><a href=\"#重平衡-rebalance\" class=\"headerlink\" title=\"重平衡 rebalance\"></a>重平衡 rebalance</h2><p>rebalance 分区分配策略：</p>\n<ol>\n<li>range 策略</li>\n<li>round-robin 策略</li>\n<li>sticky 策略</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/u013256816/article/details/81123600\">Kafka分区分配策略（1）——RangeAssignor</a><br><a href=\"https://blog.csdn.net/u013256816/article/details/81123625\">Kafka分区分配策略（2）——RoundRobinAssignor和StickyAssignor</a></p>\n<h3 id=\"rebalanc-监听器\"><a href=\"#rebalanc-监听器\" class=\"headerlink\" title=\"rebalanc 监听器\"></a>rebalanc 监听器</h3><p>新版本 consumer<br>默认提交 <code>offset</code> 到 <code>__consumer_offsets</code> 中，其实，Kafka 也支持用户把位移提交到<code>外部存储</code>中,比如数据库。如要实现这个功能，用户就必须使用 <code>rebalance 监听器</code>. 使用 rebalance 监听器的前提是用户使用 <code>consumer group</code>. 如果使用得是独立的 consumer 或是直接手动分配分区，那么 <code>rebalance 监听器</code>是无效的</p>\n<p>rebalance 监听器有一个主要的接口回调类 <code>ConsumerRebalanceListener</code>, 里面有两个方法 <code>onPartitionsRevoked()</code> <code>onPartitionAssigned()</code>.<br>在开启新一轮的 rebalance 之前 会调用 <code>onPartitionsRevoked()</code><br>rebalance 完成后   会调用 <code>onPartitionAssigned()</code></p>\n<p>rebalance 监听器常见的用法就是 手动提交位移到第三方存储以及在 rebalance 前后执行一些必要的神级操作</p>\n<h2 id=\"解序列化-deserializer\"><a href=\"#解序列化-deserializer\" class=\"headerlink\" title=\"解序列化 deserializer\"></a>解序列化 deserializer</h2>","categories":["kafka"],"tags":["kafka","consumer"]},{"title":"Kafka-Producer","url":"//post/Kafka-Producer.html","content":"<blockquote>\n<p>kafka 负责向消息队列 写入消息。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><code>kafka producer</code> 要比 <code>kafka consumer</code> 简单一点，因为它不涉及复杂的组件管理，与其他的 <code>producer</code> 之间没有关联， 因此实现起来也比较简单。<br>目前， <code>kafka producer</code> 的首要功能就是向某个 <code>topic</code> 中的某个分区发送一条消息。<br>分区器(<code>partitioner</code>) 的作用就是决定消息要向 topic 的哪个的分区写入数据。</p>\n<p><strong>java-kafka-producer工作流程</strong><br><img src=\"/post/Kafka-Producer/java-kafka-producer%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg\"></p>\n<h2 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h2><h3 id=\"Producer-配置参数\"><a href=\"#Producer-配置参数\" class=\"headerlink\" title=\"Producer 配置参数\"></a>Producer 配置参数</h3><p><a href=\"http://kafka.apache.org/documentation/#producerconfigs\">参数配置以及默认值</a></p>\n<h4 id=\"常见配置参数\"><a href=\"#常见配置参数\" class=\"headerlink\" title=\"常见配置参数\"></a>常见配置参数</h4><ol>\n<li><p><strong>bootstrap.servers</strong><br>配置连接代理列表，不必包含Kafka集群的所有代理地址，当连接上一个代理后，会从集群元数据信息中获取其他存活的代理信息。但为了保证能够成功连上Kafka集群，在多代理集群的情况下，建议至少配置两个代理。</p>\n</li>\n<li><p><strong>key.serializer</strong><br>该参数就是为消息的key做序列化用的。这个参数指定的是实现了<code>org.apache.kafka.common.serialization.Serializer</code>接口的全限定名称。Kafka为大部分的初始类型（primitive type）默认提供了现成的序列化器。用户可以自定义序列化器，只要实现<code>Serializer</code>接口即可</p>\n</li>\n</ol>\n<p><strong>即使producer程序在发送消息时不指定key，这个参数也是必须要设置的，否则程序会抛出ConfigException异常，提示“key.serializer”参数无默认值，必须要配置</strong></p>\n<ol start=\"3\">\n<li>value.serializer<br>类似 key.serializer</li>\n</ol>\n<p><strong>这两个参数都必须是全限定名，只使用单独的类名是不行的。</strong></p>\n<ol start=\"4\">\n<li><p>client_id<br>客户端名称,用来追查日志的,默认是kafka-pythson-producer-# (#是个唯一编号)</p>\n</li>\n<li><p><strong>acks</strong><br> <code>acks</code> 指定了在给 producer 发送响应前，<code>leader broker</code> 必须要确保已成功写入该消息的副本数。当前 <code>acks</code> 有3个取值： <code>0</code> 、<code>1</code> 和 <code>all</code></p>\n<p> <strong>acks&#x3D;0</strong>: 设置成0表示producer完全不理睬leader broker端的处理结果。此时，producer发送消息后立即开启下一条消息的发送，根本不等待leader broker端返回结果。由于不接收发送结果，因此在这种情况下producer.send的回调也就完全失去了作用，即用户无法通过回调机制感知任何发送过程中的失败，所以acks&#x3D;0时producer并不保证消息会被发送成功。但凡是有利有弊，由于不需要等待响应结果，通常这种设置下producer的吞吐量是最高的。</p>\n<p> <strong>acks&#x3D;all或者-1</strong>: 表示当发送消息时，leader broker不仅会将消息写入本地日志，同时还会等待ISR中所有其他副本都成功写入它们各自的本地日志后，才发送响应结果给producer。显然当设置acks&#x3D;all时，只要ISR中至少有一个副本是处于“存活”状态的，那么这条消息就肯定不会丢失，因而可以达到很高的消息持久性，但通常这种设置下producer的吞吐量也是最低的。</p>\n<p> <strong>acks&#x3D;1</strong>: 是0和all折中的方案，也是默认的参数值。producer发送消息后leader broker仅将该消息写入本地日志，然后便发送响应结果给producer，而无须等待ISR中其他副本写入该消息。那么此时只要该leader broker一直存活，Kafka就能保证这条消息不丢失。这实际上是一种折中方案，既可以达到适当的消息持久性，同时也保证了producer端的吞吐量。</p>\n<table>\n<thead>\n<tr>\n<th>acks</th>\n<th>producer吞吐量</th>\n<th>消息持久性</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>最高</td>\n<td>最差</td>\n<td>1.完全不关心消息是否发送成功 <br>2.允许消息丢失（比如统计服务器日志等）</td>\n</tr>\n<tr>\n<td>1</td>\n<td>适中</td>\n<td>适中</td>\n<td>一般场景即可</td>\n</tr>\n<tr>\n<td>all或-1</td>\n<td>最差</td>\n<td>最高</td>\n<td>不能容忍消息丢失</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>buffer.memory</p>\n<p> 该参数指定了producer端用于缓存消息的缓冲区大小，单位是字节，默认值是33554432，即32MB。由于采用了异步发送消息的设计架构，Java版本producer启动时会首先创建一块内存缓冲区用于保存待发送的消息，然后由另一个专属线程负责从缓冲区中读取消息执行真正的发送。这部分内存空间的大小即是由buffer.memory参数指定的。若producer向缓冲区写消息的速度超过了专属I&#x2F;O线程发送消息的速度，那么必然造成该缓冲区空间的不断增大。此时producer会停止手头的工作等待I&#x2F;O线程追上来，若一段时间之后I&#x2F;O线程还是无法追上producer的进度，那么producer就会抛出异常并期望用户介入进行处理。</p>\n<p> 虽说producer在工作过程中会用到很多部分的内存，但我们几乎可以认为该参数指定的内存大小就是producer程序使用的内存大小。若producer程序要给很多分区发送消息，那么就需要仔细地设置这个参数以防止过小的内存缓冲区降低了producer程序整体的吞吐量</p>\n</li>\n<li><p>batch.size<br> batch.size是producer最重要的参数之一。<br> producer会将发往同一分区的多条消息封装进一个batch中。当batch满了的时候，producer会发送batch中的所有消息。<br> 不过，producer并不总是等待batch满了才发送消息，很有可能当batch还有很多空闲空间时producer就发送该batch。<br> 通常来说，一个小的batch中包含的消息数很少，因而一次发送请求能够写入的消息数也很少，所以producer的吞吐量会很低；但若一个batch非常之巨大，那么会给内存使用带来极大的压力，因为不管是否能够填满，producer都会为该batch分配固定大小的内存。因此batch.size参数的设置其实是一种时间与空间权衡的体现。</p>\n</li>\n<li><p>retries</p>\n<p> 重试发送次数,有时候网络出现短暂的问题的时候,会自动重发消息,前面提到了这个值是需要在acks&#x3D;1或all时候才有效.<br> 如果设置了该参数,但是s etting max_in_flight_requests_per_connection 没有设置为1的话,可能造成消息顺序的改变,因为如果2个 batches 发到同一个 partition, 但是第一个失败重发了,那么就会造成第二个 batches 跑到前面去了.<br> 默认值 0</p>\n<ul>\n<li><p>重试可能造成消息的重复发送<br>比如由于瞬时的网络抖动使得broker端已成功写入消息但没有成功发送响应给producer，因此producer会认为消息发送失败，从而开启重试机制。为了应对这一风险，Kafka要求用户在consumer端必须执行去重处理。另0.11.0.0版本开始支持“精确一次”处理语义。</p>\n</li>\n<li><p>重试可能造成消息乱序<br>当前 producer 会将多个消息发送请求（默认是5个）缓存再内存中，如果由于某种原因发生了消息发送重试，就可能造成消息流的乱序。为了避免乱序发生，Java版本 producer 提供了max.in.flight.request.per.connection 参数。一旦用户将此参数设置成1，producer将确保某一时刻只能发送一个请求。</p>\n</li>\n</ul>\n</li>\n<li><p>compression.type<br> compression.type参数设置producer端是否压缩消息，默认值是none，即不压缩消息。Kafka的producer端引入压缩后可以显著地降低网络I&#x2F;O传输开销从而提升整体的吞吐量，但也会增加producer端机器的CPU开销。另外，如果broker端的压缩参数设置的与producer不同，broker端在写入消息时也会额外使用CPU资源对消息进行对应的解压缩-重压缩操作。</p>\n<p> <strong>根据实际使用经验来看， producer 结合 <code>LZ4</code> 的性能是最好的</strong></p>\n</li>\n<li><p>inger.ms<br><code>linger.ms</code> 参数就是控制消息发送延时行为的。该参数默认值是0，表示消息需要被立即发送，无须关心 batch 是否被填满，大多数情况下这是合理的，毕竟我们总是希望消息被尽可能快地发送。不过这样做会拉低 producer 吞吐量，毕竟 producer 发送的每次请求中包含的消息数越多，producer 就越能将发送请求的开销摊薄到更多的消息上，从而提升吞吐量。</p>\n</li>\n<li><p>request.timeout.ms<br>当producer发送请求给 broker 后，broker 需要在规定的时间范围内将处理结果返还给producer。这段时间便由该参数控制的，默认是30秒。这就是说，如果broker在30秒内都没有给 producer 发送响应，那么 producer就会认为该请求超时了，并在回调函数中显示地抛出 TimeoutException 异常交由用户处理。</p>\n<p>默认的30秒对于一般的情况而言是足够的，但如果 producer 发送的负载很大，超时的情况就很容易碰到，此时就应该适当调整该参数值。</p>\n</li>\n<li><p>max.request.size<br>该参数用于控制 producer 发送请求的大小。实际上该参数控制的是 producer 端能够发送的最大消息的大小。由于请求有一些头部数据结构，因此包含一条消息的请求大小要比消息本身大。不过姑且把它当做请求的最大尺寸是安全的。如果 producer 要发送尺寸很大的消息，那么这个参数就是要被设置的。默认的1048576字节大小了，通常无法满足企业级消息的大小要求。</p>\n</li>\n</ol>\n<h2 id=\"Producer-分区机制\"><a href=\"#Producer-分区机制\" class=\"headerlink\" title=\"Producer 分区机制\"></a>Producer 分区机制</h2><p>kafka 提供了分区策略 以及对应的分区器(partiotioner) 供用户使用。随着 kafka 发布的默认的 <code>partitioner</code> 会尽力保证具有相同 <code>key</code> 的所有信息都会发送到相同的分区上。<br>如果没有指定 <code>key</code>, 则 该 <code>partitioner</code> 会选择 轮询 的方式来确保消息在 topic 的所有分区上均匀分配。</p>\n<h3 id=\"自定义分区机制\"><a href=\"#自定义分区机制\" class=\"headerlink\" title=\"自定义分区机制\"></a>自定义分区机制</h3><p>java 版本 producer 自带的 partitioner 会根据 murmur2 算法计算消息 key 的 hash 值，然后对总分区数球模得到消息要被发送到的目标分区号。</p>\n<p>要完成 自定的分区策略， 需要完成 2 件事</p>\n<ol>\n<li>实现 <code>org.apache.kafka.clients.producer.Partitioner</code> 接口</li>\n<li>在 KafkaProducer 的 Properties 对象设置 partitioner.class 参数</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Partitioner</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Configurable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Closeable</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/**\n     * 计算消息要被发送到那个分区\n     *\n     * @param topic The topic name\n     * @param key The key to partition on (or null if no key)\n     * @param keyBytes The serialized key to partition on( or null if no key)\n     * @param value The value to partition on or null\n     * @param valueBytes The serialized value to partition on or null\n     * @param cluster The current cluster metadata 集群元数据\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keyBytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> valueBytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cluster</span> cluster<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 关闭 partitioner\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>这两篇博客讲的挺好的</strong><br><a href=\"https://blog.csdn.net/u013256816/article/details/81123600\">Kafka分区分配策略（1）——RangeAssignor</a><br><a href=\"https://blog.csdn.net/u013256816/article/details/81123625\">Kafka分区分配策略（2）——RoundRobinAssignor和StickyAssignor</a></p>\n<h2 id=\"Producer-消息序列化\"><a href=\"#Producer-消息序列化\" class=\"headerlink\" title=\"Producer 消息序列化\"></a>Producer 消息序列化</h2><h2 id=\"Producer-拦截器\"><a href=\"#Producer-拦截器\" class=\"headerlink\" title=\"Producer 拦截器\"></a>Producer 拦截器</h2><p>定义消息拦截器 需要实现的接口是 <code>org.apache.kafka.clients.producerProducerInterceptor</code></p>\n<p><a href=\"https://blog.csdn.net/u013256816/article/details/78573425\">Kafka Producer拦截器</a></p>\n<h2 id=\"Producer-消息压缩\"><a href=\"#Producer-消息压缩\" class=\"headerlink\" title=\"Producer 消息压缩\"></a>Producer 消息压缩</h2><p>kafka 支持的压缩算法  lz4 &gt;&gt; snappy &gt;&gt; gzip</p>\n<h2 id=\"Producer-消息多线程处理\"><a href=\"#Producer-消息多线程处理\" class=\"headerlink\" title=\"Producer 消息多线程处理\"></a>Producer 消息多线程处理</h2><p>实际生产环境中， 一个朱用户线程 无法满足所需的吞吐量目标，因此需要构建多个线程同时给 kafka集群发送消息。</p>\n<ol>\n<li>多线程 单 kafkaPrducer 实例<br>这种方法 就是在多线程中共享一个 kafkaPrducer实例， 由于 kafkaPrducer 是线程安全的，所以这种方式也是<code>线程安全</code>的</li>\n<li>多线程 多 kafkaPrducer 实例<br>在每个Producer 主线程中构建一个 kafkaPrducer实例， 并且保证该实例在主线程中是<code>线程封闭(thread confinement)</code>的。<br>thread confinement 是保证线程安全的重要手段</li>\n</ol>\n<p><img src=\"/post/Kafka-Producer/%E4%B8%A4%E7%A7%8DkafkaProducer%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83.jpg\" alt=\"两种kafkaProducer使用方式比较\"></p>\n<p>对于分区数目较少的， 使用第一种方式较为合适，多个线程共享一个kafkaProducer实例。<br>如果分区数目超多， 使用第二种方式有较高的可控性</p>\n","categories":["kafka"],"tags":["kafak","producer"]},{"title":"Kafka 入门","url":"//post/Kafka-%E5%85%A5%E9%97%A8.html","content":"<p><a href=\"https://kafka.apache.org/\">英文文档</a> <em>|</em> <a href=\"http://kafka.apachecn.org/\">中文文档</a></p>\n<blockquote>\n<p>Kafka 是由 LinkedIn 开发的一个分布式的消息系统，使用 Scala 编写，它以可水平扩展和高吞吐率而被广泛使用。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Mac-安装kafka\"><a href=\"#Mac-安装kafka\" class=\"headerlink\" title=\"Mac 安装kafka\"></a>Mac 安装kafka</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># 会自动 安装会依赖zookeeper\nbrew install kafka\n\n# 启动 zookeeper\nzookeeper-server-start &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;zookeeper.properties &amp;\n\n# 启动 kafka\nkafka-server-start &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;server.properties &amp;\n\n#创建 topic\nkafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n\n# 查看创建的topic\nkafka-topics --list --zookeeper localhost:2181\n\n# 发送消息 输入\nkafka-console-producer --broker-list localhost:9092 --topic test\n# 在命令行输入消息并回车即可发送消息。\n# 默认每一行都是一条消息\n\n#kafka也提供了一个命令行消费者，接受消息并打印到标准输出。\nkafka-console-consume --bootstrap-server localhost:2181 --topic test --from-beginning\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置文件位置</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;server.properties\n&#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;zookeeper.properties<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"Kafka-架构\"><a href=\"#Kafka-架构\" class=\"headerlink\" title=\"Kafka 架构\"></a>Kafka 架构</h2><p><strong>BrokerKafka</strong> 集群包含一个或多个服务器，这种服务器被称为 broker<br><strong>Topic</strong> 逻辑上的概念,每条发布到 Kafka 集群的消息都有一个类别，这个类别被称为 Topic。（物理上不同 Topic 的消息分开存储，逻辑上一个 Topic 的消息虽然保存于一个或多个 broker 上但用户只需指定消息的 Topic 即可生产或消费数据而不必关心数据存于何处）<br><strong>Partition</strong> 是物理上的概念，每个 Topic 包含一个或多个 Partition.<br><strong>Producer</strong> 负责发布消息到 Kafka broker<br><strong>Consumer</strong> 消息消费者，向 Kafka broker 读取消息的客户端。<br><strong>Consumer Group</strong> 每个 Consumer 属于一个特定的 Consumer Group（可为每个 Consumer 指定 group name，若不指定 group name 则属于默认的 group）。</p>\n<blockquote>\n<p>对于传统的 message queue 而言，一般会删除已经被消费的消息，而 Kafka 集群会保留所有的消息，无论其被消费与否。<br>当然，因为磁盘限制，不可能永久保留所有数据（实际上也没必要），因此 Kafka 提供两种策略删除旧数据。</p>\n<blockquote>\n<p>一是基于时间，<br>二是基于 Partition 文件大小。</p>\n</blockquote>\n<p>例如可以通过配置 $KAFKA_HOME&#x2F;config&#x2F;server.properties，让 Kafka 删除一周前的数据，也可在 Partition 文件超过 1GB 时删除旧数据</p>\n</blockquote>\n<h2 id=\"Kafka-特性\"><a href=\"#Kafka-特性\" class=\"headerlink\" title=\"Kafka 特性\"></a>Kafka 特性</h2><ol>\n<li><p>高可用 HA</p>\n<p> 通过 Zookeeper, 主节点挂了，从节点进行选举</p>\n</li>\n<li><p>负载均衡 fail over</p>\n<p> 通过hash 算法 将 key 路由到 不同的分区<br> Zookeeper允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）</p>\n</li>\n<li><p>可扩展</p>\n<p> kafka集群支持 broker 水平扩展，热扩展</p>\n</li>\n<li><p>高吞吐率,低延时</p>\n<p> kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒，每个topic可以分多个partition, consumer group 对partition进行consume操作。<br> 高吞吐率 与 延时 是两个 相悖的概念，如果没2ms 处理 1条消息， 吞吐率 &#x3D; 500条消息&#x2F;s<br> 如果采用批处理，延时8ms发送100 条消息，相当于 （8+2）ms发送了 100 条消息， 吞吐率 &#x3D; 10,000&#x2F;s</p>\n<p> Kafka 发送数据：</p>\n<ol>\n<li><p>kafka 收到消息 现将消息写入页缓存中，而后由操作系统将消息写入磁盘</p>\n</li>\n<li><p>Kafka不予文件系统打交道,是交由操作系统将缓存中的数据写入磁盘</p>\n</li>\n<li><p>将数据写入磁盘采用append方式，顺序写入磁盘，效率高</p>\n<p> <img src=\"/post/Kafka-%E5%85%A5%E9%97%A8/speed.png\" alt=\"speed\"></p>\n</li>\n</ol>\n<p> Kafka 消费数据：<br> 4. kafka 消费数据 先从页缓存中读取，如果命中直接返回，不往硬盘中读取 零拷贝技术</p>\n</li>\n<li><p>可靠性</p>\n<p> 消息被持久化到本地磁盘，并且支持数据备份防止数据丢失</p>\n</li>\n<li><p>数据分区</p>\n<p> 消息可以被路由到不同的分区(hash 算法), 分区有 replica, 容错性</p>\n</li>\n<li><p>消费者多线程并行消费,高并发</p>\n<p> 支持数千个客户端同时读写</p>\n</li>\n</ol>\n<h2 id=\"Kafka-基本概念\"><a href=\"#Kafka-基本概念\" class=\"headerlink\" title=\"Kafka 基本概念\"></a>Kafka 基本概念</h2><h3 id=\"Message\"><a href=\"#Message\" class=\"headerlink\" title=\"Message\"></a>Message</h3><p><img src=\"/post/Kafka-%E5%85%A5%E9%97%A8/Kafka%E6%B6%88%E6%81%AF%E6%A0%BC%E5%BC%8F.jpg\" alt=\"Kafka消息格式\"></p>\n<p>key: 消息键值  分区时使用<br>value: 消息内容<br>timestamp: 消息发送时间戳,用于流式处理或其他依赖时间的处理语义</p>\n<p>属性: 1字节， 目前只是用了 最低三位 用于保存消息压缩类型，其余五位未使用。<br>     0 无压缩  1 gzip  2 Snappy 3 LZ4</p>\n<ul>\n<li><p>为什么 kafka 消息缓存放在了页缓存,而不是放在 java 堆上</p>\n<blockquote>\n<p>JMM 中,对象内存开销相当大。 堆上的数据量越大，GC的性能会下降很多<br>JAVA操作系统默认开启了页缓存机制，也就是说对上保存的对象很可能在页缓存中保留一份，开销大<br>Kafka 直接使用 ByteBuffer,而不是直接使用对象，占用空间少<br>大量使用页缓存而不是使用堆内存，当kafka broker进程崩溃时，堆上数据会消失一部分，而页缓存中的数据依然存在</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h3><p>Topic 是一个逻辑概念,是一个逻辑概念，我们通常用topic来区分业务，</p>\n<p>kafka 中的topic 会被多个消费者订阅，出于性能的考量，kafka 消息并不是 topic-message 两级结构，而是 topic-partation-message 三级结构来分散负载</p>\n<p>topic 下面可以有 多个 partation, 一般 partation 数目 大于等于 3</p>\n<h3 id=\"partation\"><a href=\"#partation\" class=\"headerlink\" title=\"partation\"></a>partation</h3><p><img src=\"/post/Kafka-%E5%85%A5%E9%97%A8/topic-partation.png\" alt=\"topic-partation\"><br>kafka 引入分区的概念 并没有太多的业务含义，而只是单纯的想提高吞吐量，因此创建kafka topic的时候， 可以根据集群配置设置具体的partation数，实现整体性最大化</p>\n<p>partation有自己专属的 分区号，用户唯一能对partation 的操作就是在partation尾部追加写入消息。partation 上的消息都有一个唯一的 offset.用来定位消息</p>\n<h3 id=\"offset\"><a href=\"#offset\" class=\"headerlink\" title=\"offset\"></a>offset</h3><p><img src=\"/post/Kafka-%E5%85%A5%E9%97%A8/%E6%B6%88%E6%81%AF%E4%BD%8D%E7%A7%BB%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85%E4%BD%8D%E7%A7%BB.jpg\" alt=\"消息位移与消费者位移\"><br>显然，每条消息在 partation 的位置是固定的，但消费该partation 的消费者位移随着消费进度不断前移。</p>\n<p>综上，topic partation offset, 我们 可以通过 &lt;topic, partation, offset&gt; 唯一确定一条消息的位置。</p>\n<h3 id=\"replica\"><a href=\"#replica\" class=\"headerlink\" title=\"replica\"></a>replica</h3><p>kafka  partation 是 有序消息日志， 那么一定不能只有一份日志。否则一旦持有该partaion的broker down了，就会造成数据丢失。 分布式系统必然要实现高可靠性。目前有效地方式–&gt; 数据冗余，也就是备份多份日志。这些备份的日志 在 kafka里称谓 replic。</p>\n<ul>\n<li>当某个topic的replication-factor为N且N大于1时，每个Partition都会有N个副本(Replica)。kafka的replica包含leader与follower。</li>\n<li>Replica的个数小于等于Broker的个数，也就是说，对于每个Partition而言，每个Broker上最多只会有一个Replica，因此可以使用Broker id 指定Partition的Replica。</li>\n<li>所有Partition的Replica默认情况会均匀分布到所有Broker上。</li>\n</ul>\n<p>leader replica 供客户端读写，follower replica 读客户端不可见，一旦 leader replica 所在 broker宕机，就从follower 中通过选举方式 选出一个 leader.</p>\n<h3 id=\"Leader-和-follower\"><a href=\"#Leader-和-follower\" class=\"headerlink\" title=\"Leader 和 follower\"></a>Leader 和 follower</h3><p>kafka 的 replica 分为 leader 和 follower, (取代了 之前的 master slave)</p>\n<p>leader 负责对外提供读写 服务，<br>follower从 leader 同步数据，充当leader的 候补</p>\n<p>kafka保证 同一个 topic 的 多个 partation 一定不会再 同一个 broker上。</p>\n<h3 id=\"ISR\"><a href=\"#ISR\" class=\"headerlink\" title=\"ISR\"></a>ISR</h3><p>IN-SYNC Replica 与 leader replica 保持同步的 replica 集合</p>\n<p>kafka 承诺 只要这个集合中 至少存在一个 replica, 那些‘已提交’状态的数据就不会丢失。 两个关键点:</p>\n<ol>\n<li>ISR 中 至少存在一个 ‘活着的’ replica</li>\n<li>‘已提交’的消息</li>\n</ol>\n<p><img src=\"/post/Kafka-%E5%85%A5%E9%97%A8/ISR.png\" alt=\"ISR\"></p>\n<h2 id=\"Kafka-使用场景\"><a href=\"#Kafka-使用场景\" class=\"headerlink\" title=\"Kafka 使用场景\"></a>Kafka 使用场景</h2><h3 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h3><p>message Queue</p>\n<h3 id=\"网络行为日志追踪\"><a href=\"#网络行为日志追踪\" class=\"headerlink\" title=\"网络行为日志追踪\"></a>网络行为日志追踪</h3><p>重建用户行为追踪，用户对网站的点击量大，这时kafka的 超强吞吐量就有了用武之地</p>\n<h3 id=\"审计数据收集\"><a href=\"#审计数据收集\" class=\"headerlink\" title=\"审计数据收集\"></a>审计数据收集</h3><h3 id=\"日志收集\"><a href=\"#日志收集\" class=\"headerlink\" title=\"日志收集\"></a>日志收集</h3><p>kafka 最常用的 使用方式,日志收集 汇总 统计</p>\n<h3 id=\"Event-Sourcing\"><a href=\"#Event-Sourcing\" class=\"headerlink\" title=\"Event Sourcing\"></a>Event Sourcing</h3><h3 id=\"流式处理\"><a href=\"#流式处理\" class=\"headerlink\" title=\"流式处理\"></a>流式处理</h3><p>spark streaming, apache fliink, apache storm</p>\n","categories":["kafka"],"tags":["kafka"]},{"title":"Linux常用命令","url":"//post/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","content":"<blockquote>\n<p>记录一下 CentO7 中常用的命令</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>命令：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">rpm -q package-name     #检查包是否被安装\nrpm -qa                 #列出所有安装的包\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>shell 脚本参数 传参数<a href=\"https://www.cnblogs.com/davygeek/p/5670212.html\">$$$</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">变量</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0</td>\n<td align=\"center\">当前脚本的文件名</td>\n</tr>\n<tr>\n<td align=\"center\">$n</td>\n<td align=\"center\">传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</td>\n</tr>\n<tr>\n<td align=\"center\">$#</td>\n<td align=\"center\">传递给脚本或函数的参数个数。</td>\n</tr>\n<tr>\n<td align=\"center\">$*</td>\n<td align=\"center\">传递给脚本或函数的所有参数。</td>\n</tr>\n<tr>\n<td align=\"center\">$@</td>\n<td align=\"center\">传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</td>\n</tr>\n<tr>\n<td align=\"center\">$?</td>\n<td align=\"center\">上个命令的退出状态，或函数的返回值。</td>\n</tr>\n<tr>\n<td align=\"center\">$$</td>\n<td align=\"center\">当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td>\n</tr>\n</tbody></table>\n<h2 id=\"Linux-corn\"><a href=\"#Linux-corn\" class=\"headerlink\" title=\"Linux corn\"></a>Linux corn</h2><p><a href=\"https://www.cnblogs.com/longjshz/p/5779215.html\">定时任务</a></p>\n<table>\n<thead>\n<tr>\n<th>代表意义</th>\n<th>分钟</th>\n<th>小时</th>\n<th>日期</th>\n<th>月份</th>\n<th>周</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数字范围</td>\n<td>0~59</td>\n<td>0~23</td>\n<td>1~31</td>\n<td>1~12</td>\n<td>0~7</td>\n<td>需要执行的命令</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># For details see man 4 crontabs\n\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# | .------------- hour (0 - 23)\n# | | .---------- day of month (1 - 31)\n# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...\n# | | | | .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# | | | | |\n# * * * * * user-name command to be executed\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h2><p>sed命令是一个面向字符流的非交互式编辑器，也就是说<em>sed不允许用户与它进行交互操作</em>。sed是按行来处理文本内容的。在<strong>shell</strong>中，使用sed来批量修改文本内容是非常方便的。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sed\n选项与参数：\n-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。\n-e ：直接在命令列模式上进行 sed 的动作编辑；\n-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；\n-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)\n-i ：直接修改读取的文件内容，而不是输出到终端。\n\nfunction：\na ：新增行， a 的后面可以是字串，而这些字串会在新的一行出现(目前的下一行)\nc ：取代行， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行\nd ：删除行，因为是删除，所以 d 后面通常不接任何参数，直接删除地址表示的行；\ni ：插入行， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；\np ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行\ns ：替换，可以直接进行替换的工作,通常这个 s 的动作可以搭配正规表示法，例如 1,20s&#x2F;old&#x2F;new&#x2F;g 一般是替换符合条件的字符串而不是整行\n\n一般function的前面会有一个地址的限制，例如 [地址]function，表示我们的动作要操作的行。下面我们通过具体的例子直观的看看sed的使用方法。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"gt-gt-与-gt\"><a href=\"#gt-gt-与-gt\" class=\"headerlink\" title=\"&gt;&gt; 与 &gt;\"></a>&gt;&gt; 与 &gt;</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&gt; : 会重写文件，如果文件里面有内容会覆盖。\n&gt;   是定向输出到文件，如果文件不存在，就创建文件；如果文件存在，就将其清空。\n   一般我们备份清理日志文件的时候，就是这种方法：先备份日志，再用&#96;&gt;&#96;，将日志文件清空（文件大小变成0字节）。\n&gt;&gt; :追加文件，也就是如果文件里面有内容会把新内容追加到文件尾。\n    这个是将输出内容追加到目标文件中。如果文件不存在，就创建文件。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"shell-字符串\"><a href=\"#shell-字符串\" class=\"headerlink\" title=\"shell 字符串\"></a>shell 字符串</h3><p>“” 与 ‘’<br><strong>单引号</strong>里的任何字符都会原样输出，单引号字符串中的变量是无效的；<br><strong>单引号</strong>字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</p>\n<p><strong>双引号</strong>里可以有变量<br><strong>双引号</strong>里可以出现转义字符</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">home&#x3D;tj\necho &quot;hello, $&#123;home&#125;&quot;\necho &#39;hello, $&#123;home&#125;&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"命令-grep\"><a href=\"#命令-grep\" class=\"headerlink\" title=\"命令 grep\"></a>命令 grep</h3><ol>\n<li>作用<br>​    Linux系统中grep命令是一种强大的文本搜索工具，</li>\n<li>它能使用正则表达式搜索文本，并把匹 配的行打印出来。</li>\n<li>grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。</li>\n</ol>\n<h4 id=\"主要参数\"><a href=\"#主要参数\" class=\"headerlink\" title=\"主要参数\"></a>主要参数</h4><p> -a或–text   不要忽略二进制的数据。<br>  -A&lt;显示列数&gt;或–after-context&#x3D;&lt;显示列数&gt;   除了显示符合范本样式的那一列之外，并显示该列之后的内容。<br>  -b或–byte-offset   在显示符合范本样式的那一列之前，标示出该列第一个字符的位编号。<br>  -B&lt;显示列数&gt;或–before-context&#x3D;&lt;显示列数&gt;   除了显示符合范本样式的那一列之外，并显示该列之前的内容。<br>  -c或–count   计算符合范本样式的列数。<br>  -C&lt;显示列数&gt;或–context&#x3D;&lt;显示列数&gt;或-&lt;显示列数&gt;   除了显示符合范本样式的那一列之外，并显示该列之前后的内容。<br>  -d&lt;进行动作&gt;或–directories&#x3D;&lt;进行动作&gt;   当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。<br>  -e&lt;范本样式&gt;或–regexp&#x3D;&lt;范本样式&gt;   指定字符串做为查找文件内容的范本样式。<br>  -E或–extended-regexp   将范本样式为延伸的普通表示法来使用。<br>  -f&lt;范本文件&gt;或–file&#x3D;&lt;范本文件&gt;   指定范本文件，其内容含有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每列一个范本样式。<br>  -F或–fixed-regexp   将范本样式视为固定字符串的列表。<br>  -G或–basic-regexp   将范本样式视为普通的表示法来使用。<br>  -h或–no-filename   在显示符合范本样式的那一列之前，不标示该列所属的文件名称。<br>  -H或–with-filename   在显示符合范本样式的那一列之前，表示该列所属的文件名称。<br>  -i或–ignore-case   忽略字符大小写的差别。<br>  -l或–file-with-matches   列出文件内容符合指定的范本样式的文件名称。<br>  -L或–files-without-match   列出文件内容不符合指定的范本样式的文件名称。<br>  -n或–line-number   在显示符合范本样式的那一列之前，标示出该列的列数编号。<br>  -q或–quiet或–silent   不显示任何信息。<br>  -r或–recursive   此参数的效果和指定“-d recurse”参数相同。<br>  -s或–no-messages   不显示错误信息。<br>  <strong>-v或–revert-match   反转查找。</strong><br>  -V或–version   显示版本信息。<br>  <strong>-w或–word-regexp   只显示全字符合的列。</strong>如 “grep -w magic” 匹配 magic 不匹配magical<br>  -x或–line-regexp   只显示全列符合的列。<br>  -y   此参数的效果和指定“-i”参数相同。</p>\n<p>举例： 查找 &#x2F;etc&#x2F;profile文件 去掉 空行，去掉注释行(以#开头)<br>grep -v ‘^$’ &#x2F;etc&#x2F;profile |grep -v ‘^#’</p>\n<h3 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h3><p><img src=\"http://blog.chinaunix.net/uid-23302288-id-3785105.html\" alt=\"awk命令详解\"></p>\n<p>awk是行处理器: 相比较屏幕处理的优点，在处理庞大文件时不会出现内存溢出或是处理缓慢的问题，通常用来格式化文本信息</p>\n<p>awk处理过程: 依次对每一行进行处理，然后输出</p>\n<p>awk:（将一行分为多个字段做处理）（重点）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">awk [-F  field-separator]  &#39;commands&#39;  input-file(s)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其中，<em>commands</em> 是真正<em>awk</em>命令，*[-F域分隔符]*是可选的。default : 空格 * input-file(s) *是待处理的文件。<br>在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">last -n 5 | awk  &#39;&#123;print $1&#125;&#39; # 去除最后5行  打印第一个字段(域)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-一些注意的地方\" data-language=\"一些注意的地方\"><code class=\"language-一些注意的地方\">$0           表示整个当前行\n$1           每行第一个字段\nNF          字段数量变量\nNR          每行的记录号，多文件记录递增\nFNR        与NR类似，不过多文件记录不递增，每个文件都从1开始\n\\t            制表符\n\\n           换行符\nFS          BEGIN时定义分隔符\nRS       输入的记录分隔符， 默认为换行符(即文本是按一行一行输入)\n~            匹配，与&#x3D;&#x3D;相比不是精确比较\n!~           不匹配，不精确比较\n&#x3D;&#x3D;         等于，必须全部相等，精确比较\n!&#x3D;           不等于，精确比较\n&amp;&amp;　     逻辑与\n||             逻辑或\n+            匹配时表示1个或1个以上\n&#x2F;[0-9][0-9]+&#x2F;   两个或两个以上数字\n&#x2F;[0-9][0-9]*&#x2F;    一个或一个以上数字\nFILENAME 文件名\nOFS      输出字段分隔符， 默认也是空格，可以改为制表符等\nORS        输出的记录分隔符，默认为换行符,即处理结果也是一行一行输出到屏幕\n-F&#39;[:#&#x2F;]&#39;   定义三个分隔符<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"curl-命令\"><a href=\"#curl-命令\" class=\"headerlink\" title=\"curl 命令\"></a>curl 命令</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常见参数\n    -A&#x2F;--user-agent &lt;string&gt; 设置用户代理发送给服务器，即告诉服务器浏览器为什么\n    -basic 使用HTTP基本验证\n    --tcp-nodelay 使用TCP_NODELAY选项\n    -e&#x2F;--referer &lt;URL&gt; 来源网址，跳转过来的网址\n    --cacert &lt;file&gt; 指定CA证书 (SSL)\n    --compressed 要求返回是压缩的形势，如果文件本身为一个压缩文件，则可以下载至本地\n    -H&#x2F;--header &lt;line&gt;自定义头信息传递给服务器\n    -I&#x2F;--head 只显示响应报文首部信息\n    --limit-rate &lt;rate&gt; 设置传输速度\n    -u&#x2F;--user &lt;user[:password]&gt;设置服务器的用户和密码\n    -0&#x2F;--http1.0 使用HTTP 1.0\n    -o&#x2F;--output\t把输出写到该文件中(必须指定文件绝对路径)\n    -s&#x2F;--silent\t静默模式。不输出任何东西<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>举例：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#取URL返回状态码：\ncurl -s -m 10 -o &#x2F;dev&#x2F;null -w %&#123;http_code&#125; https:&#x2F;&#x2F;www.baidu.com\n\n#检查一批URL的HTTP状态：\ncat url.txt|while read line; do curl -I $line -m 5 --connect-timeout 5 -o &#x2F;dev&#x2F;null -s -w &quot;$line &quot;%&#123;http_code&#125;&quot;\\n&quot;; done&gt;ok.txt\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"linux中-x2F-dev-x2F-null命令\"><a href=\"#linux中-x2F-dev-x2F-null命令\" class=\"headerlink\" title=\"linux中 &#x2F;dev&#x2F;null命令\"></a>linux中 &#x2F;dev&#x2F;null命令</h3><p>&#x2F;dev&#x2F;null ：代表空设备文件<br>0 :表示键盘输入(stdin) </p>\n<blockquote>\n<p>：代表重定向到哪里，例如：echo “123” &gt; &#x2F;home&#x2F;123.txt<br>1  ：表示标准输出（stdout），系统默认值是1，所以”&gt;&#x2F;dev&#x2F;null”等同于”1&gt;&#x2F;dev&#x2F;null”<br>2  ：表示标准错误(stderr)<br>&amp;  ：表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1</p>\n</blockquote>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#1、禁止标准输出\n\n[root@zhoucentos log]# cat filename\nwo ai wo jia\n[root@zhoucentos log]# cat filename &gt;&#x2F;dev&#x2F;null\n\n#2、禁止标准错误\n\n[root@zhoucentos log]# rm filename1 \nrm: 无法删除&quot;filename1&quot;: 没有那个文件或目录\n[root@zhoucentos log]# rm filename1 2&gt;&#x2F;dev&#x2F;null\n\n#3、禁止标准输出和标准错误\n\n[root@zhoucentos log]# rm filename1\nrm: 无法删除&quot;filename1&quot;: 没有那个文件或目录\n[root@zhoucentos log]# rm filename1 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1\n\n#4、清除文件的内容\n\n[root@zhoucentos log]# cat filename\nwo ai wo jia\n[root@zhoucentos log]# cat &#x2F;dev&#x2F;null &gt; filename\n[root@zhoucentos log]# cat filename\n\ncommand &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp; &#x3D;&#x3D; command 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;\n\n#1)command:表示shell命令或者为一个可执行程序\n#2)&gt;:表示重定向到哪里\n#3)&#x2F;dev&#x2F;null:表示Linux的空设备文件\n#4)2:表示标准错误输出\n#5)&amp;1:&amp;表示等同于的意思,2&gt;&amp;1,表示2的输出重定向等于于1\n#6)&amp;:表示后台执行,即这条指令执行在后台运行\n\n#1&gt;&#x2F;dev&#x2F;null:表示标准输出重定向到空设备文件,也就是不输出任何信息到终端,不显示任何信息。 \n#2&gt;&amp;1:表示标准错误输出重定向等同于标准输出,因为之前标准输出已经重定向到了空设备文件,所以标准错误输出也重定向到空设备文件。\n\n#这条命令的意思就是在后台执行这个程序,并将错误输出2重定向到标准输出1,然后将标准输出1全部放到&#x2F;dev&#x2F;null文件,也就是清空. \n#所以可以看出” &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 “常用来避免shell命令或者程序等运行中有内容输出。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"if-判断\"><a href=\"#if-判断\" class=\"headerlink\" title=\"if 判断\"></a>if 判断</h2><ol>\n<li>条件测试的表达式：</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">    [ expression ]  # 括号两端必须要有空格\n    [[ expression ]] # 括号两端必须要有空格\n    test expression\n组合测试条件：\n\n-a  # : and\n-o  # : or\n!   # :  非<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>整数比较：</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">-eq # 测试两个整数是否相等\n-ne # 测试两个整数是否不等\n-gt # 测试一个数是否大于另一个数\n-lt # 测试一个数是否小于另一个数\n-ge # 大于或等于\n-le # 小于或等于\n# 命令间的逻辑关系\n\n&amp;&amp;  # 逻辑与：\n        # 第一个条件为假 第二个条件不用在判断，最总结果已经有\n        # 第一个条件为真，第二个条件必须得判断\n\n|| # 逻辑或<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>字符串比较</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&#x3D;&#x3D; # 等于  两边要有空格\n!&#x3D; # 不等\n&gt;  # 大于\n&lt;  # 小于<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>文件测试</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">-z string 测试指定字符是否为空，空着真，非空为假\n-n string 测试指定字符串是否为不空，空为假 非空为真\n-e FILE 测试文件是否存在\n-f file 测试文件是否为普通文件\n-d file 测试指定路径是否为目录\n-r file 测试文件对当前用户是否可读\n-w file 测试文件对当前用户是否可写\n-x file 测试文件对当前用户是都可执行\n-z  是否为空  为空则为真\n-a  是否不空<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"iconv-命令\"><a href=\"#iconv-命令\" class=\"headerlink\" title=\"iconv 命令\"></a>iconv 命令</h2><p><code>iconv</code> 命令是<code>linux</code>下用于文件转编码的常用命令，对于同时使用windows系统和linux系统的同学来说文件转编码也是经常遇到的操作。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"> # 输入&#x2F;输出格式规范：\n  -f, --from-code&#x3D;名称     #原始文本编$$码\n  -t, --to-code&#x3D;名称         #输出编码\n\n# 信息：\n  -l, --list                 　　 #列举所有已知的字符集\n\n# 输出控制：\n  -c                         　　#从输出中忽略无效的字符\n  -o, --output&#x3D;FILE        #输出文件\n  -s, --silent                   #关闭警告\n      --verbose                #打印进度信息\n  -?, --help                    #给出该系统求助列表\n      --usage                   #给出简要的用法信息\n  -V, --version                #打印程序版本号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"SCP\"><a href=\"#SCP\" class=\"headerlink\" title=\"SCP\"></a>SCP</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">\n#  本地向服务器上传文件\nscp -r &#x2F;path&#x2F;to&#x2F;file username@host:&#x2F;path&#x2F;to.file\n\n# 从服务器下载文件\n\nscp -r username@host:&#x2F;path&#x2F;to.file &#x2F;path&#x2F;to&#x2F;file\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","categories":["linux"],"tags":["linux","centos7"]},{"title":"Mysql索引原理","url":"//post/Mysql%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86.html","content":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><blockquote>\n<p>在系统中，为了提高查询性能，<br>这里 主要记录 InnoDB存储引擎的索引，<br>InnoDB 支持一下几种常见的索引 <code>B+Tree索引</code>  <code>全文索引</code>  <code>Hash索引</code></p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"为什么要有索引？\"><a href=\"#为什么要有索引？\" class=\"headerlink\" title=\"为什么要有索引？\"></a>为什么要有索引？</h2><p>索引在MySQL中也叫做 <code>键</code>，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能非常关键，<br>尤其是当表中的数据量越来越大时，索引对于性能的影响愈发重要。<br>索引优化应该是对查询性能优化最有效的手段了。索引能够轻易将查询性能提高好几个数量级。</p>\n<h2 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a>索引的数据结构</h2><p>任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把<code>磁盘IO次</code>数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？ –&gt; <code>B+树</code> 应运而生。</p>\n<p><img src=\"/post/Mysql%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/%E4%B8%80%E6%A3%B5%E9%AB%98%E5%BA%A6%E4%B8%BA2%E7%9A%84B+Tree.jpg\" alt=\"一棵高度为2的B+Tree.jpg\"></p>\n<blockquote>\n<p>叶子节点通过双向链表进行连接</p>\n</blockquote>\n<h3 id=\"B-Tree的查找过程\"><a href=\"#B-Tree的查找过程\" class=\"headerlink\" title=\"B+Tree的查找过程\"></a>B+Tree的查找过程</h3><p><img src=\"/post/Mysql%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/B+Tree.png\"></p>\n<p>浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p>\n<p>如图所示，如果要查找数据项<code>29</code>，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计<code>三次IO</code>。</p>\n<blockquote>\n<p>真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，<br>如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高. </p>\n</blockquote>\n<h3 id=\"B-Tree-性质\"><a href=\"#B-Tree-性质\" class=\"headerlink\" title=\"B+Tree 性质\"></a>B+Tree 性质</h3><ol>\n<li><p><strong>索引字段要尽量的小</strong>(树的高度越低,IO次数就少):通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h&#x3D;㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m &#x3D; 磁盘块的大小 &#x2F; 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比 <code>bigint</code> 8字节少一半。这也是为什么 <code>B+Tree</code> 要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</p>\n</li>\n<li><p><strong>索引的最左匹配特性(即从左往右匹配)</strong>:当 B+Tree 的数据项是复合的数据结构，比如<code>idx_name_age_sex(name,age,sex)</code>的时候，B+Tree 是按照从左到右的顺序来建立搜索树的，比如当<code>(张三,20,F)</code>这样的数据来检索的时候，B+Tree 会优先比较 <code>name</code> 来确定下一步的所搜方向，如果 <code>name</code> 相同再依次比较 <code>age</code> 和 <code>sex</code>，最后得到检索的数据；但当<code>(20,F)</code>这样的没有<code>name</code>的数据来的时候，B+Tree 就不知道下一步该查哪个节点，因为建立搜索树的时候 <code>name</code> 就是第一个比较因子，必须要先根据 <code>name</code> 来搜索才能知道下一步去哪里查询。比如当<code>(张三,F)</code>这样的数据来检索时，B+Tree 可以用 <code>name</code> 来指定搜索方向，但下一个字段 <code>age</code> 的缺失，所以只能把名字等于<code>张三</code>的数据都找到，然后再匹配性别是<code>F</code>的数据了， 这个是非常重要的性质，即索引的<code>最左匹配特性</code>。</p>\n</li>\n</ol>\n<h2 id=\"索引的类型\"><a href=\"#索引的类型\" class=\"headerlink\" title=\"索引的类型\"></a>索引的类型</h2><ul>\n<li>B+Tree 索引(innoDB 默认支持的索引)</li>\n<li>Hash索引<br>hash类型的索引: 查询单条快，范围查询慢<br>B+Tree类型的索引: B+Tree,层数越多,数据量指数级增长（我们就用它，因为<code>innodb</code>默认支持它）</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#不同的存储引擎支持的索引类型也不一样\nInnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；\nMyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；\nMemory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；\nNDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；\nArchive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"B-Tree-索引\"><a href=\"#B-Tree-索引\" class=\"headerlink\" title=\"B+Tree 索引\"></a>B+Tree 索引</h3><p><code>B+Tree</code> 索引 是 B+Tree 在数据库中的实现，但是 <code>B+tree</code> 索引在数据库中有一个特点是高扇出性，因此在数据库中， <code>B+Tree</code> 的高度一般在 2-4 层.<br>数据库中 <code>B+Tree</code> 索引一般可以分为 <code>聚簇索引(cluster index)</code> 和 <code>辅助索引(secondary index)</code>,但是不管是<code>聚簇索引 </code>还是 <code>辅助索引</code>，其内部都是<code>B+Tree</code>， 即高度平衡的，叶子节点存放着所有的数据。 <code>聚簇索引</code> 与 <code>辅助索引</code>不同的是叶子节点存放的是一整行的数据。</p>\n<h3 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h3><p>InnoDB 存储引擎表是索引组织表， 即表中数据按照主键顺序存放。 而<code>聚簇索引(cluster index)</code>就是按照每张表的主键构造一颗 <code>B+Tree</code> 同时叶子节点存放的是整张表的行记录数据。也将聚簇索引的叶子节点称为数据页。<code>聚簇索引</code>的这个特性决定了索引组织表中数据也是索引表的一部分，同 <code>B+Tree</code> 数据结构一样，每个数据页都通过一个双向链表进行连接。</p>\n<p>由于实际数据页只能按照一课B+Tree 进行排序，因此每张表只能有一个聚簇索引。 大多数情况下，查询优化器倾向于采用聚簇索引。因为聚簇索引能够在叶子节点上直接查找到数据。此外，由于定义了数据的逻辑顺序，聚簇索引能够很快的访问针对范围值的查询。查询优化器能够快速的发现这一范围的数据页需要扫描。</p>\n<h3 id=\"辅助索引\"><a href=\"#辅助索引\" class=\"headerlink\" title=\"辅助索引\"></a>辅助索引</h3><p>对于<code>辅助索引(secondary Index)</code>, 叶子节点并不包含航记录的全部数据。 叶子节点除了包含键值以外，每个叶子节点的中的所银行中还包含了一个<code>书签(bookMark)</code>。 该 bookMark 用来告诉<code>InnoDB 存储引擎</code>可以在哪里找到与索引相对应的行数据。由于INnoDB存储引擎表是索引组织表，因此 InnoDB 存储引擎的<code>辅助索引的书签</code>就是相应的行数据的<code>聚簇索引键</code>。<br>下图显示了 <code>InnoDB</code>中 <code>聚簇索引</code> 与 <code>辅助索引的</code>关系。<br><img src=\"/post/Mysql%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E4%B8%8E%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E7%9A%84%E5%85%B3%E7%B3%BB.jpg\" alt=\"聚簇索引与辅助索引的关系\"></p>\n<p>辅助索引的存在并不影响数据在聚簇索引中的组织，因此每张表中可以有多个辅助索引。<br>当通过辅助索引来寻找数据时，InnoDB存储引擎会遍历辅助索引并通过叶子级别的指针获得主键索引的主键，然后通过主键索引找到一个完成的行记录。<br>假设辅助索引树高3层，聚集索引树为3层，那么根据辅助索引查找数据，需要先经过3次IO找到主键，再经过3次IO找到行做在的数据页，共6次</p>\n<h3 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h3><p>本质上说 联合索引内部也是一棵B+Tree ，不同的是联合索引的键值数量不是<code>1</code> 而是 <code>&gt;=2</code>.</p>\n<p>最左匹配原则</p>\n<h3 id=\"覆盖索引-Covering-index\"><a href=\"#覆盖索引-Covering-index\" class=\"headerlink\" title=\"覆盖索引 (Covering index)\"></a>覆盖索引 (Covering index)</h3><blockquote>\n<p>即 通过辅助索引中就可以查询到记录，而不需要通过聚簇索引。<br>使用覆盖索引的好处是辅助索引不包含整行记录的所有信息，故其大小远小于聚簇索引，因此可以减少大量的IO操作</p>\n</blockquote>\n<ul>\n<li>从辅助索引中直接获取记录</li>\n<li>对于统计操作，例如count(1)，有可能联合索引，右边也会匹配（优化器自己会做），因为count(1)操作不需要获取整行的详细数据，所以不需要去聚集索引的叶子节点去获取数据，直接在辅助索引树中就完成了操作</li>\n<li>select username from xxx where username&#x3D;’lisi’，如果username是辅助索引，那么整个查询在辅助索引树上就可以完成，因为辅助索引树上虽然没有保存完整的行，但是保存着&lt;username,lisi&gt;这个key-value对；如果select username, age from xxx where username&#x3D;’lisi’，那么就要走聚集索引了</li>\n</ul>\n<h2 id=\"Hash-算法\"><a href=\"#Hash-算法\" class=\"headerlink\" title=\"Hash 算法\"></a>Hash 算法</h2><p>Hash 算法是一种常见的算法，时间复杂度为 O(1), 每个数据库应用中都存在这种数据库结构。</p>\n<p>对于可能产生的 <code>Hash碰撞</code>， mysql 采用<code>链表</code>的方式解决。</p>\n<h2 id=\"全文检索\"><a href=\"#全文检索\" class=\"headerlink\" title=\"全文检索\"></a>全文检索</h2><p>由于 B+Tree 索引的特点， 可以通过索引字段的前缀(prefix)进行查找。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 如下语句 B+Tree 索引是支持的</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> blog <span class=\"token keyword\">WHERE</span> content <span class=\"token operator\">like</span> <span class=\"token string\">'xxx%'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><code>MySQL5.6</code>版本开始支持 InnoDB引擎 的全文索引，语法层面上大多数兼容之前 MyISAM s的全文索引模式。所谓全文索引，是一种通过建立倒排索引，快速匹配文档的方式。</p>\n</blockquote>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 创建全文索引</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> tb_name <span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> fulltext<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>详细了解: <a href=\"http://mysql.taobao.org/monthly/2015/10/01/\">InnoDB 全文索引简介</a></p>\n<h3 id=\"倒排索引\"><a href=\"#倒排索引\" class=\"headerlink\" title=\"倒排索引\"></a>倒排索引</h3><p>全文检索通常使用倒排索引(inverted index)实现。倒排索引同 B+Tree 索引一样，也是一种索引结构。他在辅助表中存储了单词与单词自身在一个或者多个文档中所在位置之间的映射。这种关联关系通过关联那数组实现。</p>\n","categories":["mysql"],"tags":["mysql","索引"]},{"title":"Maven dependency Scope","url":"//post/Maven-dependency-Scope.html","content":"<p><a href=\"http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope\">官网-scope描述</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Maven-的作用域分为6种\"><a href=\"#Maven-的作用域分为6种\" class=\"headerlink\" title=\"Maven 的作用域分为6种\"></a>Maven 的作用域分为6种</h2><blockquote>\n<p><a href=\"https://juejin.im/post/6844903987322290189\">optional(可选的)</a></p>\n</blockquote>\n<ol>\n<li>compile</li>\n</ol>\n<p>  默认的scope，表示 dependency 都可以在整个生命周期(<code>编译</code> <code>运行</code> <code>测试</code>)中使用. 而且这些dependencies  可以<code>传递依赖</code></p>\n<ol start=\"2\">\n<li>provided</li>\n</ol>\n<p>跟compile相似，但是表明了dependency 由JDK或者容器提供，例如Servlet API和一些Java EE APIs。这个scope 只能作用在<code>编译</code>和<code>测试</code>时，同时<code>没有传递性</code>。<br>使用这个时，<strong>不会将包打入本项目中，只是依赖过来</strong>.<br>使用默认或其他时，会将依赖的项目打成jar包，放入本项目的Lib里</p>\n<blockquote>\n<p>servlet-api，因为servlet-api，tomcat等web服务器已经存在了，如果再打包会冲突</p>\n</blockquote>\n<ol start=\"3\">\n<li>runtime</li>\n</ol>\n<p>表示dependency不作用在编译时，但会作用在<code>运行</code>和<code>测试</code>时</p>\n<ol start=\"4\">\n<li>test</li>\n</ol>\n<p>表示dependency作用在<code>测试</code>时，不作用在运行时。</p>\n<ol start=\"5\">\n<li>system (不推荐)</li>\n</ol>\n<p>跟provided 相似，但是在系统中要以外部JAR包的形式提供，maven不会在repository查找它,与 systemPath 配合使用</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span><span class=\"token punctuation\">></span></span>\n...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n　　<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n　　　<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.sql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n　　　<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jdbc-stdext<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n　　　<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n　　　<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>system<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n　　　<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>systemPath</span><span class=\"token punctuation\">></span></span>$&#123;java.home&#125;/lib/rt.jar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>systemPath</span><span class=\"token punctuation\">></span></span>\n　　<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span>\n...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"6\">\n<li>import (Maven 2.0.9 之后新增)</li>\n</ol>\n<p>它只使用在<dependencyManagement>中，表示从其它的pom中导入dependency的配置，</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>Z<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Z<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>X<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>Y<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","categories":["maven"],"tags":["maven"]},{"title":"Mysql锁概念","url":"//post/Mysql%E9%94%81%E6%A6%82%E5%BF%B5.html","content":"<h2 id=\"INNODB-存储引擎中的锁\"><a href=\"#INNODB-存储引擎中的锁\" class=\"headerlink\" title=\"INNODB 存储引擎中的锁\"></a>INNODB 存储引擎中的锁</h2><span id=\"more\"></span>\n\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><p>InnoDB 实现了如下两种类型的行锁：</p>\n<ul>\n<li><p>共享锁(S Lock)<br>允许事务读取一行数据</p>\n</li>\n<li><p>排它锁(X Lock)<br>允许事务更新或者删除一行数据</p>\n</li>\n</ul>\n<blockquote>\n<p>锁的兼容性<br>如果一个事务请求的锁模式与当前的锁兼容， InnoDB 就将请求的锁授予该事务: 反之, 如果两者不兼容,该事务就要等待锁释放.</p>\n</blockquote>\n<p><strong>排它锁和共享锁的兼容性</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>X</th>\n<th>S</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>S</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n</tbody></table>\n<p>X S 锁都是行锁，兼容指的是对同一条记录(row)锁的兼容性</p>\n<p>此外，<code>InnoDB存储引擎</code>还支持<code>多粒度(granular)锁定</code>，这种锁定允许事务在 行级上的锁 和 表级上的锁 同时锁定。<br>为了支持在不同粒度上的进行加锁操作，<code>InnoDB存储引擎</code>支持一种额外的加锁方式 <code>意向锁(Intention Lock)</code>.<br><code>意向锁</code>将锁定的对象分为多个层次，<code>意向锁</code>意味着事务希望在更细粒度上进行加锁。</p>\n<ul>\n<li>意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的 IS 锁。</li>\n<li>意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的 IX 锁。</li>\n</ul>\n<p><strong>表级意向锁和行级意向锁的兼容性</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>IS</th>\n<th>IX</th>\n<th>S</th>\n<th>X</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IS</td>\n<td>兼容</td>\n<td>兼容</td>\n<td>兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>兼容</td>\n<td>兼容</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>S</td>\n<td>兼容</td>\n<td>不兼容</td>\n<td>兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>X</td>\n<td>不兼容</td>\n<td>不兼容</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n</tbody></table>\n<h3 id=\"InnoDB-加锁方式\"><a href=\"#InnoDB-加锁方式\" class=\"headerlink\" title=\"InnoDB 加锁方式\"></a>InnoDB 加锁方式</h3><ul>\n<li>意向锁是 InnoDB 自动加的， 不需用户干预。</li>\n<li>对于 UPDATE、 DELETE 和 INSERT 语句， InnoDB<br>会自动给涉及数据集加排他锁（X)；</li>\n<li>对于普通 SELECT 语句，InnoDB 不会加任何锁；<br>事务可以通过以下语句显式给记录集加共享锁或排他锁：<ul>\n<li>共享锁（S）：SELECT * FROM table_name WHERE … LOCK IN SHARE MODE。 其他 session 仍然可以查询记录，并也可以对该记录加 share mode 的共享锁。但是如果当前事务需要对该记录进行更新操作，则很有可能造成死锁。</li>\n<li>排他锁（X)：SELECT * FROM table_name WHERE … FOR UPDATE。其他 session 可以查询该记录，但是不能对该记录加共享锁或排他锁，而是等待获得锁</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"一致性非锁定读\"><a href=\"#一致性非锁定读\" class=\"headerlink\" title=\"一致性非锁定读\"></a>一致性非锁定读</h3><p>一致性非锁定读是InnoDB存储引擎通过<code>多版本控制（multi versioning</code> 的方式来读取当前执行时间数据库中的数据。如果被读的数据行被加了<code>排他锁</code>，在读取这行数据的时候并不会等待锁释放，而是读取该行的一个<code>快照数据</code>。 之所以称为非锁定读，因为不需要等待被访问行的<code>X锁</code>的释放。<code>快照数据</code>是指修改行之前的数据版本，该实现通过<code>undo段</code>来完成。<code>非锁定读</code>的方式极大提高了数据库的并发性。<strong>在InnoDB存储引擎中，这是默认的读取方式。</strong></p>\n<p><code>快照数据</code>其实就是当前行数据的一个历史版本，每行记录可能有多个版本。这种技术成为行多版本技术。由此带来的并发控制，称为<code>多版本并发控制(MVCC)</code></p>\n<p>在事务的隔离级别 <code>READ COMMITED</code>和<code>REPEATABLE READ</code> *(InnoDB存储引擎默认的事物隔离级别)*下，对<code>快照数据</code>的定义不同。</p>\n<ul>\n<li>在<code>READ COMMITTED</code>事务隔离级别下<br>同一事务内的一致性读均会读取到该事务中第一个读创建的快照，其他事务在之后<code>提交或未提交的更新</code>对当前事务的读均不可见，除非提交了该事务并开启新事务发起新查询。</li>\n<li>在<code>REPEATABLE READ</code>事务隔离级别下<br>事务内的每个一致性读均会设置和读取自己新鲜的快照。其他事务在之后<code>提交的更新</code>对当前事务的读可见，<code>未提交的更新</code>对当前事务不可见。</li>\n</ul>\n<p>一致性读 是 InnoDB引擎 处理 <code>READ COMMIT</code> 和 <code>REPEATABLE READ</code> 隔离级别中 <code>SELECT</code> 的默认方式，不需要对 <code>SELECT</code> 访问的对象加锁，其他 session 中的事务可以在另一 session 中的事务读去的同时自由的修改相关对象，因此称为<code>非锁定一致性读</code>。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 查看当前数据库的 事务隔离级别</span>\n<span class=\"token keyword\">SELECT</span> @<span class=\"token variable\">@tx_isolation</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/Mysql%E9%94%81%E6%A6%82%E5%BF%B5/%E9%9D%9E%E9%94%81%E5%AE%9A%E4%B8%80%E8%87%B4%E6%80%A7%E8%AF%BB%E7%9A%84%E9%97%AE%E9%A2%98.jpg\" alt=\"非锁定一致性读的问题\"></p>\n<p>起初事务的隔离级别均为<code>REPEATABLE-READ</code>。SESSION 读取的内容为i&#x3D;1,2,3的行，在 SESSION B 中的事务更新了 i&#x3D;3 的行后 SESSION A 查询到的内容并没有改变，即时在 SESSION B 提交了该更新后 SESSION A 仍只能看到最开始的一致性读创建的快照。但是，在 SESSION A 中的事务执行<code>UPDATE语句</code>更新了被 SESSION B 更新的记录后（数据库快照只适用于<code>SELECT</code>语句，不适用与<code>DML语句</code>，所以事务中的<code>DML语句</code>是可以看到 其他session 中的事务的更新的，即使<code>SELECT</code>并不能看到这些）再次执行<code>SELECT语句</code>不仅可以看到快照中的数据，还可以看到更新后的数据。</p>\n<p>上述提到的一致性读由多版本并发控制（MVCC）原理实现（利用了InnoDB的undo log）。需要注意的是，一致性读不适用于特定的DDL语句如DROP TABLE、ALTER TABLE。另外，对于 INSERT INTO … SELECT, UPDATE … (SELECT)和CREATE TABLE … SELECT 中未指定FOR UPDATE或LOCK IN SHARE MODE的SELECT默认情况下行为和READ COMMIT隔离级别下的普通SELECT一样，同一事务内设置和读取自己的新鲜快照。</p>\n<h3 id=\"一致性锁定读\"><a href=\"#一致性锁定读\" class=\"headerlink\" title=\"一致性锁定读\"></a>一致性锁定读</h3><p><code>锁定读</code>。顾名思义，非锁定一致性读在某个事务读取记录时不加任何锁其他事务可以修改记录，而锁定读意味着某个事务读取记录时会加锁。锁定读分为两种类型：<code>SELECT...FOR UPDATE</code> 和 <code>SELECT...LOCK IN SHARE MODE</code>，前者会对读取的记录加<code>X锁</code>，阻塞其他事务的读请求和修改请求，直至事务提交释放锁资源；后者会对读取的记录加<code>S锁</code>，阻塞其他事务的修改请求但不会阻塞读取请求，直至事务提交释放锁资源。也正因为<code>SELECT...FOR UPDATE</code> 和 <code>SELECT...LOCK IN SHARE MODE</code> 分别需要对查询的记录加<code>X锁</code>和<code>S锁</code>，因此分别会被其他正在读写和写的事务阻塞，直到这些事务结束。需要注意的是<code>SELECT...FOR UPDATE</code>仅适用于<code>autocommit=0</code> 或者通过<code>START TRANSACTION</code>明确开启事务的情况。</p>\n<p>因为锁定读会阻塞其他事务的修改请求，因此可以有效解决<code>非锁定一致性读</code>中提到的”异常”，也即，一个事务执行了普通<code>SELECT</code>后若其他的事务更新、插入了记录并提交，那么该事务内执行<code>DML操作</code>更新被其他事务更新或插入的记录后再次执行<code>SELECT</code>操作会看到更新后的结果。(非锁定一致性读的示例)</p>\n<h4 id=\"锁定读的一个典型应用常场景\"><a href=\"#锁定读的一个典型应用常场景\" class=\"headerlink\" title=\"锁定读的一个典型应用常场景\"></a>锁定读的一个典型应用常场景</h4><p>(先查询, 后更新 的操作)</p>\n<p>假如要往子表插入一条记录，插入前首先要确认一下父表有无相关记录，只有在父表有对应记录时插入才能满足引用完整性约束。如果使用<code>一致性读</code>来查询父表来验证相关行存在，此时往子表插入时 其他的session 有可能更新或者删除刚才父表中查到的行，这样在子表中插入后就违反了引用完整性约束。为了避免该问题可使用<code>锁定读SELECT...LOCK IN SHARE MODE</code>，在事务中读取父表进行验证时，对相关记录加S锁，这样其他事务无法对相关记录进行<code>DML操作</code>，此时可在事务中安全的插入相关记录，待此操作完成并提交或回滚后其他事务才能对记录进行<code>DML操作</code>。</p>\n<p>还有一种情况，比如有 两个session 需要读取某表中的一行，在成功读取后在同一事务中更新该行，并在另外的表中插入刚开始读取到的行。若此时使用<code>SELECT...LOCK IN SHARE MODE</code>则会对读取到的记录加<code>S锁</code>，两个session在同时申请<code>X锁</code>进行更新时便发生死锁。另外，由于读取到了同一行内容，两个session在向同一表插入数据时会导致键重复的错误。这种情况下用SELECT…FOR UPDATE较合适，在读取的时候阻塞其他事物的读和更新请求。</p>\n<p><img src=\"/post/Mysql%E9%94%81%E6%A6%82%E5%BF%B5/SELECT_FOR_UPDATE.jpg\" alt=\"SELECT_FOR_UPDATE\"></p>\n<hr>\n<p>[参考]<br><a href=\"https://blog.csdn.net/zyz511919766/article/details/49451255\">（三）MySQL InnoDB非锁定一致性读与锁定读</a><br><a href=\"https://blog.csdn.net/paopaopotter/article/details/79259686\">数据库第一类第二类丢失更新</a></p>\n","categories":["mysql","锁"],"tags":["mysql","锁"]},{"title":"Spring-AOP详解","url":"//post/Spring-AOP%E8%AF%A6%E8%A7%A3.html","content":"<p><a href=\"https://docs.spring.io/spring/docs/5.1.7.RELEASE/spring-framework-reference/core.html#aop-api\">springDOC</a></p>\n<blockquote>\n<p>将重复性的逻辑代码横切出来其实很容易(我们简单可认为就是封装成一个类就好了)，<br>但我们要将这些被我们横切出来的逻辑代码融合到业务逻辑中，来完成和之前(没抽取前)一样的功能！这就是AOP首要解决的问题了！<br>这样一来，我们就在写业务时只关心业务代码，而不用关心与业务无关的代码</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/spring-aop-aspect.jpg\" alt=\"AOP切面\"><br><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/spring-aop-%E6%A8%AA%E5%90%91%E6%8A%BD%E5%8F%96.jpg\" alt=\"AOP横向抽取\"></p>\n<h2 id=\"Spring-Aop-原理\"><a href=\"#Spring-Aop-原理\" class=\"headerlink\" title=\"Spring Aop 原理\"></a>Spring Aop 原理</h2><blockquote>\n<p>Spring AOP 使用纯Java实现，它不需要专门的编译过程，也不需要特殊的类装载器，<br><strong>它在运行期通过代理方式向目标类织入增强代码</strong>。在Spring中可以无缝地将 Spring AOP、IoC 和 AspectJ 整合在一起。<br>Spring AOP构建在动态代理基础之上，因此，Spring对AOP的支持局限于方法拦截。</p>\n</blockquote>\n<p><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/aopProxy.jpg\"></p>\n<p>  动态代理</p>\n<ul>\n<li>JDK 动态代理<br>  Spring AOP默认是使用JDK动态代理，如果代理的类没有接口则会使用CGLib代理。</li>\n<li>cglib动态代理<br>  CGLib代理其生成的动态代理对象是目标类的子类</li>\n</ul>\n<p>** <code>JDK动态代理</code> 和 <code>cglib代理</code>我们应该使用哪个？</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  如果是单例的我们最好使用 CGLib代理，如果是多例的我们最好使用JDK代理\n\n  原因: JDK在创建代理对象时的性能要高于 CGLib代理，而生成代理对象的运行性能却比CGLib的低。\n如果是单例的代理，推荐使用CGLib<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"AOP-的实现\"><a href=\"#AOP-的实现\" class=\"headerlink\" title=\"AOP 的实现\"></a>AOP 的实现</h2><ol>\n<li>Spring AOP<br> 而Spring借鉴了AspectJ很多非常有用的做法，融合了AspectJ实现AOP的功能。但Spring AOP本质上底层还是动态代理，所以Spring AOP是不需要有专门的编辑器的</li>\n<li>AspectJ<br> AspectJ是语言级别的AOP实现，扩展了Java语言，定义了AOP语法，能够在编译期提供横切代码的织入，所以它有专门的编译器用来生成遵守Java字节码规范的Class文件。</li>\n</ol>\n<h2 id=\"AOP-术语\"><a href=\"#AOP-术语\" class=\"headerlink\" title=\"AOP 术语\"></a>AOP 术语</h2><ul>\n<li><p>连接点(JoinPoint)<br>能够被拦截的地方: Spring AOP是基于动态代理的，所以是方法拦截的。每个成员方法都可以称之为<code>连接点(JoinPoint)</code></p>\n</li>\n<li><p>切点(PointCut)<br>具体定位的连接点: 上面也说了，每个方法都可以称之为<code>连接点(JoinPoint)</code>，我们具体定位到某一个方法就成为 <code>切点(PointCut)</code>。</p>\n</li>\n<li><p>增强(Advice)<br>表示添加到切点的一段<code>逻辑代码</code>，并定位<code>连接点(JoinPoint)</code>的方位信息。<br>Spring AOP提供了5种Advice类型给我们：<code>前置(Before)</code>、<code>后置(After)</code>、<code>返回(Return)</code>、<code>异常(Exception)</code>、<code>环绕(Around)</code>给我们使用！</p>\n</li>\n<li><p>切面(Aspect)<br>切面由<code>切点(PointCut)</code>和<code>增强(Advice)</code>组成，它既包括了横切逻辑的定义、也包括了<code>连接点(JoinPoint)</code>的定义。</p>\n</li>\n<li><p>织入(Weaving)<br>将<code>增强(Advice)</code>添加到目标类的具体<code>连接点(JoinPoint)</code>上的过程。</p>\n</li>\n</ul>\n<p>这些概念乍一看可能有点蒙， 当AOP 用的多了以后，自然而然就理解了<br>其中关键是: <code>切点(PointCut)</code>定位的方法[连接点(JoinPoint)] 会得到 <code>增强(Advice)</code> 代码的<code>织入(Weaving)</code></p>\n<h3 id=\"切面类型\"><a href=\"#切面类型\" class=\"headerlink\" title=\"切面类型\"></a>切面类型</h3><p><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/spring-aop-%E5%88%87%E9%9D%A2%E7%B1%BB%E5%9E%8B.jpg\" alt=\"切面类型\"></p>\n<ol>\n<li>普通切面(Pointcut)</li>\n<li>切点切面(PointcutAdvice)</li>\n<li>引介切面(IntroductionAdvisor)</li>\n</ol>\n<p><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/%E5%88%87%E9%9D%A2%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93.jpg\"></p>\n<h2 id=\"基于注解的-AOP-编程\"><a href=\"#基于注解的-AOP-编程\" class=\"headerlink\" title=\"基于注解的 AOP 编程\"></a>基于注解的 AOP 编程</h2><p><img src=\"/post/Spring-AOP%E8%AF%A6%E8%A7%A3/@AspectJ%E5%88%87%E7%82%B9%E5%87%BD%E6%95%B0.jpg\" alt=\"@AspectJ切点函数\"></p>\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><blockquote>\n<p>在定义匹配表达式时，通配符几乎随处可见，如*、.. 、+ ，它们的含义如下：</p>\n</blockquote>\n<ul>\n<li><p><code>..</code> 匹配方法定义中的任意数量的参数，此外还匹配类定义中的任意数量包</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//任意返回值，任意名称，任意参数的公共方法</span>\n<span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//匹配com.mjm.dao包及其子包中所有类中的所有方法</span>\n<span class=\"token function\">within</span><span class=\"token punctuation\">(</span>com<span class=\"token punctuation\">.</span>mjm<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>+</code> 匹配给定类的任意子类</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//匹配实现了DaoUser接口的所有子类的方法</span>\n<span class=\"token function\">within</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mjm<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span>DaoUser</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>*</code> 匹配任意数量字符</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//匹配com.mjm.service包及其子包中所有类的所有方法</span>\n<span class=\"token function\">within</span><span class=\"token punctuation\">(</span>com<span class=\"token punctuation\">.</span>mjm<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//匹配以set开头，参数为int类型，任意返回值的方法</span>\n<span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> set<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"类型签名表达式\"><a href=\"#类型签名表达式\" class=\"headerlink\" title=\"类型签名表达式\"></a>类型签名表达式</h3></li>\n</ul>\n<blockquote>\n<p>为了方便类型（如接口、类名、包名）过滤方法，Spring AOP 提供了within关键字。</p>\n</blockquote>\n<p>语法格式如下： </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// type name 则使用包名或者类名替换</span>\n<span class=\"token function\">within</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>type name<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// example</span>\n<span class=\"token comment\">//匹配com.mjm.dao包及其子包中所有类中的所有方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(com.mjm.dao..*)\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配UserDaoImpl类中所有方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(com.mjm.dao.UserDaoImpl)\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配UserDaoImpl类及其子类中所有方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(com.mjm.dao.UserDaoImpl+)\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配所有实现UserDao接口的类的所有的方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(com.mjm.dao.UserDao+)\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"方法签名表达式\"><a href=\"#方法签名表达式\" class=\"headerlink\" title=\"方法签名表达式\"></a>方法签名表达式</h3><blockquote>\n<p>对方发签名进行过滤， 对于给定的作用域、返回值类型、完全限定类名以及参数匹配的方法将会应用切点函数指定的通知 <code>execution</code></p>\n</blockquote>\n<p>语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//scope ：方法作用域，如public,private,protect</span>\n<span class=\"token comment\">//returnt-type：方法返回值类型</span>\n<span class=\"token comment\">//fully-qualified-class-name：方法所在类的完全限定名称</span>\n<span class=\"token comment\">//parameters 方法参数</span>\n<span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">return</span><span class=\"token operator\">-</span>type<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>fully<span class=\"token operator\">-</span>qualified<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">-</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// example</span>\n<span class=\"token comment\">//匹配UserDaoImpl类中的所有方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.mjm.dao.UserDaoImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配UserDaoImpl类中的所有公共的方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public * com.mjm.dao.UserDaoImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配UserDaoImpl类中的所有公共方法并且返回值为int类型</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public int com.mjm.dao.UserDaoImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//匹配UserDaoImpl类中第一个参数为int类型的所有公共的方法</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public * com.mjm.dao.UserDaoImpl.*(int , ..))\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"其他指示符\"><a href=\"#其他指示符\" class=\"headerlink\" title=\"其他指示符\"></a>其他指示符</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// target: 用于匹配当前目标对象类型的执行方法；</span>\n<span class=\"token comment\">//匹配了任意实现了UserDao接口的目标对象的方法进行过滤</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target(com.mjm.spring.springAop.dao.UserDao)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myPointcut3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// @within: 用于匹配所以持有指定注解类型内的方法；请注意与within是有区别的， within是用于匹配指定类型内的方法执行；</span>\n<span class=\"token comment\">//匹配使用了MarkerAnnotation注解的类(注意是类)</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@within(com.mjm.spring.annotation.MarkerAnnotation)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myPointcut4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// @annotation(com.mjm.spring.MarkerMethodAnnotation) : 根据所应用的注解进行方法过滤</span>\n<span class=\"token comment\">//匹配使用了MarkerAnnotation注解的方法(注意是方法)</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(com.mjm.spring.annotation.MarkerAnnotation)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myPointcut5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// this : 用于匹配当前AOP代理对象类型的执行方法；请注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配</span>\n<span class=\"token comment\">//匹配了任意实现了UserDao接口的代理对象的方法进行过滤</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this(com.mjm.spring.springAop.dao.UserDao)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myPointcut2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5种增强类型\"><a href=\"#5种增强类型\" class=\"headerlink\" title=\"5种增强类型\"></a>5种增强类型</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>含义ßß</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Before</td>\n<td>前置通知，在连接点方法前调用</td>\n</tr>\n<tr>\n<td>@Around</td>\n<td>环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法，后面会讲</td>\n</tr>\n<tr>\n<td>@After</td>\n<td>后置通知，在连接点方法后调用</td>\n</tr>\n<tr>\n<td>@AfterReturning</td>\n<td>返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常</td>\n</tr>\n<tr>\n<td>@AfterThrowing</td>\n<td>异常通知，当连接点方法异常时调用</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/javazejian/article/details/56267036\">关于 Spring AOP (AspectJ) 你该知晓的一切</a><br><a href=\"https://juejin.im/post/5b06bf2df265da0de2574ee1\">Spring AOP就是这么简单啦</a></p>\n","categories":["spring"],"tags":["spring","aop","动态代理"]},{"title":"Spring Bean生命周期","url":"//post/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","content":"<blockquote>\n<p>本篇文章记录一下Spring中,BeanFactory 与 ApplicationContext 中 bean 的生命周期过程，参考网上资料,总结如下</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h2><img src=\"/post/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/BeanFactory%E4%B8%ADBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" class=\"\" title=\"BeanFactory中Bean生命周期\">\n\n<ol>\n<li><p>当调用者调用 <code>getBean()</code> 想容器请求一个bean时,如果容器注册了 InstantiationAwareBeanPostProcessor(实现了BeanPostProcessor)接口,<br>则实例化bean之前，调用该接口的 <code>postProcessBeforeInstantiation()</code></p>\n</li>\n<li><p>根据配置调用bean的构造器&#x2F;工厂方法 实例化bean</p>\n</li>\n<li><p>如果容器注册了 InstantiationAwareBeanPostProcessor(实现了BeanPostProcessor)接口, 则实例化bean之后，调用该接口的 <code>postProcessAfterInstantiation()</code></p>\n</li>\n<li><p>如果bean配置了 属性信息， 则 这一步将属性设置到bean对应的属性中， 在设置每一个属性值之前, 调用 InstantiationAwareBeanPostProcessor 的 postProcessPropertyValues()</p>\n</li>\n<li><p>设置属性值</p>\n</li>\n<li><p>如果bean  实现了 BeanNameAware 接口，则  执行 setBeanName()，将xml文件里的 beanid 设置到 bean中</p>\n</li>\n<li><p>如果bean  实现了 BeanFactoryAware 接口，则  执行 setBeanFactory()，将BeanFactory 容器实例 设置到 bean中</p>\n</li>\n<li><p>如果 beanFactory 装配了 BeanPostProcessor 接口，则 调用 BeanPostProcessor.postProcessBeforeInitialization(Object bean, String beanName)对bean进行加工<br> bean: 当前增在处理的 bean  beanName: 当前bean的配置名  返回值为 加工处理后的bean</p>\n</li>\n</ol>\n<blockquote>\n<p>要使用BeanPostProcessor回调，就必须先在容器中注册实现该接口的类，那么如何注册呢？<br>BeanFactory和ApplicationContext容器的注册方式不大一样：若使用BeanFactory，则必须要显示的调用其addBeanPostProcessor()方法进行注册，<br>参数为BeanPostProcessor实现类的实例；如果是使用ApplicationContext，那么容器会在配置文件在中自动寻找实现了BeanPostProcessor接口的Bean，然后自动注册，<br>我们要做的只是配置一个BeanPostProcessor实现类的Bean就可以了。</p>\n</blockquote>\n<ol start=\"9\">\n<li><p>如果bean实现了 InitializingBean 接口 ，则调用 InitializingBean#afterProperiesSet</p>\n</li>\n<li><p>如果在bean中通过init-method属性定义了初始化方法，则将执行这个方法。</p>\n</li>\n<li><p>BeanPostProcessor 后处理利器定义了两个方法， postProcessBeforeInitialization(8 中调用)  postProcessAfterInitialization(Object bean, String beanName)<br>此方法调用时 spring 再次获得 对bean进行加工处理的机会</p>\n</li>\n<li><p>如果 <bean> 中定义 bean 的作用范围是 scope&#x3D;’prototype’, 则将bean返回给调用者，由调用者负责bean后续生命周期管理，spring不在管理这个bean的生命周期<br>如果 <bean> 中定义 bean 的作用范围是 scope&#x3D;’singleton’,当将bean 放入SpringIOC容器的缓存池中， 并将 bean 引用返回给调用者，spring继续对 bean 进行后续的生命周期管理</p>\n</li>\n<li><p>如果当前的bean的作用范围是singleton，且bean实现了DisposableBean接口，在容器关闭的时候，则将调用接口的destory方法。</p>\n</li>\n<li><p>对于singleton的bean，如果bean通过destory-method属性指定了bean的销毁方法，那么在spring容器关闭的时候，就会执行该方法。</p>\n</li>\n</ol>\n<h3 id=\"这些方法大致可以归为四类：\"><a href=\"#这些方法大致可以归为四类：\" class=\"headerlink\" title=\"这些方法大致可以归为四类：\"></a>这些方法大致可以归为四类：</h3><ol>\n<li>Bean自身的方法：自身的方法也就是在bean中通过init-method和destory-method指定的方法。</li>\n<li>Bean级生命周期接口方法：如BeanNameAware，BeanFactoryAware，InitializingBean和DisposableBean，这些接口方法由Bean类直接实现。</li>\n<li>容器级生命周期接口方法：InstantiationAwareBeanPostProcessor和BeanPostProcessor接口实现，一般称它们的实现类为“后处理器”。<ul>\n<li>后处理器接口一般不由bean实现, 他们独立于bean, 一般以容器附加的形式注册到 spring容器中，并通过接口反射为spring容器扫描识别，</li>\n<li>当容器创建任何bean的时候后处理器都会发生作用。所以这些后处理器的影响是全局性的</li>\n<li>当然用户可以合理的编写后处理器，使其只对感兴趣的bean进行处理</li>\n</ul>\n</li>\n<li>工厂处理器接口方法：包括AspectJWeavingEnabler，CustomAutowireConfigurer，ConfigurationClassPostProcessor等方法。工厂后处理器也是容器级的，在应用上下文装配文件后立即调用。</li>\n</ol>\n<h2 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a>ApplicationContext</h2><p>使用ApplicationContext &amp; bean(scope&#x3D;singleton) ,name容器加载时这些bean 就会被实例化。好处是可以预先加载，缺点是耗内存<br>如果使用的是 BeanFactory, 当实例化bean时不会直接实例化，而是等到使用(调动 getBean(String beanName))时才会实例化. BeanFactory会延迟初始化所投的的Bean. 好处是节约内存, 缺点是速度慢</p>\n<p>一般没有特殊要求，使用ApplicationContext. ApplicationContext 实现了 ListableBeanFactory &amp; HierarchicalBeanFactory,具有BeanFactory的所有功能， 并且还额外提供了 许多高级功能</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ApplicationContext</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnvironmentCapable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListableBeanFactory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HierarchicalBeanFactory</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">MessageSource</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ApplicationEventPublisher</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourcePatternResolver</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<ul>\n<li>提供文本解析工具，包括对国际化的支持</li>\n<li>提供载入资源文件的通用方法，图片</li>\n<li>可以向注册为监听器的Bean 发送事件</li>\n</ul>\n<p>ApplicationContext 经常见到的三种实现<br>    <code>ClassPathXmlApplicationContext</code>   从类路径中加载。<br>    <code>FileSystemXmlApplicationContext</code>  从文件系统加载。<br>    <code>XmlWebApplicationContext</code>         从Web系统中加载。</p>\n<p>ApplicationContext中 bean生命周期 与 BeanFactory中 Bean生命周期类似<br>不同得是 如果bean实现了 ApplicationContextAware 接口， 将调用 setApplicationContext()</p>\n<p>此外如果配置文件中配置了工厂后处理器接口,<code>BeanFactoryPostProcessor</code> 的实现类,则应用上下文装配完配置文件之后,初始化bean之前，会调用这些BeanFactoryPostProcessor对配置信息进行加工处理,如<code>CustomerEditorConfigure</code>, <code>PropertyPlaceHolderConfigure</code>. 如果配置了多个最好实现 Order 接口,spring可以按顺序执行他们。这些实现的作用是什么呢？<br>工厂后处理器是容器级别的,仅在应用上下文初始化时调用一次,其目的是完成一些配置文件的加工处理工作。</p>\n<p>ApplicationContext在启动时,将首先为配置文件中的每个bean生成BeanDefination对象，BeanDefination<bean>在spirng容器中的内部表示。当配置文件中所有的bean都被解析成BeanDefination时，ApplicationContext将调用工厂后处理器方法。因此我们有机会通过程序的方式调整bean的配置信息。</p>\n<img src=\"/post/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/ApplicationContext%E4%B8%ADBean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg\" class=\"\" title=\"ApplicationContext中bean的生命周期\">\n\n<p>bean的生命周期不但和其实现的接口有关，还和它的作用范围相关。</p>\n","categories":["spring"],"tags":["spring","bean生命周期","ApplicationContext","BeanFactory"]},{"title":"awesome-blog","url":"//post/awesome-blog.html","content":"<h2 id=\"golang\"><a href=\"#golang\" class=\"headerlink\" title=\"golang\"></a>golang</h2><p><a href=\"https://geektutu.com/\">极客兔兔</a><br><a href=\"https://eddycjy.gitbook.io/golang/\">跟煎鱼学Go</a><br><a href=\"https://changkun.de/blog/\">O神的博客</a><br><a href=\"https://xargin.com/\">曹大的博客</a></p>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><p><a href=\"https://mercyblitz.github.io/\">小马哥的技术博客</a><br>田小波的技术博客</p>\n<h2 id=\"Architech\"><a href=\"#Architech\" class=\"headerlink\" title=\"Architech\"></a>Architech</h2><p><a href=\"https://cleancoders.com/\">cleancoders</a><br><a href=\"https://www.jdon.com/\">解道</a><br><a href=\"http://icyfenix.cn/summary/\">凤凰架构</a></p>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><p><a href=\"https://frimin.com/\">FRIMIN</a><br><a href=\"https://linux.vbird.org/\">鸟哥的首页</a><br><a href=\"https://www.cnblogs.com/vamei/\">Vamei</a></p>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p><a href=\"https://tanxinyu.work/\">谭新宇</a><br><a href=\"https://labuladong.github.io/algo/\">LABULADONG 的算法网站</a><br><a href=\"https://blog.csdn.net/v_JULY_v\">结构之法算法之道</a><br><a href=\"https://www.cnblogs.com/kuangbin/\">kuangbin - 博客园</a><br><a href=\"https://blog.csdn.net/acm_cxlove\">acm_cxlove</a><br><a href=\"https://www.shuizilong.com/house/\">某岛</a><br><a href=\"http://blog.acmicpc.info/\">ACMer 博客瀑布流</a><br><a href=\"https://godweiyang.com/categories/\">伟阳的博客</a></p>\n<h2 id=\"大厂博客\"><a href=\"#大厂博客\" class=\"headerlink\" title=\"大厂博客\"></a>大厂博客</h2><p><a href=\"https://tech.meituan.com/\">美团技术团队</a><br><a href=\"http://140.205.61.252/\">阿里中间件团队博客</a><br><a href=\"https://tech.youzan.com/\">有赞技术团队</a><br><a href=\"https://insights.thoughtworks.cn/\">Thoughtworks洞见</a><br><a href=\"https://xiaomi-info.github.io/\">小米信息部技术团队</a><br><a href=\"https://tech.ipalfish.com/blog/\">伴鱼技术团队</a></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><a href=\"https://maiyang.me/\">茶歇驿站</a><br><a href=\"https://www.qtmuniao.com/\">木鸟杂记</a><br><a href=\"https://shuyi.tech/\">陈树义的博客</a><br><a href=\"https://coolshell.cn/\">左耳朵耗子的博客</a></p>\n<h2 id=\"Golang-书籍\"><a href=\"#Golang-书籍\" class=\"headerlink\" title=\"Golang 书籍\"></a><strong>Golang 书籍</strong></h2><p><a href=\"http://books.studygolang.com/gopl-zh/\">Go语言圣经（中文版）</a><br><a href=\"https://golang.coding3min.com/\">Go语言精进之路</a><br><a href=\"https://golang.design/under-the-hood/\">Go 语言原本</a><br><a href=\"https://chai2010.cn/advanced-go-programming-book/\">Go语言高级编程(Advanced Go Programming)</a><br><a href=\"https://draveness.me/golang/\">语言设计与实现</a></p>\n<p><a href=\"https://www.bookstack.cn/read/qcrao-Go-Questions/README.md\">Go 语言问题集(Go Questions)</a></p>\n","tags":["blog"]},{"title":"Tomcat源码导入-IntelijIdea","url":"//post/Tomcat%E6%BA%90%E7%A0%81%E5%AF%BC%E5%85%A5-IntelijIdea.html","content":"<blockquote>\n<p>最近有兴趣阅读一下 Tomcat 源码  先把准备工作做一下， 有时间在深入阅读。  嘻嘻<br>maven   tomcat  idea</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"官网下载-Tomcat-源码包\"><a href=\"#官网下载-Tomcat-源码包\" class=\"headerlink\" title=\"官网下载 Tomcat 源码包\"></a>官网下载 Tomcat 源码包</h2><p><a href=\"https://tomcat.apache.org/download-80.cgi\">官网</a> 我这里用到的 tomcat 版本是 8.5.41.<br><img src=\"/post/Tomcat%E6%BA%90%E7%A0%81%E5%AF%BC%E5%85%A5-IntelijIdea/tomcat%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD.jpg\" alt=\"tomcat源码下载\"></p>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><ul>\n<li><p>新建一个 目录 tomcat8.5-src<br><img src=\"/post/Tomcat%E6%BA%90%E7%A0%81%E5%AF%BC%E5%85%A5-IntelijIdea/tomca%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg\" alt=\"tomcat8.5-src目录结构\"><br>将源码包解压到该目录下<br>新建文件 <code>pom.xml</code><br>新建目录 <code>catalina-home</code>, 然后将<code>apache-tomcat-8.5.41-src</code>目录下的 <code>conf</code> 文件夹拷贝到此处<br><img src=\"/post/Tomcat%E6%BA%90%E7%A0%81%E5%AF%BC%E5%85%A5-IntelijIdea/catalina-home%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg\" alt=\"catalina-home目录结构\"></p>\n</li>\n<li><p>配置 maven</p>\n<ul>\n<li><p>我们采用module的形式来组织目录<br>在 <code>pom.xml</code> 文件中添加内容</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>    \n        <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>    \n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>gxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>apache-tomcat-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>apache-tomcat-8-source<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span>    \n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modules</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>apache-tomcat-8.5.41-src<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modules</span><span class=\"token punctuation\">></span></span>    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>这里主要指定 module 为 Tomcat 的源码目录,然后在 <code>apache-tomcat-8.5.41-src</code>配置 Tomcat 源码依赖，在该目录创建pom.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span>    \n        <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>    \n        <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>    \n    \n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>Tomcat8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Tomcat8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>    \n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>finalName</span><span class=\"token punctuation\">></span></span>Tomcat8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>finalName</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sourceDirectory</span><span class=\"token punctuation\">></span></span>java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sourceDirectory</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>testSourceDirectory</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>testSourceDirectory</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resource</span><span class=\"token punctuation\">></span></span>    \n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>directory</span><span class=\"token punctuation\">></span></span>java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>directory</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resource</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>testResources</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>testResource</span><span class=\"token punctuation\">></span></span>    \n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>directory</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>directory</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>testResource</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>testResources</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>    \n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>    \n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-compiler-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>    \n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>    \n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>encoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>encoding</span><span class=\"token punctuation\">></span></span>    \n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>source</span><span class=\"token punctuation\">></span></span>    \n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>target</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>target</span><span class=\"token punctuation\">></span></span>    \n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-jar-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span>    \n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>  \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.easymock<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>easymock<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>  \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>  \n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>ant<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>ant<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>wsdl4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>wsdl4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.6.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jaxrpc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>    \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.eclipse.jdt<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>ecj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>    \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.13.102<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span>    \n    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>到此 Tomcat 源码的基本结构已经搭建完成</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"构建准备\"><a href=\"#构建准备\" class=\"headerlink\" title=\"构建准备\"></a>构建准备</h2><p>打开 Idea, 直接带开项目，定位到  <code>tomcat8.5-src</code> 目录</p>\n<p>便已配置环境，如果编译的时候 测试代码报错， 直接将 测试代码注释就好<br>这里将 <code>TestCookieFilter.java</code> 注释了 </p>\n<p><img src=\"/post/Tomcat%E6%BA%90%E7%A0%81%E5%AF%BC%E5%85%A5-IntelijIdea/idea%E9%85%8D%E7%BD%AE.jpg\" alt=\"idea编译配置\"></p>\n<ul>\n<li>打开项目的Run&#x2F;Debug配置界面，Main class设置为org.apache.catalina.startup.Bootstrap</li>\n<li>添加VM options <pre class=\"line-numbers language-none\"><code class=\"language-none\">-Dcatalina.home&#x3D;catalina-home \n-Dcatalina.base&#x3D;catalina-home \n-Djava.endorsed.dirs&#x3D;catalina-home&#x2F;endorsed \n-Djava.io.tmpdir&#x3D;catalina-home&#x2F;temp \n-Djava.util.logging.manager&#x3D;org.apache.juli.ClassLoaderLogManager \n-Djava.util.logging.config.file&#x3D;catalina-home&#x2F;conf&#x2F;logging.properties<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>选择module为Tomcat8.0（源码所在的module）</li>\n<li>点击Debug按钮启动程序</li>\n</ul>\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><p>当运行项目后 访问地址 <a href=\"http://localhost:8080/\">http://localhost:8080</a><br>会报 NPE<br><img src=\"/post/Tomcat%E6%BA%90%E7%A0%81%E5%AF%BC%E5%85%A5-IntelijIdea/NoJasper.jpg\" alt=\"NullPointEception\"></p>\n<p>原因是我们直接启动org.apache.catalina.startup.Bootstrap的时候没有加载org.apache.jasper.servlet.JasperInitializer，从而无法编译JSP。这在Tomcat6&#x2F;7是没有这个问题的。解决办法是在tomcat的源码org.apache.catalina.startup.ContextConfig中手动将JSP解析器初始化：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">context<span class=\"token punctuation\">.</span><span class=\"token function\">addServletContainerInitializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JasperInitializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/post/Tomcat%E6%BA%90%E7%A0%81%E5%AF%BC%E5%85%A5-IntelijIdea/Jasper.jpg\" alt=\"添加代码\"></p>\n<p>至此，我们可以将项目直接放到Tomcat来启动调试了。</p>\n<hr>\n<p>[参考]<br><a href=\"https://gongxufan.github.io/2017/10/20/tomcat-source-debug/\">【基于IntelliJ IDEA环境】Tomcat8源码的调试和项目部署</a></p>\n","categories":["tomcat"],"tags":["maven","tomcat","idea"]},{"title":"bigcache源码解析","url":"//post/bigcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","content":"<p>[TOC]</p>\n<h2 id=\"Bigcache-的特点\"><a href=\"#Bigcache-的特点\" class=\"headerlink\" title=\"Bigcache 的特点:\"></a>Bigcache 的特点:</h2><p>并发支持,快速, 过期大量条目而不影响性能.<br>bigcache将 缓存条目放在了堆上,节省了GC. 为了实现这一点. 需要对字节切片进行操作. 因此涉及到缓存条目的序列化与反序列化.</p>\n<p><a href=\"https://github.com/allegro/bigcache-bench\">bigcache, freecache 和 map 的基准测试</a></p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"内存使用情况\"><a href=\"#内存使用情况\" class=\"headerlink\" title=\"内存使用情况\"></a>内存使用情况</h2><p>可能会遇到,系统内存指数增长. 属于预期内行为. Go 运行时 以 跨度(span)为单位分配内存,并在不需要他们是将状态修改为 <code>free</code> 来通知操作系统.在操作系统需要重新调整地址用途之前. 跨度将保留为进程资源的一部分.</p>\n<h2 id=\"怎么做到的高性能\"><a href=\"#怎么做到的高性能\" class=\"headerlink\" title=\"怎么做到的高性能?\"></a>怎么做到的高性能?</h2><p>BigCache依赖于 go1.5中做出的优化.<a href=\"https://github.com/golang/go/issues/9477\">issue9477</a>: <code>对于key value 中没有指针的map,GC将忽略其内容.</code>因此 bigCache 中使用 <code>map[uint64]uint32</code>, key 为 hash(key). value 是 item的 偏移量.</p>\n<p>item 保存在字节切片中,目的是为了 再次忽略  GC. 字节切片大小可以增长到 MB 而不影响性能, 因为 GC只能看到指向他们的 单个 指针. </p>\n<h2 id=\"如何解决-hash-冲突-Hash-Collisions\"><a href=\"#如何解决-hash-冲突-Hash-Collisions\" class=\"headerlink\" title=\"如何解决 hash 冲突(Hash Collisions)?\"></a>如何解决 hash 冲突(Hash Collisions)?</h2><p>Bigcache 不解决 hash 冲突. 当一个新的item 与老 item  hash(key)相同. 新 item 会覆盖老item.</p>\n<h2 id=\"Bigcache-Vs-freecche\"><a href=\"#Bigcache-Vs-freecche\" class=\"headerlink\" title=\"Bigcache Vs freecche\"></a>Bigcache Vs freecche</h2><p>两种缓存都提供了相同的功能. 但是他们是以不同的方式 减少 GC开销. bigCache 一依赖 <code>map[uint64]uint32</code>, freecache 实现了自己的基于切片的映射 来减少指针数量.</p>\n<p><code>Bigcache</code> 相对于  <code>freecache</code> 的优势之一是: 不需要提前知道  缓存大小,因为 <code>Bigcache</code> 已满时,可以为新item 重新分配额外的内存. 而不是像 <code>freecache</code> 那样覆盖现有的.但是 <code>Bigcache</code> 也提供了参数 <code>HardMaxCacheSize</code> 设置缓存最大大小.</p>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"1-一些概念\"><a href=\"#1-一些概念\" class=\"headerlink\" title=\"1. 一些概念\"></a>1. 一些概念</h3><h4 id=\"1-shard\"><a href=\"#1-shard\" class=\"headerlink\" title=\"1. shard\"></a>1. shard</h4><p>分片,  用于 减少锁粒度 ,增加并发度.  cache 默认 有 1024 个分片. (需要时  2^n,  快速进行 hash计算)<br>shards 初始化以后是 不可以扩容的.</p>\n<h4 id=\"2-CleanWindow\"><a href=\"#2-CleanWindow\" class=\"headerlink\" title=\"2. CleanWindow\"></a>2. CleanWindow</h4><p>删除过期entry 的  时间间隔(interval).<br>默认配置为 1s. 如果设置为  &lt; 1s, 可能会适得其反.</p>\n<h4 id=\"3-lifeWindow\"><a href=\"#3-lifeWindow\" class=\"headerlink\" title=\"3. lifeWindow\"></a>3. lifeWindow</h4><p>entry 的过期时间. </p>\n<blockquote>\n<p>bigcache 的一个feature: 不支持为 特定的entry 单独设置  过期时间. </p>\n</blockquote>\n<h3 id=\"2-数据结构\"><a href=\"#2-数据结构\" class=\"headerlink\" title=\"2. 数据结构\"></a>2. 数据结构</h3><p><img src=\"/post/bigcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/bigcache%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\"></p>\n<h4 id=\"1-cache\"><a href=\"#1-cache\" class=\"headerlink\" title=\"1. cache\"></a>1. cache</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// BigCache is fast, concurrent, evicting cache created to keep big number of entries without impact on performance.</span>\n<span class=\"token comment\">// It keeps entries on heap but omits GC for them. To achieve that, operations take place on byte arrays,</span>\n<span class=\"token comment\">// therefore entries (de)serialization in front of the cache will be needed in most use cases.</span>\n<span class=\"token keyword\">type</span> BigCache <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tshards     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cacheShard <span class=\"token comment\">// shard分片 减小锁粒度,长度为 2^N</span>\n\tlifeWindow <span class=\"token builtin\">uint64</span>\n\tclock      clock <span class=\"token comment\">// 时钟,计算过期时间 会用到</span>\n\thash       Hasher <span class=\"token comment\">// hash 算法 分 shard</span>\n\tconfig     Config\n\tshardMask  <span class=\"token builtin\">uint64</span> <span class=\"token comment\">// 2^N-1</span>\n\t<span class=\"token builtin\">close</span>      <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-shard\"><a href=\"#2-shard\" class=\"headerlink\" title=\"2. shard\"></a>2. shard</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">type</span> cacheShard <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\thashmap     <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint32</span> <span class=\"token comment\">//存储索引 key: hashKey  value: value存入  byteQueue的 offset</span>\n\tentries     queue<span class=\"token punctuation\">.</span>BytesQueue  <span class=\"token comment\">// 存储实际的数据 的 环形字节数组</span>\n\tlock        sync<span class=\"token punctuation\">.</span>RWMutex      <span class=\"token comment\">// 锁</span>\n\tentryBuffer <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>            <span class=\"token comment\">//</span>\n\tonRemove    onRemoveCallback  <span class=\"token comment\">// 回调函数, 有多种实现方式</span>\n\n\tisVerbose    <span class=\"token builtin\">bool</span>\n\tstatsEnabled <span class=\"token builtin\">bool</span>\n\tlogger       Logger\n\tclock        clock\n\tlifeWindow   <span class=\"token builtin\">uint64</span>\n\n\thashmapStats <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint32</span> <span class=\"token comment\">// 记录 key的 requestCount</span>\n\tstats        Stats             <span class=\"token comment\">// shard 的 缓存 统计状态</span>\n\tcleanEnabled <span class=\"token builtin\">bool</span>              <span class=\"token comment\">// 是否开启 清理</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-entry\"><a href=\"#3-entry\" class=\"headerlink\" title=\"3. entry\"></a>3. entry</h4><p><img src=\"/post/bigcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/bigcache-entry.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; EntryInfo holds informations about entry in the cache\ntype EntryInfo struct &#123;\n\ttimestamp uint64\n\thash      uint64\n\tkey       string\n\tvalue     []byte\n\terr       error\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>timestamp: 8byte.<br>Hash:      8byte.<br>keyLen:    2byte.<br>key:       Nbyte.<br>value:     Nbyte.<br>&#x2F;&#x2F; headerSize(timestamp + hash + keyLen)  &#x3D; 18byte</p>\n<p>将 kv 包装成 entry.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// header                | kv</span>\n<span class=\"token comment\">// timestamp|hash|keySize|key|value</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">wrapEntry</span><span class=\"token punctuation\">(</span>timestamp <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> hash <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> entry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> buffer <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">&#123;</span>\n\tkeyLength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tblobLength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> headersSizeInBytes <span class=\"token operator\">+</span> keyLength\n\n\t<span class=\"token comment\">// 如果 blob 长度 > buffer,重新申请一个  buffer</span>\n\t<span class=\"token keyword\">if</span> blobLength <span class=\"token operator\">></span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token operator\">*</span>buffer <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> blobLength<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tblob <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span>buffer\n\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint64</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span>\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint64</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span>\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint16</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token operator\">+</span>hashSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span>keyLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token operator\">+</span>keyLength<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> blob<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>blobLength<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>解析 entry 为 kv 结构:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 读取 value:  array[headersSizeInBytes + keyLen:]</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readEntry</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 读取 keyLen</span>\n\tlength <span class=\"token operator\">:=</span> binary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">Uint16</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token operator\">+</span>hashSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// copy on read</span>\n\tdst <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>headersSizeInBytes<span class=\"token operator\">+</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token operator\">+</span>length<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> dst\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 读取 timestamp:  uint64(array)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readTimestampFromEntry</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> binary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">Uint64</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 读取 key:  array[headerSize:headerSize + keyLen]</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readKeyFromEntry</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\tlength <span class=\"token operator\">:=</span> binary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">Uint16</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token operator\">+</span>hashSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// copy on read</span>\n\tdst <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token punctuation\">:</span>headersSizeInBytes<span class=\"token operator\">+</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">bytesToString</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// compare key and entry.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">compareKeyFromEntry</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\tlength <span class=\"token operator\">:=</span> binary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">Uint16</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token operator\">+</span>hashSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">bytesToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token punctuation\">:</span>headersSizeInBytes<span class=\"token operator\">+</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//  读取 hash:  uint64(array[timestampSizeinByte:])</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readHashFromEntry</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> binary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">Uint64</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"4-byteQueue\"><a href=\"#4-byteQueue\" class=\"headerlink\" title=\"4. byteQueue\"></a>4. byteQueue</h4><p>实际存储数据.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> BytesQueue <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tfull         <span class=\"token builtin\">bool</span>\n\tarray        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\tcapacity     <span class=\"token builtin\">int</span>\n\tmaxCapacity  <span class=\"token builtin\">int</span>\n\thead         <span class=\"token builtin\">int</span>\n\ttail         <span class=\"token builtin\">int</span>\n\tcount        <span class=\"token builtin\">int</span>\n\trightMargin  <span class=\"token builtin\">int</span>\n\theaderBuffer <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\tverbose      <span class=\"token builtin\">bool</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一个  kv 结构 是一个 <code>entry</code>. <code>entry</code> 存储在 array 里面.   通过 offset 来进行访问.</p>\n<h3 id=\"3-常用方法\"><a href=\"#3-常用方法\" class=\"headerlink\" title=\"3. 常用方法\"></a>3. 常用方法</h3><h4 id=\"3-1-缓存初始化\"><a href=\"#3-1-缓存初始化\" class=\"headerlink\" title=\"3.1  缓存初始化\"></a>3.1  缓存初始化</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// NewBigCache initialize new instance of BigCache</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewBigCache</span><span class=\"token punctuation\">(</span>config Config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>BigCache<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">newBigCache</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>systemClock<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">newBigCache</span><span class=\"token punctuation\">(</span>config Config<span class=\"token punctuation\">,</span> clock clock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>BigCache<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// param check</span>\n\t<span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>Hasher <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tconfig<span class=\"token punctuation\">.</span>Hasher <span class=\"token operator\">=</span> <span class=\"token function\">newDefaultHasher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tcache <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>BigCache<span class=\"token punctuation\">&#123;</span>\n\t\tshards<span class=\"token punctuation\">:</span>     <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cacheShard<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>Shards<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tlifeWindow<span class=\"token punctuation\">:</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>LifeWindow<span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tclock<span class=\"token punctuation\">:</span>      clock<span class=\"token punctuation\">,</span>\n\t\thash<span class=\"token punctuation\">:</span>       config<span class=\"token punctuation\">.</span>Hasher<span class=\"token punctuation\">,</span>\n\t\tconfig<span class=\"token punctuation\">:</span>     config<span class=\"token punctuation\">,</span>\n\t\tshardMask<span class=\"token punctuation\">:</span>  <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>Shards <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用于 快速计算 hash 值</span>\n\t\t<span class=\"token builtin\">close</span><span class=\"token punctuation\">:</span>      <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 接收 close 信号的 一个 chan, 关闭主动清理任务</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 设置 onremove 回调函数</span>\n\t<span class=\"token keyword\">var</span> onRemove <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>wrappedEntry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> reason RemoveReason<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>OnRemoveWithMetadata <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tonRemove <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>providedOnRemoveWithMetadata\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>OnRemove <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tonRemove <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>providedOnRemove\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>OnRemoveWithReason <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tonRemove <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>providedOnRemoveWithReason\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\tonRemove <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>notProvidedOnRemove\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 逐个初始化  shard</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> config<span class=\"token punctuation\">.</span>Shards<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\tcache<span class=\"token punctuation\">.</span>shards<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">initNewShard</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> onRemove<span class=\"token punctuation\">,</span> clock<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 主动清理  过期数据</span>\n\t<span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>CleanWindow <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tticker <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTicker</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>CleanWindow<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">defer</span> ticker<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> t <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ticker<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span>\n\t\t\t\t\tcache<span class=\"token punctuation\">.</span><span class=\"token function\">cleanUp</span><span class=\"token punctuation\">(</span><span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 进行过期数据清理</span>\n\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>cache<span class=\"token punctuation\">.</span><span class=\"token builtin\">close</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"3-2-Get\"><a href=\"#3-2-Get\" class=\"headerlink\" title=\"3.2 Get\"></a>3.2 Get</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Get reads entry for the key.</span>\n<span class=\"token comment\">// It returns an ErrEntryNotFound when</span>\n<span class=\"token comment\">// no entry exists for the given key.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>BigCache<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\thashedKey <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tshard <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getShard</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 取余操作,    c.shards[hashedKey&amp;c.shardMask]</span>\n\t<span class=\"token keyword\">return</span> shard<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 调用 shard.get 获取  value</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>bigcache.hash 默认使用  fnv hash算法.  <code>new 64-bit FNV-1a Hasher</code> 算法 可以 0 内存申请.</p>\n<p><code>shard.Get</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>cacheShard<span class=\"token punctuation\">)</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> hashedKey <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 加 读锁, 保护   hashmap</span>\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\twrappedEntry<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedEntry</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 判断 key 是否相同. 当发生hash冲突时,如果 key不相同, 直接返回 ErrEntryNotFound</span>\n\t<span class=\"token comment\">// bigcache 不解决 hash Collision</span>\n\t<span class=\"token keyword\">if</span> entryKey <span class=\"token operator\">:=</span> <span class=\"token function\">readKeyFromEntry</span><span class=\"token punctuation\">(</span>wrappedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> key <span class=\"token operator\">!=</span> entryKey <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">collision</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>isVerbose <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Collision detected. Both %q and %q have the same hash %x\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> entryKey<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 如果  key 不存在, 返回  `ErrEntryNotFound`</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> ErrEntryNotFound\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// entry: value的 字节数组</span>\n\tentry <span class=\"token operator\">:=</span> <span class=\"token function\">readEntry</span><span class=\"token punctuation\">(</span>wrappedEntry<span class=\"token punctuation\">)</span>\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">hit</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h4 id=\"3-3-Set\"><a href=\"#3-3-Set\" class=\"headerlink\" title=\"3.3 Set\"></a>3.3 Set</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Set saves entry under the key</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>BigCache<span class=\"token punctuation\">)</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> entry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\thashedKey <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 计算 hash 值</span>\n\tshard <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getShard</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 根据  取余 计算 分片 </span>\n\t<span class=\"token keyword\">return</span> shard<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>shard ：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>cacheShard<span class=\"token punctuation\">)</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> hashedKey <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> entry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\tcurrentTimestamp <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">Epoch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// hash Collision| key 已存在(并未进行更新), 将原来的 entry 软删除</span>\n\t<span class=\"token keyword\">if</span> previousIndex <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">[</span>hashedKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> previousIndex <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> previousEntry<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>previousIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">resetKeyFromEntry</span><span class=\"token punctuation\">(</span>previousEntry<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">//remove hashkey</span>\n\t\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 如果 未开启  定时 清理任务, 那么 主动调用, 将最早的数据 清理(如果过期)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span>cleanEnabled <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> oldestEntry<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">onEvict</span><span class=\"token punctuation\">(</span>oldestEntry<span class=\"token punctuation\">,</span> currentTimestamp<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>removeOldestEntry<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 将kv 封装成  entry. ( 从这个方法里面可以 看出 entry 的 数据结构.)</span>\n\tw <span class=\"token operator\">:=</span> <span class=\"token function\">wrapEntry</span><span class=\"token punctuation\">(</span>currentTimestamp<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">.</span>entryBuffer<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//  循环目的是为了 保证 一定放入 数据成功.</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 放入  entrys 中  (bytesQueue)</span>\n\t\t<span class=\"token keyword\">if</span> index<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Push() 也可以看一下</span>\n\t\t\ts<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">[</span>hashedKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 如果 放入 失败, (空间不足, 那么 就用 LRU算法, 清理出空间)</span>\n\t\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">removeOldestEntry</span><span class=\"token punctuation\">(</span>NoSpace<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entry is bigger than max shard size\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<blockquote>\n<p><code>bigcache</code> 为何不提供更新的操作? 其实这是显而易见的:</p>\n<p>每次插入元素, bigCache 会根据插入的 key 和 value 在 BytesQueue 中申请一个固定大小的空间. 因为无法保证更新的 value 值和旧的 value 长度相同(这也是数据定长存储的劣势),这样对 bigcache &gt; 来说，按照时间顺序的 <code>head</code> 和 <code>tail</code> 索引值会乱掉,所以干脆就不提供更新接口了.</p>\n</blockquote>\n<h5 id=\"wrapEntry\"><a href=\"#wrapEntry\" class=\"headerlink\" title=\"wrapEntry\"></a>wrapEntry</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// header                | kv</span>\n<span class=\"token comment\">// timestamp|hash|keySize|key|value</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">wrapEntry</span><span class=\"token punctuation\">(</span>timestamp <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> hash <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> entry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> buffer <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">&#123;</span>\n\tkeyLength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tblobLength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> headersSizeInBytes <span class=\"token operator\">+</span> keyLength\n\n\t<span class=\"token comment\">// 如果 blob 长度 > buffer,重新申请一个  buffer</span>\n\t<span class=\"token keyword\">if</span> blobLength <span class=\"token operator\">></span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token operator\">*</span>buffer <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> blobLength<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tblob <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span>buffer\n\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint64</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span>\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint64</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span>\n\tbinary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint16</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>timestampSizeInBytes<span class=\"token operator\">+</span>hashSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span>keyLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">[</span>headersSizeInBytes<span class=\"token operator\">+</span>keyLength<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> blob<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>blobLength<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"3-4-Delete\"><a href=\"#3-4-Delete\" class=\"headerlink\" title=\"3.4 Delete\"></a>3.4 Delete</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Delete removes the key</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>BigCache<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\thashedKey <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tshard <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getShard</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> shard<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span>hashedKey<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>shard.del()</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Optimistic 乐观锁机制</span>\n<span class=\"token comment\">// 主动删除, 将 entry 中 hash值 置为 0， 如果 不存在,直接返回, 不用加写锁</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>cacheShard<span class=\"token punctuation\">)</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>hashedKey <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Optimistic pre-check using only readlock</span>\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\titemIndex <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">[</span>hashedKey<span class=\"token punctuation\">]</span>\n\n\t\t<span class=\"token keyword\">if</span> itemIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">delmiss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> ErrEntryNotFound\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">CheckGet</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>itemIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">delmiss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// After obtaining the writelock, we need to read the same again,</span>\n\t\t<span class=\"token comment\">// since the data delivered earlier may be stale now</span>\n\t\titemIndex <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">[</span>hashedKey<span class=\"token punctuation\">]</span>\n\n\t\t<span class=\"token keyword\">if</span> itemIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">delmiss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> ErrEntryNotFound\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\twrappedEntry<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>itemIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">delmiss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>hashmap<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">)</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">onRemove</span><span class=\"token punctuation\">(</span>wrappedEntry<span class=\"token punctuation\">,</span> Deleted<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>statsEnabled <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>hashmapStats<span class=\"token punctuation\">,</span> hashedKey<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 将 entry 中的 hash值 置为0,表示删除. (并不是立即回收空间)</span>\n\t\t<span class=\"token function\">resetKeyFromEntry</span><span class=\"token punctuation\">(</span>wrappedEntry<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ts<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">delhit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h3 id=\"4-BytesQueue\"><a href=\"#4-BytesQueue\" class=\"headerlink\" title=\"4. BytesQueue\"></a>4. BytesQueue</h3><p><a href=\"https://github.com/allegro/bigcache/blob/master/queue/bytes_queue.go\">BytesQueue</a> 是一个循环数组, 存储 entry 数据. 通过 offset 来进行访问. 减少 GC 开销. (shard 中的 hashmap 存储的是  hash(key) 与 offset 的映射关系).</p>\n<p><img src=\"/post/bigcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/bigcache-entry.png\"></p>\n<p>bytesQueue 的几个特点: </p>\n<ol>\n<li>存储的 entry  不会是  截断的. (一部分数据在tail, 一部分数据在  头部.)</li>\n<li>entry 的数据格式:   如上图所示.</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// go doc queue BytesQueue</span>\n<span class=\"token keyword\">package</span> queue <span class=\"token comment\">// import \"github.com/allegro/bigcache/v3/queue\"</span>\n\n<span class=\"token keyword\">type</span> BytesQueue <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Has unexported fields.</span>\n<span class=\"token punctuation\">&#125;</span>\n    BytesQueue is a non<span class=\"token operator\">-</span>thread safe queue <span class=\"token keyword\">type</span> of fifo based on bytes array<span class=\"token punctuation\">.</span> For\n    every push operation index of entry is returned<span class=\"token punctuation\">.</span> It can be used to read the\n    entry later\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewBytesQueue</span><span class=\"token punctuation\">(</span>capacity <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> maxCapacity <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> verbose <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>BytesQueue\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">CheckGet</span><span class=\"token punctuation\">(</span>index <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>index <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>BytesQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"bigcache-的缺点-和使用中要注意的点\"><a href=\"#bigcache-的缺点-和使用中要注意的点\" class=\"headerlink\" title=\"bigcache 的缺点 和使用中要注意的点:\"></a>bigcache 的缺点 和使用中要注意的点:</h3><ol>\n<li>bigcache 不支持 为单个key 设置 过期时间, bigcache 中所有的 key 的过期时间是一样的. (如果有需求自己开发)</li>\n<li>bigcache set key 时 不会 更新 entry, 而是将原来的 entry 软删除, 在append 一个entry.</li>\n<li>无持久化功能, 只能用作单机缓存</li>\n<li>BytesQueue 的扩容操作可能会影响性能</li>\n</ol>\n<hr>\n<p>[参考]<br><a href=\"https://blog.allegro.tech/2016/03/writing-fast-cache-service-in-go.html\">Writing a very fast cache service with millions of entries in Go</a><br><a href=\"https://pandaychen.github.io/2020/03/03/BIGCACHE-ANALYSIS/\">Golang 高性能 LocalCache：BigCache 设计与分析</a><br><a href=\"https://blog.csdn.net/weixin_38683995/article/details/113522023\">Golang 中map与GC“纠缠不清”的关系</a><br><a href=\"https://github.com/majunmin/bigcache\">源码</a></p>\n","tags":["golang","cache","bigcache"]},{"title":"clickhouse-原理","url":"//post/clickhouse-%E5%8E%9F%E7%90%86.html","content":"<blockquote>\n<p>Clickhouse 是一个 用于联机分析(OLAP)的 列式存储数据库管理系统(DBMS).</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>常见的列式数据库有: Vertica、 Paraccel (Actian Matrix，<code>Amazon Redshift</code>)、 Sybase IQ、 Exasol、 Infobright、 InfiniDB、 MonetDB (VectorWise， Actian Vector)、 LucidDB、 SAP HANA、 Google Dremel、 Google PowerDrill、 <code>Druid</code>、 kdb+.</p>\n<h2 id=\"OLAP-场景的关键特征\"><a href=\"#OLAP-场景的关键特征\" class=\"headerlink\" title=\"OLAP 场景的关键特征\"></a>OLAP 场景的关键特征</h2><ul>\n<li>绝大多数是读请求</li>\n<li>数据以相当大的批次(&gt; 1000行)更新，而不是单行更新;或者根本没有更新。</li>\n<li>已添加到数据库的数据不能修改。</li>\n<li>对于读取，从数据库中提取相当多的行，但只提取列的一小部分。</li>\n<li>宽表，即每个表包含着大量的列</li>\n<li>查询相对较少(通常每台服务器每秒查询数百次或更少)</li>\n<li>对于简单查询，允许延迟大约50毫秒</li>\n<li>列中的数据相对较小：数字和短字符串(例如，每个URL 60个字节)</li>\n<li>处理单个查询时需要高吞吐量(每台服务器每秒可达数十亿行)</li>\n<li>事务不是必须的</li>\n<li>对数据一致性要求低</li>\n<li>每个查询有一个大表。除了他以外，其他的都很小。</li>\n<li>查询结果明显小于源数据。换句话说，数据经过过滤或聚合，因此结果适合于单个服务器的RAM中</li>\n</ul>\n<h2 id=\"列式数据库更适合OLAP场景的原因\"><a href=\"#列式数据库更适合OLAP场景的原因\" class=\"headerlink\" title=\"列式数据库更适合OLAP场景的原因\"></a>列式数据库更适合OLAP场景的原因</h2><p>列式数据库更适合于OLAP场景(对于大多数查询而言，处理速度至少提高了100倍).</p>\n<p><img src=\"https://clickhouse.com/docs/assets/images/row-oriented-d515facb5bffb48cbd09dc7d064c8816.gif#\"></p>\n<p><img src=\"https://clickhouse.com/docs/assets/images/column-oriented-b992c529fa4085b63b57452fbbeb27ba.gif#\"></p>\n<p>为什么会出现这种情况?</p>\n<h3 id=\"1-IO\"><a href=\"#1-IO\" class=\"headerlink\" title=\"1. IO\"></a>1. IO</h3><ul>\n<li>针对分析类查询, 通常只需要读取表的一小部分列.在列式数据库中你可以只读取你需要的数据.例如，如果只需要读取100列中的5列，这将帮助你最少减少20倍的I&#x2F;O消耗.</li>\n<li>由于数据总是打包成批量读取的，所以压缩是非常容易的.同时数据按列分别存储这也更容易压缩.这进一步降低了I&#x2F;O的体积.</li>\n<li>由于I&#x2F;O的降低,这将帮助更多的数据被系统缓存.</li>\n<li>例如: 查询<code>统计每个广告平台的记录数量</code>需要读取<code>广告平台ID</code>这一列,它在未压缩的情况下需要1个字节进行存储.如果大部分流量不是来自广告平台，那么这一列至少可以以十倍的压缩率被压缩.当采用快速压缩算法,它的解压速度最少在十亿字节(未压缩数据)每秒.换句话说,这个查询可以在单个服务器上以每秒大约几十亿行的速度进行处理.这实际上是当前实现的速度。</li>\n</ul>\n<h3 id=\"2-CPU\"><a href=\"#2-CPU\" class=\"headerlink\" title=\"2.  CPU\"></a>2.  CPU</h3><blockquote>\n<p>由于执行一个查询需要处理大量的行,因此在整个向量上执行所有操作将比在每一行上执行所有操作更加高效.<br>同时这将有助于实现一个几乎没有调用成本的查询引擎.如果你不这样做,使用任何一个机械硬盘.查询引擎都不可避免的停止CPU进行等待.<br>所以,在数据按列存储并且按列执行是很有意义的.</p>\n</blockquote>\n<p>有两种方法可以做到这一点: </p>\n<ul>\n<li><p>向量引擎: 所有的操作都是为向量而不是为单个值编写的.这意味着多个操作之间的不再需要频繁的调用,并且调用的成本基本可以忽略不计.操作代码包含一个优化的内部循环.</p>\n</li>\n<li><p>代码生成: 生成一段代码,包含查询中的所有操作.</p>\n</li>\n</ul>\n<hr>\n<p>[参考]<br><a href=\"https://clickhouse.com/docs/zh/\">什么是clickhouse</a></p>\n","tags":["clickhouse"]},{"title":"docker-compose etcd","url":"//post/docker-compose-etcd.html","content":"<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><p><strong>docker-compose.yml</strong></p>\n<span id=\"more\"></span>\n\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">version: &#39;3&#39;\n\nnetworks:\n  etcd-net:\n    driver: bridge # 网桥模式\n\nvolumes:\n  etcd1_data:       # 挂在到 本地数据卷 名\n    driver: local\n  etcd2_data:\n    driver: local\n  etcd3_data:\n    driver: local\n\nservices:\n  etcd1:\n    image: docker.io&#x2F;bitnami&#x2F;etcd:3\n    container_name: etcd1\n    restart: always\n    networks:\n      - etcd-net\n    ports:\n      - &quot;20000:2379&quot;\n      - &quot;20001:2380&quot;\n    environment:\n      - ALLOW_NONE_AUTHENTICATION&#x3D;yes\n      - ETCD_NAME&#x3D;etcd1\n      - ETCD_INITIAL_ADVERTISE_PEER_URLS&#x3D;http:&#x2F;&#x2F;etcd1:2380\n      - ETCD_LISTEN_PEER_URLS&#x3D;http:&#x2F;&#x2F;0.0.0.0:2380\n      - ETCD_LISTEN_CLIENT_URLS&#x3D;http:&#x2F;&#x2F;0.0.0.0:2379\n      - ETCD_ADVERTISE_CLIENT_URLS&#x3D;http:&#x2F;&#x2F;etcd1:2379\n      - ETCD_INITIAL_CLUSTER_TOKEN&#x3D;etcd-cluster\n      - ETCD_INITIAL_CLUSTER&#x3D;etcd1&#x3D;http:&#x2F;&#x2F;etcd1:2380,etcd2&#x3D;http:&#x2F;&#x2F;etcd2:2380,etcd3&#x3D;http:&#x2F;&#x2F;etcd3:2380\n      - ETCD_INITIAL_CLUSTER_STATE&#x3D;new\n    volumes:\n      - etcd1_data:&#x2F;bitnami&#x2F;etcd\n  etcd2:\n    image: docker.io&#x2F;bitnami&#x2F;etcd:3\n    container_name: etcd2\n    restart: always\n    networks:\n      - etcd-net\n    ports:\n      - &quot;20002:2379&quot;\n      - &quot;20003:2380&quot;\n    environment:\n      - ALLOW_NONE_AUTHENTICATION&#x3D;yes\n      - ETCD_NAME&#x3D;etcd2\n      - ETCD_INITIAL_ADVERTISE_PEER_URLS&#x3D;http:&#x2F;&#x2F;etcd2:2380\n      - ETCD_LISTEN_PEER_URLS&#x3D;http:&#x2F;&#x2F;0.0.0.0:2380\n      - ETCD_LISTEN_CLIENT_URLS&#x3D;http:&#x2F;&#x2F;0.0.0.0:2379\n      - ETCD_ADVERTISE_CLIENT_URLS&#x3D;http:&#x2F;&#x2F;etcd2:2379\n      - ETCD_INITIAL_CLUSTER_TOKEN&#x3D;etcd-cluster\n      - ETCD_INITIAL_CLUSTER&#x3D;etcd1&#x3D;http:&#x2F;&#x2F;etcd1:2380,etcd2&#x3D;http:&#x2F;&#x2F;etcd2:2380,etcd3&#x3D;http:&#x2F;&#x2F;etcd3:2380\n      - ETCD_INITIAL_CLUSTER_STATE&#x3D;new\n    volumes:\n      - etcd2_data:&#x2F;bitnami&#x2F;etcd\n  etcd3:\n    image: docker.io&#x2F;bitnami&#x2F;etcd:3\n    container_name: etcd3\n    restart: always\n    networks:\n      - etcd-net\n    ports:\n      - &quot;20004:2379&quot;\n      - &quot;20005:2380&quot;\n    environment:\n      - ALLOW_NONE_AUTHENTICATION&#x3D;yes\n      - ETCD_NAME&#x3D;etcd3\n      - ETCD_INITIAL_ADVERTISE_PEER_URLS&#x3D;http:&#x2F;&#x2F;etcd3:2380\n      - ETCD_LISTEN_PEER_URLS&#x3D;http:&#x2F;&#x2F;0.0.0.0:2380\n      - ETCD_LISTEN_CLIENT_URLS&#x3D;http:&#x2F;&#x2F;0.0.0.0:2379\n      - ETCD_ADVERTISE_CLIENT_URLS&#x3D;http:&#x2F;&#x2F;etcd3:2379\n      - ETCD_INITIAL_CLUSTER_TOKEN&#x3D;etcd-cluster\n      - ETCD_INITIAL_CLUSTER&#x3D;etcd1&#x3D;http:&#x2F;&#x2F;etcd1:2380,etcd2&#x3D;http:&#x2F;&#x2F;etcd2:2380,etcd3&#x3D;http:&#x2F;&#x2F;etcd3:2380\n      - ETCD_INITIAL_CLUSTER_STATE&#x3D;new\n    volumes:\n      - etcd3_data:&#x2F;bitnami&#x2F;etcd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose up -d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"查看运行状态\"><a href=\"#查看运行状态\" class=\"headerlink\" title=\"查看运行状态\"></a>查看运行状态</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker ps\n\ndocket inspect etcd1\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220620165715.png\"></p>\n<hr>\n<p>[参考]<br><a href=\"https://github.com/bitnami/bitnami-docker-etcd\">bitnami-docker-etcd</a><br><a href=\"https://www.qetool.com/scripts/view/19416.html\">docker-compose 部署etcd集群</a></p>\n","tags":["docker","docker-compose","etcd"]},{"title":"freecache源码解析","url":"//post/freecache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","content":"<p><a href=\"https://github.com/coocood/freecache\">代码仓库地址</a></p>\n<p>freeCache 相比较  golang 的原生map实现缓存,可以<code>通过减少指针的数量避免 GC压力</code>,无论存储了多少数据,内部只会占用 512个指针,<br> 数据集 通过 hash(key) 被分片256个 <code>segment</code>,每个 <code>segment</code> 有两个指针,</p>\n<ul>\n<li>一个存储键和值的唤醒缓冲区</li>\n<li>另一个是用于查找索引条目的索引切片<br>每个 <code>segment</code> 都有自己的  <code>sync.Mutex</code>,所以支持多线程访问.</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>[TOC]</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性:\"></a>特性:</h2><ul>\n<li>存储百万的 entrys</li>\n<li>Zero GC overhead</li>\n<li>线程安全的并发访问</li>\n<li>纯Golang实现</li>\n<li>支持数据过期</li>\n<li>LRU缓存替换策略</li>\n<li>严格限制内存使用</li>\n<li>附带一个 demo server,支持 一些带有管道(pipeline)的 redis命令</li>\n<li>迭代支持</li>\n</ul>\n<h2 id=\"1-数据结构\"><a href=\"#1-数据结构\" class=\"headerlink\" title=\"1. 数据结构\"></a>1. 数据结构</h2><p><img src=\"/post/freecache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/freeCache-datastructure.png\" alt=\"datastructure\"></p>\n<p>将 缓存分为  256 个段 segment, 每个 segment 分为  256 个slot. 采用 开发寻址发 解决 hash冲突问题.</p>\n<ul>\n<li>每个segment 一把锁, 减小锁粒度</li>\n<li>每个 slot 存储数据的索引(在 ringBuffer中的偏移量)</li>\n<li>rinbBuffer 循环数组,实际存储数据.</li>\n</ul>\n<h3 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Cache is a freecache instance.</span>\n<span class=\"token keyword\">type</span> Cache <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tlocks    <span class=\"token punctuation\">[</span>segmentCount<span class=\"token punctuation\">]</span>sync<span class=\"token punctuation\">.</span>Mutex <span class=\"token comment\">// 减小锁粒度, 每个 segment 一把锁</span>\n\tsegments <span class=\"token punctuation\">[</span>segmentCount<span class=\"token punctuation\">]</span>segment\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"segment\"><a href=\"#segment\" class=\"headerlink\" title=\"segment\"></a>segment</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// a segment contains 256 slots, a slot is an array of entry pointers ordered by hash16 value</span>\n<span class=\"token comment\">// the entry can be looked up by hash value of the key.</span>\n<span class=\"token keyword\">type</span> segment <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\trb    RingBuf <span class=\"token comment\">// ring buffer that stores data 环形缓冲区 存储数据</span>\n\tsegId <span class=\"token builtin\">int</span>\n\t<span class=\"token boolean\">_</span>     <span class=\"token builtin\">uint32</span>\n\n\t<span class=\"token comment\">// 一些 统计信息</span>\n\tmissCount     <span class=\"token builtin\">int64</span>\n\thitCount      <span class=\"token builtin\">int64</span>\n\tentryCount    <span class=\"token builtin\">int64</span>\n\ttotalCount    <span class=\"token builtin\">int64</span> <span class=\"token comment\">// number of entries in ring buffer, including deleted entries.</span>\n\ttotalTime     <span class=\"token builtin\">int64</span> <span class=\"token comment\">// used to calculate least recent used entry.</span>\n\ttotalEvacuate <span class=\"token builtin\">int64</span> <span class=\"token comment\">// used for debug</span>\n\ttotalExpired  <span class=\"token builtin\">int64</span> <span class=\"token comment\">// used for debug</span>\n\toverwrites    <span class=\"token builtin\">int64</span> <span class=\"token comment\">// used for debug</span>\n\ttouched       <span class=\"token builtin\">int64</span> <span class=\"token comment\">// used for debug</span>\n\n\ttimer     Timer      <span class=\"token comment\">// Timer giving current time 用于计算过期时间</span>\n\tvacuumLen <span class=\"token builtin\">int64</span>      <span class=\"token comment\">// up to vacuumLen, new data can be written without overwriting old data.</span>\n\tslotLens  <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int32</span> <span class=\"token comment\">// The actual length for every slot.   - (每个 slot 容纳的 entryPtr  数量 len)</span>\n\tslotCap   <span class=\"token builtin\">int32</span>      <span class=\"token comment\">// max number of entry pointers a slot can hold. - (每个 slot 可以容纳的 entryPtr  cap)</span>\n\tslotsData <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>entryPtr <span class=\"token comment\">// shared by all 256 slots - (用来解决 hash冲突, 每个 slot 是一个 []entryPtr, 是直接寻址法)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// entry pointer struct points to an entry in ring buffer, </span>\n<span class=\"token keyword\">type</span> entryPtr <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\toffset   <span class=\"token builtin\">int64</span>  <span class=\"token comment\">// entry offset in ring buffer</span>\n\thash16   <span class=\"token builtin\">uint16</span> <span class=\"token comment\">// entries are ordered by hash16 in a slot.</span>\n\tkeyLen   <span class=\"token builtin\">uint16</span> <span class=\"token comment\">// used to compare a key</span>\n\treserved <span class=\"token builtin\">uint32</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// entry header struct in ring buffer, followed by key and value.</span>\n<span class=\"token keyword\">type</span> entryHdr <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\taccessTime <span class=\"token builtin\">uint32</span>\n\texpireAt   <span class=\"token builtin\">uint32</span>\n\tkeyLen     <span class=\"token builtin\">uint16</span>\n\thash16     <span class=\"token builtin\">uint16</span>\n\tvalLen     <span class=\"token builtin\">uint32</span>\n\tvalCap     <span class=\"token builtin\">uint32</span>\n\tdeleted    <span class=\"token builtin\">bool</span>\n\tslotId     <span class=\"token builtin\">uint8</span>\n\treserved   <span class=\"token builtin\">uint16</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>entryPtr</code>: slot 中存储的数据结构<br><code>entryHdr</code>: ringBuffer 中存储的 entry 的  Header 结构</p>\n<p>每个slot 中存储的 <code>entryPtr</code>. entryPtr.offset 指向 entry 在  ringBuffer 中的偏移量.</p>\n<p>ringBuffer 中 entry的数据结构<br><a href=\"./freecache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/ringBuffer-%3Eentry.png\"></a></p>\n<h3 id=\"ringBuffer\"><a href=\"#ringBuffer\" class=\"headerlink\" title=\"ringBuffer\"></a>ringBuffer</h3><p>ringBuffer 固定大小, 当超过 容量时, 新数据会覆盖老数据.<br> 数据 存储在 data[begin] -&gt; data[end] 之间.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Ring buffer has a fixed size, when data exceeds the</span>\n<span class=\"token comment\">// size, old data will be overwritten by new data.</span>\n<span class=\"token comment\">// It only contains the data in the stream from begin to end</span>\n<span class=\"token keyword\">type</span> RingBuf <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tbegin <span class=\"token builtin\">int64</span> <span class=\"token comment\">// beginning offset of the data stream.</span>\n\tend   <span class=\"token builtin\">int64</span> <span class=\"token comment\">// ending offset of the data stream.</span>\n\tdata  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\tindex <span class=\"token builtin\">int</span> <span class=\"token comment\">//range from '0' to 'len(rb.data)-1'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"2-常用操作\"><a href=\"#2-常用操作\" class=\"headerlink\" title=\"2. 常用操作:\"></a>2. 常用操作:</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># go doc freecache Cache\n\npackage freecache &#x2F;&#x2F; import &quot;github.com&#x2F;coocood&#x2F;freecache&quot;\n\ntype Cache struct &#123;\n        &#x2F;&#x2F; Has unexported fields.\n&#125;\n    Cache is a freecache instance.\n\nfunc NewCache(size int) (cache *Cache)\nfunc NewCacheCustomTimer(size int, timer Timer) (cache *Cache)\nfunc (cache *Cache) AverageAccessTime() int64\nfunc (cache *Cache) Clear()\nfunc (cache *Cache) Del(key []byte) (affected bool)\nfunc (cache *Cache) DelInt(key int64) (affected bool)\nfunc (cache *Cache) EntryCount() (entryCount int64)\nfunc (cache *Cache) EvacuateCount() (count int64)\nfunc (cache *Cache) ExpiredCount() (count int64)\nfunc (cache *Cache) Get(key []byte) (value []byte, err error)\nfunc (cache *Cache) GetFn(key []byte, fn func([]byte) error) (err error)\nfunc (cache *Cache) GetInt(key int64) (value []byte, err error)\nfunc (cache *Cache) GetIntWithExpiration(key int64) (value []byte, expireAt uint32, err error)\nfunc (cache *Cache) GetOrSet(key, value []byte, expireSeconds int) (retValue []byte, err error)\nfunc (cache *Cache) GetWithBuf(key, buf []byte) (value []byte, err error)\nfunc (cache *Cache) GetWithExpiration(key []byte) (value []byte, expireAt uint32, err error)\nfunc (cache *Cache) HitCount() (count int64)\nfunc (cache *Cache) HitRate() float64\nfunc (cache *Cache) LookupCount() int64\nfunc (cache *Cache) MissCount() (count int64)\nfunc (cache *Cache) NewIterator() *Iterator\nfunc (cache *Cache) OverwriteCount() (overwriteCount int64)\nfunc (cache *Cache) Peek(key []byte) (value []byte, err error)\nfunc (cache *Cache) PeekFn(key []byte, fn func([]byte) error) (err error)\nfunc (cache *Cache) ResetStatistics()\nfunc (cache *Cache) Set(key, value []byte, expireSeconds int) (err error)\nfunc (cache *Cache) SetAndGet(key, value []byte, expireSeconds int) (retValue []byte, found bool, err error)\nfunc (cache *Cache) SetInt(key int64, value []byte, expireSeconds int) (err error)\nfunc (cache *Cache) TTL(key []byte) (timeLeft uint32, err error)\nfunc (cache *Cache) Touch(key []byte, expireSeconds int) (err error)\nfunc (cache *Cache) TouchedCount() (touchedCount int64)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"1-Set\"><a href=\"#1-Set\" class=\"headerlink\" title=\"1. Set\"></a>1. Set</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Set sets a key, value and expiration for a cache entry and stores it in the cache.</span>\n<span class=\"token comment\">// If the key is larger than 65535 or value is larger than 1/1024 of the cache size,</span>\n<span class=\"token comment\">// the entry will not be written to the cache. expireSeconds &lt;= 0 means no expire,</span>\n<span class=\"token comment\">// but it can be evicted when cache is full.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cache <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> expireSeconds <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\thashVal <span class=\"token operator\">:=</span> <span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tsegID <span class=\"token operator\">:=</span> hashVal <span class=\"token operator\">&amp;</span> segmentAndOpVal <span class=\"token comment\">// 通过 位运算 计算取余操作</span>\n\tcache<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">[</span>segID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\terr <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>segID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> hashVal<span class=\"token punctuation\">,</span> expireSeconds<span class=\"token punctuation\">)</span>\n\tcache<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">[</span>segID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 取余操作. 对于 2的幂次方取余 可以通过位运算的方式进行处理:\nx % 256 &#x3D; x &amp; (2^8 -1)\nx % 512 &#x3D; x &amp; (2^9 -1)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>拿到 segment 后, </p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>seg <span class=\"token operator\">*</span>segment<span class=\"token punctuation\">)</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> hashVal <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> expireSeconds <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// param check</span>\n\t<span class=\"token operator\">...</span>\n\t\n\tnow <span class=\"token operator\">:=</span> seg<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\texpireAt <span class=\"token operator\">:=</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> expireSeconds <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\texpireAt <span class=\"token operator\">=</span> now <span class=\"token operator\">+</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>expireSeconds<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// uint64     32     16      8       8</span>\n\t<span class=\"token comment\">// hashValue          hash16 slotId</span>\n\tslotId <span class=\"token operator\">:=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span>hashVal <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\thash16 <span class=\"token operator\">:=</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span>hashVal <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// slot 中每个元素是按照  hash16 升序排序的, 因此查询操作可以利用二分查找</span>\n\t<span class=\"token comment\">//从 segment 中查找数据</span>\n\tslot <span class=\"token operator\">:=</span> seg<span class=\"token punctuation\">.</span><span class=\"token function\">getSlot</span><span class=\"token punctuation\">(</span>slotId<span class=\"token punctuation\">)</span>\n\tidx<span class=\"token punctuation\">,</span> match <span class=\"token operator\">:=</span> seg<span class=\"token punctuation\">.</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">,</span> hash16<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token comment\">// idx 要插入的位置,  match 是否找到  对应的 entry</span>\n\n\t<span class=\"token keyword\">var</span> hdrBuf <span class=\"token punctuation\">[</span>ENTRY_HDR_SIZE<span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\thdr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>entryHdr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hdrBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 进行替换操作</span>\n\t<span class=\"token keyword\">if</span> match <span class=\"token punctuation\">&#123;</span>\n\t\tmatchedPtr <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>slot<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n\t\tseg<span class=\"token punctuation\">.</span>rb<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAt</span><span class=\"token punctuation\">(</span>hdrBuf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matchedPtr<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">)</span>\n\t\thdr<span class=\"token punctuation\">.</span>slotId <span class=\"token operator\">=</span> slotId\n\t\thdr<span class=\"token punctuation\">.</span>hash16 <span class=\"token operator\">=</span> hash16\n\t\thdr<span class=\"token punctuation\">.</span>keyLen <span class=\"token operator\">=</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\toriginAccessTime <span class=\"token operator\">:=</span> hdr<span class=\"token punctuation\">.</span>accessTime\n\t\thdr<span class=\"token punctuation\">.</span>accessTime <span class=\"token operator\">=</span> now\n\t\thdr<span class=\"token punctuation\">.</span>expireAt <span class=\"token operator\">=</span> expireAt\n\t\thdr<span class=\"token punctuation\">.</span>valLen <span class=\"token operator\">=</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> hdr<span class=\"token punctuation\">.</span>valCap <span class=\"token operator\">>=</span> hdr<span class=\"token punctuation\">.</span>valLen <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//in place overwrite</span>\n\t\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>seg<span class=\"token punctuation\">.</span>totalTime<span class=\"token punctuation\">,</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>hdr<span class=\"token punctuation\">.</span>accessTime<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>originAccessTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tseg<span class=\"token punctuation\">.</span>rb<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAt</span><span class=\"token punctuation\">(</span>hdrBuf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matchedPtr<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">)</span>\n\t\t\tseg<span class=\"token punctuation\">.</span>rb<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> matchedPtr<span class=\"token punctuation\">.</span>offset<span class=\"token operator\">+</span>ENTRY_HDR_SIZE<span class=\"token operator\">+</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>hdr<span class=\"token punctuation\">.</span>keyLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>seg<span class=\"token punctuation\">.</span>overwrites<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// avoid unnecessary memory copy.</span>\n\t\tseg<span class=\"token punctuation\">.</span><span class=\"token function\">delEntryPtr</span><span class=\"token punctuation\">(</span>slotId<span class=\"token punctuation\">,</span> slot<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\t\tmatch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token comment\">// increase capacity and limit entry len.</span>\n\t\t<span class=\"token comment\">// 进行扩容</span>\n\t\t<span class=\"token keyword\">for</span> hdr<span class=\"token punctuation\">.</span>valCap <span class=\"token operator\">&lt;</span> hdr<span class=\"token punctuation\">.</span>valLen <span class=\"token punctuation\">&#123;</span>\n\t\t\thdr<span class=\"token punctuation\">.</span>valCap <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> hdr<span class=\"token punctuation\">.</span>valCap <span class=\"token operator\">></span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>maxKeyValLen<span class=\"token operator\">-</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\thdr<span class=\"token punctuation\">.</span>valCap <span class=\"token operator\">=</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>maxKeyValLen <span class=\"token operator\">-</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\thdr<span class=\"token punctuation\">.</span>slotId <span class=\"token operator\">=</span> slotId\n\t\thdr<span class=\"token punctuation\">.</span>hash16 <span class=\"token operator\">=</span> hash16\n\t\thdr<span class=\"token punctuation\">.</span>keyLen <span class=\"token operator\">=</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\thdr<span class=\"token punctuation\">.</span>accessTime <span class=\"token operator\">=</span> now\n\t\thdr<span class=\"token punctuation\">.</span>expireAt <span class=\"token operator\">=</span> expireAt\n\t\thdr<span class=\"token punctuation\">.</span>valLen <span class=\"token operator\">=</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\thdr<span class=\"token punctuation\">.</span>valCap <span class=\"token operator\">=</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> hdr<span class=\"token punctuation\">.</span>valCap <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// avoid infinite loop when increasing capacity.</span>\n\t\t\thdr<span class=\"token punctuation\">.</span>valCap <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tentryLen <span class=\"token operator\">:=</span> ENTRY_HDR_SIZE <span class=\"token operator\">+</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>hdr<span class=\"token punctuation\">.</span>valCap<span class=\"token punctuation\">)</span>\n\tslotModified <span class=\"token operator\">:=</span> seg<span class=\"token punctuation\">.</span><span class=\"token function\">evacuate</span><span class=\"token punctuation\">(</span>entryLen<span class=\"token punctuation\">,</span> slotId<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> slotModified <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// the slot has been modified during evacuation, we need to looked up for the 'idx' again.</span>\n\t\t<span class=\"token comment\">// otherwise there would be index out of bound error.</span>\n\t\tslot <span class=\"token operator\">=</span> seg<span class=\"token punctuation\">.</span><span class=\"token function\">getSlot</span><span class=\"token punctuation\">(</span>slotId<span class=\"token punctuation\">)</span>\n\t\tidx<span class=\"token punctuation\">,</span> match <span class=\"token operator\">=</span> seg<span class=\"token punctuation\">.</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">,</span> hash16<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// assert(match == false)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tnewOff <span class=\"token operator\">:=</span> seg<span class=\"token punctuation\">.</span>rb<span class=\"token punctuation\">.</span><span class=\"token function\">End</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 将 偏移量(data在 ringbuffer 中的偏移量)写入  slot</span>\n\tseg<span class=\"token punctuation\">.</span><span class=\"token function\">insertEntryPtr</span><span class=\"token punctuation\">(</span>slotId<span class=\"token punctuation\">,</span> hash16<span class=\"token punctuation\">,</span> newOff<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> hdr<span class=\"token punctuation\">.</span>keyLen<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 写入 ringBuffer</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<ol>\n<li>通过 hash(key) 找到对应的 segment</li>\n<li>通过 hash(key) 找到对应的 slot<ul>\n<li>slotId :&#x3D; uint8(hashVal &gt;&gt; 8)</li>\n<li>hash16 :&#x3D; uint16(hashVal &gt;&gt; 16)</li>\n</ul>\n</li>\n<li>找到  kv 在 slot 中要插入的 位置.   idx</li>\n</ol>\n<ul>\n<li>如果对应的 key 存在,就进行替换. (如果 该位置的容量 &lt; 要插入的kv, 就将该位置标记为 deleted, 往后面append)</li>\n<li>如果 对应的key不存在,就在 slot 后面进行 append.(如果 空间不足就扩容)</li>\n</ul>\n<p>总结:<br>set 操作为什么高效?</p>\n<ul>\n<li>通过  hash(key) 计算  bucket 使用 位运算操作</li>\n<li>通过 二分查找 的方式 在 slot中查询 entry</li>\n<li>key 不存在的场景: <ul>\n<li>如果 ringBuffer容量充足, 就直接在 环尾部 append entry. 时间复杂度 是 O(1)</li>\n<li>如果 ringBuffer容量不足,需要将一些 key 移除掉. freeCache 通过一定的措施，保证移除key的操作时间复杂度为 O(1). entry追加操作的时间复杂度也是O(1)</li>\n</ul>\n</li>\n<li>key存在的场景(match) 找到entry索引:<ul>\n<li>如果原来预留的entry容量充足.那么直接更新原来的entryHdr 和 value. 时间复杂度是 O(1)</li>\n<li>如果原来预留的entry容量不足: freecache 为了避免底层移动数组数据. 不直接对原来的entry进行扩容,而是将原来的entry标记为删除(懒删除).然后在环形缓冲区默认append 新的entry. 时间复杂度是 O(1).</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-Get\"><a href=\"#2-Get\" class=\"headerlink\" title=\"2. Get\"></a>2. Get</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token operator\">/</span> Get returns the value or not found <span class=\"token builtin\">error</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cache <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\thashVal <span class=\"token operator\">:=</span> <span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tsegID <span class=\"token operator\">:=</span> hashVal <span class=\"token operator\">&amp;</span> segmentAndOpVal\n\tcache<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">[</span>segID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tvalue<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>segID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> hashVal<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\tcache<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">[</span>segID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>seg <span class=\"token operator\">*</span>segment<span class=\"token punctuation\">)</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> buf <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> hashVal <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> peek <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> expireAt <span class=\"token builtin\">uint32</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\thdr<span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> seg<span class=\"token punctuation\">.</span><span class=\"token function\">locate</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hashVal<span class=\"token punctuation\">,</span> peek<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\texpireAt <span class=\"token operator\">=</span> hdr<span class=\"token punctuation\">.</span>expireAt\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>hdr<span class=\"token punctuation\">.</span>valLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tvalue <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>hdr<span class=\"token punctuation\">.</span>valLen<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\tvalue <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> hdr<span class=\"token punctuation\">.</span>valLen<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tseg<span class=\"token punctuation\">.</span>rb<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">.</span>offset<span class=\"token operator\">+</span>ENTRY_HDR_SIZE<span class=\"token operator\">+</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>hdr<span class=\"token punctuation\">.</span>keyLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>peek <span class=\"token punctuation\">&#123;</span>\n\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>seg<span class=\"token punctuation\">.</span>hitCount<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>找到  segment, 然后 找到 对应的 slot</li>\n<li><code>seg.locate()</code> 找到 对应的 <code>entryPtr</code>,以及 对应的 <code>entryHdr</code></li>\n</ol>\n<p>要读取的数据在 ringBuffer中的偏移量是   ptr.offset + ENTRY_HDR_SIZR + keyLen</p>\n<h3 id=\"3-过期-与删除\"><a href=\"#3-过期-与删除\" class=\"headerlink\" title=\"3. 过期 与删除\"></a>3. 过期 与删除</h3><h4 id=\"3-1-key-过期\"><a href=\"#3-1-key-过期\" class=\"headerlink\" title=\"3.1. key 过期\"></a>3.1. key 过期</h4><p>对于过期的数据,freecache会让它继续存储在RingBuf中,RingBuf从一开始初始化之后,就固定不变了. 是否删掉数据,对RingBuf的实际占用空间不会产生影响.<br>当get到一个过期缓存时，freecache会删掉缓存的entry索引(但是不会将缓存从RingBuf中移除), 然后对外报ErrNotFound错误. 当RingBuf的容量不足时,会从环头开始遍历,如果key已经过期，这时才会将它删除掉. 如果一个key已经过期时,在它被freecache删除之前,如果又重新set进来（过期不会主动删除entry索引，理论上有被重新set的可能），过期的entry容量充足的情况下，则会重新复用这个entry.<br>freecache这种过期机制,一方面减少了维护过期数据的工作,另一方面,freecache底层存储是采用数组来实现,要求缓存数据必须连续,缓存过期的剔除会带来空间碎片,挪动数组来维持缓存数据的连续性不是一个很好的选择.</p>\n<h4 id=\"3-2-key-删除\"><a href=\"#3-2-key-删除\" class=\"headerlink\" title=\"3.2 key 删除\"></a>3.2 key 删除</h4><p>freecache有一下两种情况会进行删除key操作:</p>\n<ul>\n<li>外部主动调用del接口删除key.</li>\n<li>set缓存时，发现key已经存在，但是为entry预留的cap不足时，会选择将旧的数据删掉，然后再环尾追加新的数据.</li>\n</ul>\n<p>freecache的删除机制也是<strong>懒删除</strong>,删除缓存时，只会删掉entry索引,但是缓存还是会继续保留在RingBuf中,只是被标记为删除,等到RingBuf容量不足需要置换缓存时,才会对标记为删除的缓存数据做最后的删除工作. freecache删除一个key,需要搜索entry索引和标记缓存数据.</p>\n<h2 id=\"4-RingBuffer\"><a href=\"#4-RingBuffer\" class=\"headerlink\" title=\"4. RingBuffer\"></a>4. RingBuffer</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">&#x2F;&#x2F; go doc RingBuf\npackage freecache &#x2F;&#x2F; import &quot;.&quot;\n\ntype RingBuf struct &#123;\n        &#x2F;&#x2F; Has unexported fields.\n&#125;\n    Ring buffer has a fixed size, when data exceeds the size, old data will be\n    overwritten by new data. It only contains the data in the stream from begin\n    to end\n\nfunc NewRingBuf(size int, begin int64) (rb RingBuf)\nfunc (rb *RingBuf) Begin() int64\nfunc (rb *RingBuf) Dump() []byte\nfunc (rb *RingBuf) End() int64\nfunc (rb *RingBuf) EqualAt(p []byte, off int64) bool\nfunc (rb *RingBuf) Evacuate(off int64, length int) (newOff int64)\nfunc (rb *RingBuf) ReadAt(p []byte, off int64) (n int, err error)\nfunc (rb *RingBuf) Reset(begin int64)\nfunc (rb *RingBuf) Resize(newSize int)\nfunc (rb *RingBuf) Size() int64\nfunc (rb *RingBuf) Skip(length int64)\nfunc (rb *RingBuf) Slice(off, length int64) ([]byte, error)\nfunc (rb *RingBuf) String() string\nfunc (rb *RingBuf) Write(p []byte) (n int, err error)\nfunc (rb *RingBuf) WriteAt(p []byte, off int64) (n int, err error)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p><a href=\"https://ferrous-systems.com/blog/lock-free-ring-buffer/\">实现一个 ringBuffer</a></p>\n<hr>\n<p><a href=\"https://xiazemin.github.io/MyBlog/golang/2021/07/02/freecache.html\">freeCache zeroGC 的Go Cache</a><br><a href=\"https://github.com/majunmin/freecache/tree/reader\">添加注释的代码</a></p>\n","tags":["golang","cache"]},{"title":"fastcache源码分析","url":"//post/fastcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","content":"<p><a href=\"https://github.com/VictoriaMetrics/fastcache\">fastcache</a> </p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性:\"></a>特性:</h2><ul>\n<li>快速, 高性能, 多 CPU上 可扩展</li>\n<li>线程安全.  多个 goroutine 可以同时读写一个cache 实例</li>\n<li>fastcache 设计为 在存储大量的 entry 的场景下 GC free</li>\n<li>fastcache 当 缓存数量达到阈值时 可以自动 清理 old entry </li>\n<li>简单的API</li>\n<li>简单的源代码</li>\n<li>cacheData 可以 保存到文件(从文件中加载)</li>\n<li>在 <a href=\"https://cloud.google.com/appengine/docs/go/\">Google App Engine</a> 上工作</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"fastcache-的一些概念\"><a href=\"#fastcache-的一些概念\" class=\"headerlink\" title=\"fastcache 的一些概念\"></a>fastcache 的一些概念</h3><p>bucket:  分桶,  默认 cache中有 512个 bucket,  减少锁粒度 (bucket 内部 会维护  lock, hashmap, chunk, stat(统计信息))</p>\n<p>chunks: <code>[][]byte</code>  用于 存储 kv 的 一个 ringbuffer.  这里二维数组 用来模拟 循环 数组.(减少扩容操作.)</p>\n<p><img src=\"/post/fastcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/chunks.png\" alt=\"chunks\"></p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p><img src=\"/post/fastcache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/fastcache%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\" alt=\"fastcache数据结构\"></p>\n<p>fastcache 代码比较简单. </p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Cache is a fast thread-safe inmemory cache optimized for big number</span>\n<span class=\"token comment\">// of entries.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// It has much lower impact on GC comparing to a simple `map[string][]byte`.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Use New or LoadFromFile* for creating new cache instance.</span>\n<span class=\"token comment\">// Concurrent goroutines may call any Cache methods on the same cache instance.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Call Reset when the cache is no longer needed. This reclaims the allocated</span>\n<span class=\"token comment\">// memory.</span>\n<span class=\"token keyword\">type</span> Cache <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tbuckets <span class=\"token punctuation\">[</span>bucketsCount<span class=\"token punctuation\">]</span>bucket <span class=\"token comment\">// bucketCount default 512</span>\n\n\tbigStats BigStats\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 一个 bucket</span>\n<span class=\"token keyword\">type</span> bucket <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tmu sync<span class=\"token punctuation\">.</span>RWMutex\n\n\t<span class=\"token comment\">// chunks is a ring buffer with encoded (k, v) pairs.</span>\n\t<span class=\"token comment\">// It consists of 64KB chunks.</span>\n\t<span class=\"token comment\">// 每个 块是64K, 也就是 chunkSize</span>\n\tchunks <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\n\t<span class=\"token comment\">// m maps hash(k) to idx of (k, v) pair in chunks.</span>\n\t<span class=\"token comment\">// key: hash(key) value:  idx, value 在 chunk中的偏移量(byte) gen+idx</span>\n\tm <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// idx points to chunks for writing the next (k, v) pair.</span>\n\t<span class=\"token comment\">// 用于计算下一个chunk</span>\n\tidx <span class=\"token builtin\">uint64</span> <span class=\"token comment\">// 下一次 要写入的 位置</span>\n\n\t<span class=\"token comment\">// gen is the generation of chunks.</span>\n\tgen <span class=\"token builtin\">uint64</span> <span class=\"token comment\">// chunk 的循环次数</span>\n\n\t<span class=\"token comment\">// 一些统计信息</span>\n\tgetCalls    <span class=\"token builtin\">uint64</span>\n\tsetCalls    <span class=\"token builtin\">uint64</span>\n\tmisses      <span class=\"token builtin\">uint64</span>\n\tcollisions  <span class=\"token builtin\">uint64</span>\n\tcorruptions <span class=\"token builtin\">uint64</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><h4 id=\"1-New\"><a href=\"#1-New\" class=\"headerlink\" title=\"1. New\"></a>1. New</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// New returns new cache with the given maxBytes capacity in bytes.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// maxBytes must be smaller than the available RAM size for the app,</span>\n<span class=\"token comment\">// since the cache holds data in memory.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If maxBytes is less than 32MB, then the minimum cache capacity is 32MB.   - 每个 bucket 最小  64K(一个chunk)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>maxBytes <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// param check</span>\n\t<span class=\"token keyword\">var</span> c Cache\n\t<span class=\"token comment\">// 如果 maxByte / bucketCount 有余数的话, 把超出的部分 分填到  每个 bucket</span>\n\tmaxBucketBytes <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxBytes <span class=\"token operator\">+</span> bucketsCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> bucketsCount<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>maxBucketBytes<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>c\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// bucket 初始化</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>bucket<span class=\"token punctuation\">)</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>maxBytes <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// param check ...</span>\n\t<span class=\"token comment\">// 同样的, 将多余的 字节分散到 每个  chunk</span>\n\tmaxChunks <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>maxBytes <span class=\"token operator\">+</span> chunkSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> chunkSize\n\tb<span class=\"token punctuation\">.</span>chunks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> maxChunks<span class=\"token punctuation\">)</span>\n\tb<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-Set\"><a href=\"#2-Set\" class=\"headerlink\" title=\"2. Set\"></a>2. Set</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Set stores (k, v) in the cache.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Get must be used for reading the stored entry.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 当 发生 overflow  或者  不太可能的 hash Collision  时, entry  将会被丢弃 </span>\n<span class=\"token comment\">// - 如果 经常发生 entry丢失, 那么应该  调用 New()， 调大 最大字节数</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 超过64KB(chunkSize) 不能用 Set 进行存储,应该调用 SetBig.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// k and v contents may be modified after returning from Set.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\th <span class=\"token operator\">:=</span> xxhash<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n\tidx <span class=\"token operator\">:=</span> h <span class=\"token operator\">%</span> bucketsCount <span class=\"token comment\">// 这里 可以 使用  位运算:  h &amp; (bucketsCount - 1)</span>\n\tc<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>bucket.Set()</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// 2byte | 2byte | nbyte | nbyte</span>\n<span class=\"token comment\">// keylen|valLen|key|value</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>bucket<span class=\"token punctuation\">)</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> h <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>setCalls<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Too big key or value - its length cannot be encoded</span>\n\t\t<span class=\"token comment\">// with 2 bytes (see below). Skip the entry.</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 大端存储</span>\n\t<span class=\"token keyword\">var</span> kvLenBuf <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\tkvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\tkvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tkvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\tkvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tkvLen <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>kvLenBuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 要写入的数据的长度</span>\n\t<span class=\"token keyword\">if</span> kvLen <span class=\"token operator\">>=</span> chunkSize <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Do not store too big keys and values, since they do not</span>\n\t\t<span class=\"token comment\">// fit a chunk.</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// chunk</span>\n\t<span class=\"token comment\">// chunkIdx:  chunk</span>\n\t<span class=\"token comment\">// 0:[000000000000000000]  // 64K</span>\n\t<span class=\"token comment\">// 1:[000000000000000000]</span>\n\t<span class=\"token comment\">// 2:[000000000000000000]</span>\n\t<span class=\"token comment\">// 3:[000000000000000000]</span>\n\tchunks <span class=\"token operator\">:=</span> b<span class=\"token punctuation\">.</span>chunks\n\tneedClean <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tidx <span class=\"token operator\">:=</span> b<span class=\"token punctuation\">.</span>idx\n\tidxNew <span class=\"token operator\">:=</span> idx <span class=\"token operator\">+</span> kvLen\n\tchunkIdx <span class=\"token operator\">:=</span> idx <span class=\"token operator\">/</span> chunkSize\n\tchunkIdxNew <span class=\"token operator\">:=</span> idxNew <span class=\"token operator\">/</span> chunkSize\n\t<span class=\"token keyword\">if</span> chunkIdxNew <span class=\"token operator\">></span> chunkIdx <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//当前 chunk 放不下 该 kv, 往下一个 chunk 写 或者 循环写</span>\n\t\t<span class=\"token keyword\">if</span> chunkIdxNew <span class=\"token operator\">>=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环写</span>\n\t\t\tidx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\tidxNew <span class=\"token operator\">=</span> kvLen\n\t\t\tchunkIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\tb<span class=\"token punctuation\">.</span>gen<span class=\"token operator\">++</span>                              <span class=\"token comment\">// 循环次数</span>\n\t\t\t<span class=\"token keyword\">if</span> b<span class=\"token punctuation\">.</span>gen<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>genSizeBits<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// b.gen&amp;maxGen == 0, 说明 b.gen == maxGen</span>\n\t\t\t\tb<span class=\"token punctuation\">.</span>gen<span class=\"token operator\">++</span> <span class=\"token comment\">// 此处 ++ 的目的是为了 循环取余</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tneedClean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 当 chunks 满了, 需要 从 头chunks[0]开始写, 需要把当前 chunk 全部清空.(清空  b.m)</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 大部分场景</span>\n\t\t\tidx <span class=\"token operator\">=</span> chunkIdxNew <span class=\"token operator\">*</span> chunkSize\n\t\t\tidxNew <span class=\"token operator\">=</span> idx <span class=\"token operator\">+</span> kvLen\n\t\t\tchunkIdx <span class=\"token operator\">=</span> chunkIdxNew\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tchunks<span class=\"token punctuation\">[</span>chunkIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chunks<span class=\"token punctuation\">[</span>chunkIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 将该chunk清空</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tchunk <span class=\"token operator\">:=</span> chunks<span class=\"token punctuation\">[</span>chunkIdx<span class=\"token punctuation\">]</span>\n\t<span class=\"token comment\">// 首次初始化 , chunk[i] == nil</span>\n\t<span class=\"token keyword\">if</span> chunk <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tchunk <span class=\"token operator\">=</span> <span class=\"token function\">getChunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 性能关键点: 堆外分配内存</span>\n\t\tchunk <span class=\"token operator\">=</span> chunk<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 正式写入数据</span>\n\tchunk <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> kvLenBuf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\tchunk <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> k<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\tchunk <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> v<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\tchunks<span class=\"token punctuation\">[</span>chunkIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chunk\n\tb<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> idx <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>gen <span class=\"token operator\">&lt;&lt;</span> bucketSizeBits<span class=\"token punctuation\">)</span> <span class=\"token comment\">// gen + idx</span>\n\tb<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> idxNew\n\t<span class=\"token keyword\">if</span> needClean <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 清理 覆盖的  overflow 的 chunk(遍历 b.m,逐个 判断 清理)</span>\n\t\tb<span class=\"token punctuation\">.</span><span class=\"token function\">cleanLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>gen: 循环次数, gen 在什么情况下 会 + 1?</strong></p>\n<p>bucket.gen 在初始化时默认值是 <code>1</code>,  当 chunks 写满后, gen 会 +1, 表示循环次数.  当 gen  达到 maxGen(1 &lt;&lt; 24 -1) 后, gen 复位为1.</p>\n<p>了解了 <code>gen</code>: 相信下面这几个条件就可以看懂了:</p>\n<blockquote>\n<p>gen &#x3D;&#x3D; bGen &amp;&amp; idx &lt; b.idx: 在一个循环内<br>gen+1 &#x3D;&#x3D; bGen &amp;&amp; idx &gt;&#x3D; b.idx: 不在一个循环内,数据没有覆盖<br>gen &#x3D;&#x3D; maxGen &amp;&amp; bGen &#x3D;&#x3D; 1 &amp;&amp; idx &gt;&#x3D; b.idx: 重新开始循环,数据没有覆盖</p>\n</blockquote>\n<p><strong>当 chunk 写满了, 使用下一个 chunk 时, 使用 getChunk() 初始化 chunk ?</strong></p>\n<p><code>getChunk()</code> 在堆外分配内存, 而不是直接在堆上 分配, 减少GC压力. 这是 fastcache 高性能的一个关键点.</p>\n<p>在 <code>malloc_mmap.go</code> 维护了一个  chunk 池子,可以复用 chunk.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">const</span> chunksPerAlloc <span class=\"token operator\">=</span> <span class=\"token number\">1024</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">//这里  相当于一个 chunk 池子</span>\n\tfreeChunks     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>chunkSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\tfreeChunksLock sync<span class=\"token punctuation\">.</span>Mutex\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 预分配  chunkSize*chunksPerAlloc 的 字节数组,(offheap), 通过 mmap</span>\n<span class=\"token comment\">// 每次 getChunk 从中截取  chunkSize 大小的  []byte</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getChunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">&#123;</span>\n\tfreeChunksLock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 如果 freechunk 没有了, 从堆外申请.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>freeChunks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Allocate offheap memory, so GOGC won't take into account cache size.</span>\n\t\t<span class=\"token comment\">// This should reduce free memory waste.</span>\n\t\t<span class=\"token comment\">// 堆外申请内存, GOGC 不会考虑 缓存大小, 这应该会减少 free memory 浪费.</span>\n\t\tdata<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> unix<span class=\"token punctuation\">.</span><span class=\"token function\">Mmap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> chunkSize<span class=\"token operator\">*</span>chunksPerAlloc<span class=\"token punctuation\">,</span> unix<span class=\"token punctuation\">.</span>PROT_READ<span class=\"token operator\">|</span>unix<span class=\"token punctuation\">.</span>PROT_WRITE<span class=\"token punctuation\">,</span> unix<span class=\"token punctuation\">.</span>MAP_ANON<span class=\"token operator\">|</span>unix<span class=\"token punctuation\">.</span>MAP_PRIVATE<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot allocate %d bytes via mmap: %s\"</span><span class=\"token punctuation\">,</span> chunkSize<span class=\"token operator\">*</span>chunksPerAlloc<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tp <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>chunkSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tfreeChunks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>freeChunks<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>\n\t\t\tdata <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>chunkSize<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tn <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>freeChunks<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\tp <span class=\"token operator\">:=</span> freeChunks<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n\tfreeChunks<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tfreeChunks <span class=\"token operator\">=</span> freeChunks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span>\n\tfreeChunksLock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n<h4 id=\"3-Get\"><a href=\"#3-Get\" class=\"headerlink\" title=\"3. Get\"></a>3. Get</h4><p><strong>cache.Get()</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Get appends value by the key k to dst and returns the result.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Get allocates new byte slice for the returned value if dst is nil.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Get returns only values stored in c via Set.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// k contents may be modified after returning from Get.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">&#123;</span>\n\th <span class=\"token operator\">:=</span> xxhash<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n\tidx <span class=\"token operator\">:=</span> h <span class=\"token operator\">%</span> bucketsCount <span class=\"token comment\">// 这里 可以 优化为 位运算.</span>\n\tdst<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> dst\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>bucket.Get()</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>bucket<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> h <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> returnDst <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>getCalls<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tfound <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n\tchunks <span class=\"token operator\">:=</span> b<span class=\"token punctuation\">.</span>chunks\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tv <span class=\"token operator\">:=</span> b<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 读取 value， 从中解析出  idx &amp; gen</span>\n\tbGen <span class=\"token operator\">:=</span> b<span class=\"token punctuation\">.</span>gen <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> genSizeBits<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> v <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\tgen <span class=\"token operator\">:=</span> v <span class=\"token operator\">>></span> bucketSizeBits\n\t\tidx <span class=\"token operator\">:=</span> v <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> bucketSizeBits<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// gen == bGen &amp;&amp; idx &lt; b.idx: 在一个循环内</span>\n\t\t<span class=\"token comment\">// gen+1 == bGen &amp;&amp; idx >= b.idx: 不在一个循环内,数据没有覆盖</span>\n\t\t<span class=\"token comment\">// gen == maxGen &amp;&amp; bGen == 1 &amp;&amp; idx >= b.idx: 重新开始循环,数据没有覆盖</span>\n\t\t<span class=\"token keyword\">if</span> gen <span class=\"token operator\">==</span> bGen <span class=\"token operator\">&amp;&amp;</span> idx <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">||</span> gen<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> bGen <span class=\"token operator\">&amp;&amp;</span> idx <span class=\"token operator\">>=</span> b<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">||</span> gen <span class=\"token operator\">==</span> maxGen <span class=\"token operator\">&amp;&amp;</span> bGen <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> idx <span class=\"token operator\">>=</span> b<span class=\"token punctuation\">.</span>idx <span class=\"token punctuation\">&#123;</span>\n\t\t\tchunkIdx <span class=\"token operator\">:=</span> idx <span class=\"token operator\">/</span> chunkSize\n\t\t\t<span class=\"token keyword\">if</span> chunkIdx <span class=\"token operator\">>=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// Corrupted data during the load from file. Just skip it.</span>\n\t\t\t\t<span class=\"token comment\">// 文件加载时损坏的数据,跳过</span>\n\t\t\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>corruptions<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">goto</span> end\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tchunk <span class=\"token operator\">:=</span> chunks<span class=\"token punctuation\">[</span>chunkIdx<span class=\"token punctuation\">]</span>\n\t\t\tidx <span class=\"token operator\">%=</span> chunkSize\n\t\t\t<span class=\"token keyword\">if</span> idx<span class=\"token operator\">+</span><span class=\"token number\">4</span> <span class=\"token operator\">>=</span> chunkSize <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// Corrupted data during the load from file. Just skip it.</span>\n\t\t\t\t<span class=\"token comment\">// 文件加载时损坏的数据,跳过</span>\n\t\t\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>corruptions<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">goto</span> end\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tkvLenBuf <span class=\"token operator\">:=</span> chunk<span class=\"token punctuation\">[</span>idx <span class=\"token punctuation\">:</span> idx<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\t\t\tkeyLen <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>kvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>kvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tvalLen <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>kvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>kvLenBuf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tidx <span class=\"token operator\">+=</span> <span class=\"token number\">4</span>\n\t\t\t<span class=\"token keyword\">if</span> idx<span class=\"token operator\">+</span>keyLen<span class=\"token operator\">+</span>valLen <span class=\"token operator\">>=</span> chunkSize <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// Corrupted data during the load from file. Just skip it.</span>\n\t\t\t\t<span class=\"token comment\">// 文件加载时损坏的数据,跳过</span>\n\t\t\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>corruptions<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">goto</span> end\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">// hash 值相同, 判断 key 是否一致</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">:</span>idx<span class=\"token operator\">+</span>keyLen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// dst = chunk[idx+keyLen:idx+valLen]</span>\n\t\t\t\tidx <span class=\"token operator\">+=</span> keyLen\n\t\t\t\t<span class=\"token keyword\">if</span> returnDst <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tdst <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">:</span>idx<span class=\"token operator\">+</span>valLen<span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tfound <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// 发生hash collision</span>\n\t\t\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>collisions<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\nend<span class=\"token punctuation\">:</span>\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>found <span class=\"token punctuation\">&#123;</span>\n\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>misses<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">,</span> found\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"4-Del\"><a href=\"#4-Del\" class=\"headerlink\" title=\"4. Del\"></a>4. Del</h4><p>del 的 逻辑比较简单. 不处理 chunk, 直接 在 bucket的hash表m中进行删除</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>bucket<span class=\"token punctuation\">)</span> <span class=\"token function\">Del</span><span class=\"token punctuation\">(</span>h <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n\tb<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"file-Load-Save\"><a href=\"#file-Load-Save\" class=\"headerlink\" title=\"file  Load | Save\"></a>file  Load | Save</h3><ul>\n<li><a href=\"https://github.com/VictoriaMetrics/fastcache/blob/078d48108c89d61e64e9cd0ea159c570827098c7/file.go\">源码文件</a></li>\n</ul>\n<p>file Save, 将缓存中的内容 按照一定的协议持久化写入文件中. 这个操作也比较常见.(比如 proto)</p>\n<p>fileSave:  多携程 并发的写入 file, 多个协程 根据 bucket 分任务, 分别 写入文件,加速 写入 效率.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// SaveToFile atomically saves cache data to the given filePath using a single</span>\n<span class=\"token comment\">// CPU core.</span>\n<span class=\"token comment\">// 利用 但 cpu 保存  缓存数据到 filePath</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// SaveToFile may be called concurrently with other operations on the cache.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The saved data may be loaded with LoadFromFile*.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// See also SaveToFileConcurrent for faster saving to file.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">SaveToFile</span><span class=\"token punctuation\">(</span>filePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">SaveToFileConcurrent</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// SaveToFileConcurrent saves cache data to the given filePath using concurrency</span>\n<span class=\"token comment\">// CPU cores.</span>\n<span class=\"token comment\">// 利用 多 cpu 将 缓存数据并发保存到文件.</span>\n<span class=\"token comment\">// 这里参数的  filePath 也是一个 目录</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// SaveToFileConcurrent may be called concurrently with other operations</span>\n<span class=\"token comment\">// on the cache.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The saved data may be loaded with LoadFromFile*.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// See also SaveToFile.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">SaveToFileConcurrent</span><span class=\"token punctuation\">(</span>filePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> concurrency <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Create dir if it doesn't exist.</span>\n\tdir <span class=\"token operator\">:=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Dir</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Stat</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">IsNotExist</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot stat %q: %s\"</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">MkdirAll</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token number\">0755</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create dir %q: %s\"</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// Save cache data into a temporary directory.</span>\n\ttmpDir<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">TempDir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fastcache.tmp.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create temporary dir inside %q: %s\"</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> tmpDir <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAll</span><span class=\"token punctuation\">(</span>tmpDir<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tgomaxprocs <span class=\"token operator\">:=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> concurrency <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> concurrency <span class=\"token operator\">></span> gomaxprocs <span class=\"token punctuation\">&#123;</span>\n\t\tconcurrency <span class=\"token operator\">=</span> gomaxprocs\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//  并发保存数据到 文件</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>tmpDir<span class=\"token punctuation\">,</span> concurrency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot save cache data to temporary dir %q: %s\"</span><span class=\"token punctuation\">,</span> tmpDir<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// Remove old filePath contents, since os.Rename may return</span>\n\t<span class=\"token comment\">// error if filePath dir exists.</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAll</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot remove old contents at %q: %s\"</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 相当于 move</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Rename</span><span class=\"token punctuation\">(</span>tmpDir<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot move temporary dir %q to %q: %s\"</span><span class=\"token punctuation\">,</span> tmpDir<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ttmpDir <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存数据到文件. 这也是一种常见的多协程 编程模式. 利用协程和 chan.</p>\n<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">\nfunc (c *Cache) save(dir string, workersCount int) error &#123;\n\tif err :&#x3D; saveMetadata(c, dir); err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\n\t&#x2F;&#x2F; Save buckets by workersCount concurrent workers.\n\tworkCh :&#x3D; make(chan int, workersCount)\n\tresults :&#x3D; make(chan error)\n\tfor i :&#x3D; 0; i &lt; workersCount; i++ &#123;\n\t\tgo func(workerNum int) &#123;\n\t\t\tresults &lt;- saveBuckets(c.buckets[:], workCh, dir, workerNum)\n\t\t&#125;(i)\n\t&#125;\n\t&#x2F;&#x2F; 给 work 分发工作. 传 bucketIndex. workCh 相当于一个任务队列.\n\t&#x2F;&#x2F; Feed workers with work\n\tfor i :&#x3D; range c.buckets[:] &#123;\n\t\tworkCh &lt;- i\n\t&#125;\n\tclose(workCh)\n\n\t&#x2F;&#x2F; Read results.  -- 如果使用 waitGroup 该怎么写呢?\n\tvar err error\n\tfor i :&#x3D; 0; i &lt; workersCount; i++ &#123;\n\t\tresult :&#x3D; &lt;-results\n\t\tif result !&#x3D; nil &amp;&amp; err &#x3D;&#x3D; nil &#123;\n\t\t\terr &#x3D; result\n\t\t&#125;\n\t&#125;\n\treturn err\n&#125;\n\nfunc saveBuckets(buckets []bucket, workCh &lt;-chan int, dir string, workerNum int) error &#123;\n\t&#x2F;&#x2F; 一个 协程 一个文件.\n\tdataPath :&#x3D; fmt.Sprintf(&quot;%s&#x2F;data.%d.bin&quot;, dir, workerNum)\n\tdataFile, err :&#x3D; os.Create(dataPath)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;cannot create %q: %s&quot;, dataPath, err)\n\t&#125;\n\tdefer func() &#123;\n\t\t_ &#x3D; dataFile.Close()\n\t&#125;()\n\t&#x2F;&#x2F; 数据进行压缩.\n\tzw :&#x3D; snappy.NewBufferedWriter(dataFile)\n\tfor bucketNum :&#x3D; range workCh &#123;\n\t\t&#x2F;&#x2F; save BucketNum\n\t\tif err :&#x3D; writeUint64(zw, uint64(bucketNum)); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;cannot write bucketNum&#x3D;%d to %q: %s&quot;, bucketNum, dataPath, err)\n\t\t&#125;\n\t\t&#x2F;&#x2F; save BucketData\n\t\tif err :&#x3D; buckets[bucketNum].Save(zw); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;cannot save bucket[%d] to %q: %s&quot;, bucketNum, dataPath, err)\n\t\t&#125;\n\t&#125;\n\tif err :&#x3D; zw.Close(); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;cannot close snappy.Writer for %q: %s&quot;, dataPath, err)\n\t&#125;\n\treturn nil\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>LoadFile:</p>\n<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n<p>[参考]<br><a href=\"https://www.bilibili.com/video/BV17Y411J7vG/?spm_id_from=333.337.search-card.all.click&vd_source=fe2ba0ea18a9a373ca67c032c344409e\">fastcache内部原理讲解及核心源码分析</a><br><a href=\"https://zhuanlan.zhihu.com/p/487455942\">golang本地缓存(bigcache&#x2F;freecache&#x2F;fastcache等)选型对比及原理总结</a></p>\n","tags":["cache","go","fastcache"]},{"title":"go build 实现包切换","url":"//post/go-build-%E5%AE%9E%E7%8E%B0%E5%8C%85%E5%88%87%E6%8D%A2.html","content":"<p>参考 <a href=\"https://github.com/gin-gonic/gin\">Gin</a> 的实现</p>\n<p>gin 在  <code>internal/json</code>包中实现了多个 json 包的序列化能力, 默认使用官方<code>encoding/json</code>包. 如何保证这些包不会冲突呢?</p>\n<p>这里用到了  <code>go build -tags</code> 的能力.</p>\n<p><code>[json.go](https://github.com/gin-gonic/gin/blob/master/internal/json/json.go)</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Copyright 2017 Bo-Yi Wu. All rights reserved.</span>\n<span class=\"token comment\">// Use of this source code is governed by a MIT style</span>\n<span class=\"token comment\">// license that can be found in the LICENSE file.</span>\n\n<span class=\"token comment\">//go:build !jsoniter &amp;&amp; !go_json &amp;&amp; !(sonic &amp;&amp; avx &amp;&amp; (linux || windows || darwin) &amp;&amp; amd64)</span>\n<span class=\"token comment\">// +build !jsoniter</span>\n<span class=\"token comment\">// +build !go_json</span>\n<span class=\"token comment\">// +build !sonic !avx !linux,!windows,!darwin !amd64</span>\n\n<span class=\"token keyword\">package</span> json\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"encoding/json\"</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">// Marshal is exported by gin/json package.</span>\n\tMarshal <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>Marshal\n\t<span class=\"token comment\">// Unmarshal is exported by gin/json package.</span>\n\tUnmarshal <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>Unmarshal\n\t<span class=\"token comment\">// MarshalIndent is exported by gin/json package.</span>\n\tMarshalIndent <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>MarshalIndent\n\t<span class=\"token comment\">// NewDecoder is exported by gin/json package.</span>\n\tNewDecoder <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>NewDecoder\n\t<span class=\"token comment\">// NewEncoder is exported by gin/json package.</span>\n\tNewEncoder <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>NewEncoder\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p><code>[jsoniter.go](https://github.com/gin-gonic/gin/blob/master/internal/json/jsoniter.go)</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Copyright 2017 Bo-Yi Wu. All rights reserved.</span>\n<span class=\"token comment\">// Use of this source code is governed by a MIT style</span>\n<span class=\"token comment\">// license that can be found in the LICENSE file.</span>\n\n<span class=\"token comment\">//go:build jsoniter</span>\n<span class=\"token comment\">// +build jsoniter</span>\n\n<span class=\"token keyword\">package</span> json\n\n<span class=\"token keyword\">import</span> jsoniter <span class=\"token string\">\"github.com/json-iterator/go\"</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tjson <span class=\"token operator\">=</span> jsoniter<span class=\"token punctuation\">.</span>ConfigCompatibleWithStandardLibrary\n\t<span class=\"token comment\">// Marshal is exported by gin/json package.</span>\n\tMarshal <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>Marshal\n\t<span class=\"token comment\">// Unmarshal is exported by gin/json package.</span>\n\tUnmarshal <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>Unmarshal\n\t<span class=\"token comment\">// MarshalIndent is exported by gin/json package.</span>\n\tMarshalIndent <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>MarshalIndent\n\t<span class=\"token comment\">// NewDecoder is exported by gin/json package.</span>\n\tNewDecoder <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>NewDecoder\n\t<span class=\"token comment\">// NewEncoder is exported by gin/json package.</span>\n\tNewEncoder <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>NewEncoder\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"切换-不同的-json实现\"><a href=\"#切换-不同的-json实现\" class=\"headerlink\" title=\"切换 不同的 json实现\"></a>切换 不同的 json实现</h2><p>采用  jsoniter包</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">go build -tags&#x3D;jsoniter .<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"条件编译\"><a href=\"#条件编译\" class=\"headerlink\" title=\"条件编译\"></a>条件编译</h2><p>通过在代码中增加注释<code>//+build xxx</code>时,编译时传递对应的tags值,就会编译不同的文件.</p>\n<ul>\n<li>构建约束以一行<code>+build</code>开始的注释.在+build之后列出了一些条件,在这些条件成立时,该文件应包含在编译的包中;</li>\n<li>约束可以出现在任何源文件中,不限于go文件;</li>\n<li><code>+build</code>必须出现在package语句之前,+build注释之后应要有一个空行.</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>-<a href=\"https://go.dev/doc/tutorial/compile-install\">Compile and install the application</a><br>-<a href=\"https://pkg.go.dev/cmd/go#hdr-Compile_packages_and_dependencies\">Compile_packages_and_dependencies</a><br>-<a href=\"https://zsy-cn.github.io/%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91.html\">Go条件编译</a></p>\n","tags":["go","go build"]},{"title":"golang ChecksumMismath Problem Resolve","url":"//post/golang-ChecksumMismath-Problem-Resolve.html","content":""},{"title":"golang-sync.Pool解析","url":"//post/golang-sync-Pool%E8%A7%A3%E6%9E%90.html","content":"<p>sync.Pool是sync包下的一个组件,可以作为临时取还对象的一个 <code>池子</code>.</p>\n<p>作用: 对于很多需要重复分配、回收内存的地方,<code>sync.Pool</code> 是一个很好的选择.频繁地分配、回收内存会给 GC 带来一定的负担,严重的时候会引起 CPU 的毛刺,<strong>而 <code>sync.Pool</code> 可以将暂时不用的对象缓存起来m待下次需要的时候直接使用,不用再次经过内存分配,复用对象的内存,减轻 GC 的压力,提升系统的性能.</strong></p>\n<p>使用场景:</p>\n<ol>\n<li>当多个 goroutine 都需要创建同⼀个对象的时候，如果 goroutine 数过多,导致对象的创建数⽬剧增,进⽽导致 GC 压⼒增大.形成”并发⼤－占⽤内存⼤－GC 缓慢－处理并发能⼒降低－并发更⼤”这样的恶性循环.</li>\n<li>关键思想就是对象的复用,避免重复创建.销毁.</li>\n</ol>\n<h2 id=\"Pool原理详解\"><a href=\"#Pool原理详解\" class=\"headerlink\" title=\"Pool原理详解\"></a>Pool原理详解</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Pool <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tnoCopy noCopy\n\n\tlocal     unsafe<span class=\"token punctuation\">.</span>Pointer <span class=\"token comment\">// local fixed-size per-P pool, actual type is [P]poolLocal</span>\n\tlocalSize <span class=\"token builtin\">uintptr</span>        <span class=\"token comment\">// size of the local array</span>\n\n\tvictim     unsafe<span class=\"token punctuation\">.</span>Pointer <span class=\"token comment\">// local from previous cycle</span>\n\tvictimSize <span class=\"token builtin\">uintptr</span>        <span class=\"token comment\">// size of victims array</span>\n\n\t<span class=\"token comment\">// New optionally specifies a function to generate</span>\n\t<span class=\"token comment\">// a value when Get would otherwise return nil.</span>\n\t<span class=\"token comment\">// It may not be changed concurrently with calls to Get.</span>\n\tNew <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> any\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>noCopy:</li>\n<li>local:   每个P的本地队列,实际类型为 <code>[P]poolLocal</code></li>\n<li>localSize: </li>\n<li>victicm:</li>\n<li>victicmSize: </li>\n<li>New:      自定义创建对象的回调函数,当pool中没有都可用对象时会调用</li>\n</ul>\n<h3 id=\"1-noCopy\"><a href=\"#1-noCopy\" class=\"headerlink\" title=\"1. noCopy\"></a>1. noCopy</h3><p>nocopy:<br>因为Pool不希望被复制,所以结构体里面有一个<code>noCopy</code>字段, 使用 <code>go vet</code> 工具可以检查用户是否复制了 Pool.</p>\n<p>用户只需要实现这样不需要消耗内存的,仅用于静态分析的结构, 保证对象在第一次使用后不会发生复制.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// noCopy may be embedded into structs which must not be copied</span>\n<span class=\"token comment\">// after the first use.</span>\n<span class=\"token comment\">// noCopy 可以被嵌入结构体来保证其第一次使用后不会在被复制.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// See https://golang.org/issues/8005#issuecomment-190753527</span>\n<span class=\"token comment\">// for details.</span>\n<span class=\"token keyword\">type</span> noCopy <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Lock is a no-op used by -copylocks checker from `go vet`.</span>\n<span class=\"token comment\">// Lock 是一个空操作用来给 `go ve` 的 -copylocks 静态分析</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>noCopy<span class=\"token punctuation\">)</span> <span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>noCopy<span class=\"token punctuation\">)</span> <span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"2-local\"><a href=\"#2-local\" class=\"headerlink\" title=\"2. local\"></a>2. local</h3><p>local字段指向  <code>[P]poolLocal</code> 数组(切片)的指针, localSize 则表示 这个数组的大小. 访问时 P 的 id 对应 <code>[P]poolLocal</code> 下标索引, 这样的设计减少了 多个goroutine 的竞争,提升了性能.</p>\n<h4 id=\"2-1-poolLocal\"><a href=\"#2-1-poolLocal\" class=\"headerlink\" title=\"2.1 poolLocal\"></a>2.1 poolLocal</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> poolLocal <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tpoolLocalInternal\n\n\t<span class=\"token comment\">// 将 poolLocal 补齐至两个缓存行的倍数，防止 false sharing,</span>\n\t<span class=\"token comment\">// 每个缓存行具有 64 bytes，即 512 bit$$</span>\n\t<span class=\"token comment\">// 目前我们的处理器一般拥有 32 * 1024 / 64 = 512 条缓存行</span>\n\t<span class=\"token comment\">// 伪共享，仅占位用,防止在 cache line 上分配多个 poolLocalInternal</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// Prevents false sharing on widespread platforms with$$</span>\n\t<span class=\"token comment\">// 128 mod (cache line size) = 0 .</span>\n\tpad <span class=\"token punctuation\">[</span><span class=\"token number\">128</span> <span class=\"token operator\">-</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>poolLocalInternal<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h4 id=\"2-2-poolLocalInternal\"><a href=\"#2-2-poolLocalInternal\" class=\"headerlink\" title=\"2.2 poolLocalInternal\"></a>2.2 poolLocalInternal</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// Local per-P Pool appendix.</span>\n<span class=\"token keyword\">type</span> poolLocalInternal <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tprivate any       <span class=\"token comment\">// Can be used only by the respective P.  仅能被各自的 P 获取</span>\n\tshared  poolChain <span class=\"token comment\">// Local P can pushHead/popHead; any P can popTail. 本地P可以从头部取, 其他 P 从尾部取</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h4 id=\"2-3-poolChain\"><a href=\"#2-3-poolChain\" class=\"headerlink\" title=\"2.3 poolChain\"></a>2.3 poolChain</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// poolChain is a dynamically-sized version of poolDequeue.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This is implemented as a doubly-linked list queue of poolDequeues</span>\n<span class=\"token comment\">// where each dequeue is double the size of the previous one. Once a</span>\n<span class=\"token comment\">// dequeue fills up, this allocates a new one and only ever pushes to</span>\n<span class=\"token comment\">// the latest dequeue. Pops happen from the other end of the list and</span>\n<span class=\"token comment\">// once a dequeue is exhausted, it gets removed from the list.</span>\n<span class=\"token keyword\">type</span> poolChain <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// head is the poolDequeue to push to. This is only accessed</span>\n\t<span class=\"token comment\">// by the producer, so doesn't need to be synchronized.</span>\n\thead <span class=\"token operator\">*</span>poolChainElt\n\n\t<span class=\"token comment\">// tail is the poolDequeue to popTail from. This is accessed</span>\n\t<span class=\"token comment\">// by consumers, so reads and writes must be atomic.</span>\n\ttail <span class=\"token operator\">*</span>poolChainElt\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token keyword\">type</span> poolChainElt <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tpoolDequeue\n\n\t<span class=\"token comment\">// next and prev link to the adjacent poolChainElts in this</span>\n\t<span class=\"token comment\">// poolChain.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// next is written atomically by the producer and read</span>\n\t<span class=\"token comment\">// atomically by the consumer. It only transitions from nil to</span>\n\t<span class=\"token comment\">// non-nil.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// prev is written atomically by the consumer and read</span>\n\t<span class=\"token comment\">// atomically by the producer. It only transitions from</span>\n\t<span class=\"token comment\">// non-nil to nil.</span>\n\tnext<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">*</span>poolChainElt\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// poolDequeue is a lock-free fixed-size single-producer,</span>\n<span class=\"token comment\">// multi-consumer queue. The single producer can both push and pop</span>\n<span class=\"token comment\">// from the head, and consumers can pop from the tail.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// It has the added feature that it nils out unused slots to avoid</span>\n<span class=\"token comment\">// unnecessary retention of objects. This is important for sync.Pool,</span>\n<span class=\"token comment\">// but not typically a property considered in the literature.</span>\n<span class=\"token keyword\">type</span> poolDequeue <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// headTail 包含一个 32 位的 head 和一个 32 位的 tail 指针. 这两个值都和 len(vals)-1 取模过.</span>\n\t<span class=\"token comment\">// tail 是队列中最老的数据,head 指向下一个将要填充的 slot</span>\n    <span class=\"token comment\">// slots 的有效范围是 [tail, head),由 consumers 持有.</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// headTail packs together a 32-bit head index and a 32-bit</span>\n\t<span class=\"token comment\">// tail index. Both are indexes into vals modulo len(vals)-1.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// tail = index of oldest data in queue</span>\n\t<span class=\"token comment\">// head = index of next slot to fill</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Slots in the range [tail, head) are owned by consumers.</span>\n\t<span class=\"token comment\">// A consumer continues to own a slot outside this range until</span>\n\t<span class=\"token comment\">// it nils the slot, at which point ownership passes to the</span>\n\t<span class=\"token comment\">// producer.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// The head index is stored in the most-significant bits so</span>\n\t<span class=\"token comment\">// that we can atomically add to it and the overflow is</span>\n\t<span class=\"token comment\">// harmless.</span>\n\theadTail <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// vals 是一个存储 interface&#123;&#125; 的环形队列,它的 size 必须是 2 的幂</span>\n\t<span class=\"token comment\">// 如果 slot 为空,则 vals[i].typ 为空;否则，非空.</span>\n\t<span class=\"token comment\">// 一个 slot 在这时宣告无效: tail 不指向它了，vals[i].typ 为 nil</span>\n\t<span class=\"token comment\">// 由 consumer 设置成 nil，由 producer 读</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// vals is a ring buffer of interface&#123;&#125; values stored in this</span>\n\t<span class=\"token comment\">// dequeue. The size of this must be a power of 2.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// vals[i].typ is nil if the slot is empty and non-nil</span>\n\t<span class=\"token comment\">// otherwise. A slot is still in use until *both* the tail</span>\n\t<span class=\"token comment\">// index has moved beyond it and typ has been set to nil. This</span>\n\t<span class=\"token comment\">// is set to nil atomically by the consumer and read</span>\n\t<span class=\"token comment\">// atomically by the producer.</span>\n\tvals <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>eface\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<blockquote>\n<p>poolDequeue 被设计成单生产者，多消费者固定长度&amp;&amp;无锁的 双端队列.<br>   producer 可以从head插入和删除.  consumer可以从尾部pop 数据.</p>\n</blockquote>\n<blockquote>\n<p>headTail 指向队头和队尾, 通过位运算, 将 head  &amp; tail 存入  headTail中.</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220815203335.png\" alt=\"Pool结构体\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220815203400.png\"></p>\n<blockquote>\n<p>我们看到 Pool 并没有直接使用 <code>poolDequeue</code>,原因是它的大小是固定的,而 Pool 的大小是没有限制的.<br>因此，在 <code>poolDequeue</code> 之上包装了一下,变成了一个 <code>poolChainElt</code> 的双向链表,可以动态增长.</p>\n</blockquote>\n<h3 id=\"3-victim\"><a href=\"#3-victim\" class=\"headerlink\" title=\"3. victim\"></a>3. victim</h3><p>一轮 GC 完成后,victim 和 victimSize 会分别接管  local  和 localSize,victim 的机制用于减少GC后冷启动导致的性能抖动. 让分配对象更加平滑.</p>\n<blockquote>\n<p>victim Cache 本来是计算机架构里面的一个概念,是让CPU硬件处理缓存的一种技术, <code>sync.Pool</code>引入的意图在于 降低GC压力的同时增加缓存命中率.</p>\n</blockquote>\n<h3 id=\"4-New\"><a href=\"#4-New\" class=\"headerlink\" title=\"4. New\"></a>4. New</h3><p>当Pool中没有对象可供提供时,会调用 New 生成一个新对象.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"2-源码详解\"><a href=\"#2-源码详解\" class=\"headerlink\" title=\"2. 源码详解\"></a>2. 源码详解</h2><h3 id=\"2-1-Get\"><a href=\"#2-1-Get\" class=\"headerlink\" title=\"2.1. Get\"></a>2.1. Get</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Get selects an arbitrary item from the Pool, removes it from the</span>\n<span class=\"token comment\">// Pool, and returns it to the caller.</span>\n<span class=\"token comment\">// Get may choose to ignore the pool and treat it as empty.</span>\n<span class=\"token comment\">// Callers should not assume any relation between values passed to Put and</span>\n<span class=\"token comment\">// the values returned by Get.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If Get would otherwise return nil and p.New is non-nil, Get returns</span>\n<span class=\"token comment\">// the result of calling p.New.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> any <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> race<span class=\"token punctuation\">.</span>Enabled <span class=\"token punctuation\">&#123;</span>\n\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">Disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 将当前的 goroutine 和 P绑定,禁止被强占,返回当前P对应的 localPool &amp; pid</span>\n\tl<span class=\"token punctuation\">,</span> pid <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">pin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tx <span class=\"token operator\">:=</span> l<span class=\"token punctuation\">.</span>private\n\tl<span class=\"token punctuation\">.</span>private <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Try to pop the head of the local shard. We prefer</span>\n\t\t<span class=\"token comment\">// the head over the tail for temporal locality of</span>\n\t\t<span class=\"token comment\">// reuse.</span>\n\t\tx<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">popHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 尝试从 qita P 的 shared 双端队列尾部头一个对象出来.</span>\n\t\t\tx <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getSlow</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// pool 操作完成之后, 接触非抢占</span>\n\t<span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> race<span class=\"token punctuation\">.</span>Enabled <span class=\"token punctuation\">&#123;</span>\n\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">Enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span><span class=\"token function\">poolRaceAddr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 如果最后还是没有获取到缓存对象,那就直接调用预先设置好的回调函数 `New` 创建一个对象.</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>New <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tx <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> x\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220815204610.png\"></p>\n<h4 id=\"2-1-1-pin\"><a href=\"#2-1-1-pin\" class=\"headerlink\" title=\"2.1.1 pin\"></a>2.1.1 pin</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// pin pins the current goroutine to P, disables preemption and</span>\n<span class=\"token comment\">// returns poolLocal pool for the P and the P's id.</span>\n<span class=\"token comment\">// Caller must call runtime_procUnpin() when done with the pool.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">pin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>poolLocal<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tpid <span class=\"token operator\">:=</span> <span class=\"token function\">runtime_procPin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// In pinSlow we store to local and then to localSize, here we load in opposite order.</span>\n\t<span class=\"token comment\">// Since we've disabled preemption, GC cannot happen in between.</span>\n\t<span class=\"token comment\">// Thus here we must observe local at least as large localSize.</span>\n\t<span class=\"token comment\">// We can observe a newer/larger local, it is fine (we must observe its zero-initialized-ness).</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token function\">runtime_LoadAcquintptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>localSize<span class=\"token punctuation\">)</span> <span class=\"token comment\">// load-acquire</span>\n\tl <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>local                              <span class=\"token comment\">// load-consume</span>\n\t<span class=\"token comment\">// 因为可能存在动态的 P（运行时调整 P 的个数）</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> s <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">indexLocal</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pid\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">pinSlow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>调用方必须在完成取值后,调用 <code>runtime.proc_Unpin()</code> 来取消抢占.</p>\n<blockquote>\n<p>pin 的作用就是将当前 groutine 和 P 绑定在一起，禁止抢占. 并且返回对应的 poolLocal 以及 P 的 id。</p>\n</blockquote>\n<p>如果 G 被抢占，则 G 的状态从 running 变成 runnable,会被放回 P 的 localq 或 globaq，等待下一次调度.<br>下次再执行时，就不一定是和现在的 P 相结合了. 因为之后会用到 pid,如果被抢占了,有可能接下来使用的 pid 与所绑定的 P 并非同一个.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">pinSlow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>poolLocal<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Retry under the mutex.</span>\n\t<span class=\"token comment\">// Can not lock the mutex while pinned.</span>\n\t<span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tallPoolsMu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> allPoolsMu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tpid <span class=\"token operator\">:=</span> <span class=\"token function\">runtime_procPin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// poolCleanup won't be called while we are pinned.</span>\n\ts <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>localSize\n\tl <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>local\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> s <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">indexLocal</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pid\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>local <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tallPools <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>allPools<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// If GOMAXPROCS changes between GCs, we re-allocate the array and lose the old one.</span>\n\tsize <span class=\"token operator\">:=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tlocal <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>poolLocal<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">StorePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>local<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// store-release</span>\n\t<span class=\"token function\">runtime_StoreReluintptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>localSize<span class=\"token punctuation\">,</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// store-release</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>local<span class=\"token punctuation\">[</span>pid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pid\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因为有一把大锁 <code>allPoolsMu</code>, 所以函数名带有 slow. 锁粒度越大,竞争越多,就越慢.  不过想要上锁的话,先要解除绑定.  原因是锁越大,被阻塞的概率越大,如果还占着 P, 那就浪费资源.</p>\n<h4 id=\"2-1-2-popHead\"><a href=\"#2-1-2-popHead\" class=\"headerlink\" title=\"2.1.2 popHead\"></a>2.1.2 popHead</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>poolChain<span class=\"token punctuation\">)</span> <span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\td <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>head\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Initialize the chain.</span>\n\t\t<span class=\"token keyword\">const</span> initSize <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token comment\">// Must be a power of 2</span>\n\t\td <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>poolChainElt<span class=\"token punctuation\">)</span>\n\t\td<span class=\"token punctuation\">.</span>vals <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>eface<span class=\"token punctuation\">,</span> initSize<span class=\"token punctuation\">)</span>\n\t\tc<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> d\n\t\t<span class=\"token function\">storePoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// The current dequeue is full. Allocate a new one of twice</span>\n\t<span class=\"token comment\">// the size.</span>\n\tnewSize <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n\t<span class=\"token keyword\">if</span> newSize <span class=\"token operator\">>=</span> dequeueLimit <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Can't make it any bigger.</span>\n\t\tnewSize <span class=\"token operator\">=</span> dequeueLimit\n\t<span class=\"token punctuation\">&#125;</span>\n\n\td2 <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>poolChainElt<span class=\"token punctuation\">&#123;</span>prev<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">&#125;</span>\n\td2<span class=\"token punctuation\">.</span>vals <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>eface<span class=\"token punctuation\">,</span> newSize<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> d2\n\t<span class=\"token function\">storePoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span>\n\td2<span class=\"token punctuation\">.</span><span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>poolChain<span class=\"token punctuation\">)</span> <span class=\"token function\">popHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\td <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>head\n\t<span class=\"token keyword\">for</span> d <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 调用 dequeue 的 popHead</span>\n\t\t<span class=\"token keyword\">if</span> val<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">popHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> ok\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// There may still be unconsumed elements in the</span>\n\t\t<span class=\"token comment\">// previous dequeue, so try backing up.</span>\n\t\td <span class=\"token operator\">=</span> <span class=\"token function\">loadPoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>popHead 只会被  producer调用,首先拿到头结点: ,如果头结点不为空,尝试调用 头结点(<code>poolDequeue</code>)的 <code>popHead()</code>.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token comment\">// 自旋锁的模式,避免加锁.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// popHead removes and returns the element at the head of the queue.</span>\n<span class=\"token comment\">// It returns false if the queue is empty. It must only be called by a</span>\n<span class=\"token comment\">// single producer.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>poolDequeue<span class=\"token punctuation\">)</span> <span class=\"token function\">popHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> slot <span class=\"token operator\">*</span>eface\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\tptrs <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">)</span>\n\t\thead<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>ptrs<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> tail <span class=\"token operator\">==</span> head <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Queue is empty.</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token comment\">// head 是队头的前一个位置,所以要后移一位.</span>\n\t\t<span class=\"token comment\">// 在读出 slot 的 value 之前就将 head值 -1,取消对这个 slot 的控制.</span>\n\t\t<span class=\"token comment\">// Confirm tail and decrement head. We do this before</span>\n\t\t<span class=\"token comment\">// reading the value to take back ownership of this</span>\n\t\t<span class=\"token comment\">// slot.</span>\n\t\thead<span class=\"token operator\">--</span>\n\t\tptrs2 <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">,</span> ptrs<span class=\"token punctuation\">,</span> ptrs2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// We successfully took back slot.</span>\n\t\t\tslot <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">[</span>head<span class=\"token operator\">&amp;</span><span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tval <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> val <span class=\"token operator\">==</span> <span class=\"token function\">dequeueNil</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tval <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// Zero the slot. Unlike popTail, this isn't racing with</span>\n\t<span class=\"token comment\">// pushHead, so we don't need to be careful here.</span>\n\t<span class=\"token operator\">*</span>slot <span class=\"token operator\">=</span> eface<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>通过 自旋锁的模式(for 循环 + CAS)  避免加锁.</p>\n<h4 id=\"2-1-3-getSlow\"><a href=\"#2-1-3-getSlow\" class=\"headerlink\" title=\"2.1.3 getSlow\"></a>2.1.3 getSlow</h4><p>如果在 shared里面没有获得缓存对象,则继续调用 <code>Pool.getSlow</code>, 尝试从其他 P 的 <code>poolLocal</code> 中偷取.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">getSlow</span><span class=\"token punctuation\">(</span>pid <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> any <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// See the comment in pin regarding ordering of the loads.</span>\n\tsize <span class=\"token operator\">:=</span> <span class=\"token function\">runtime_LoadAcquintptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>localSize<span class=\"token punctuation\">)</span> <span class=\"token comment\">// load-acquire</span>\n\tlocals <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>local                            <span class=\"token comment\">// load-consume</span>\n\t<span class=\"token comment\">// 尝试从其他P中偷取 对象.</span>\n\t<span class=\"token comment\">// Try to steal one element from other procs.</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\tl <span class=\"token operator\">:=</span> <span class=\"token function\">indexLocal</span><span class=\"token punctuation\">(</span>locals<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pid<span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> x<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> l<span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">popTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> x\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 尝试从victim cache中取对象。这发生在尝试从其他 P 的 poolLocal 偷去失败后，</span>\n\t<span class=\"token comment\">// 因为这样可以使 victim 中的对象更容易被回收.</span>\n\t<span class=\"token comment\">// </span>\n\t<span class=\"token comment\">// Try the victim cache. We do this after attempting to steal</span>\n\t<span class=\"token comment\">// from all primary caches because we want objects in the</span>\n\t<span class=\"token comment\">// victim cache to age out if at all possible.</span>\n\tsize <span class=\"token operator\">=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadUintptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>victimSize<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> size <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tlocals <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>victim\n\tl <span class=\"token operator\">:=</span> <span class=\"token function\">indexLocal</span><span class=\"token punctuation\">(</span>locals<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">:=</span> l<span class=\"token punctuation\">.</span>private<span class=\"token punctuation\">;</span> x <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tl<span class=\"token punctuation\">.</span>private <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token keyword\">return</span> x\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\tl <span class=\"token operator\">:=</span> <span class=\"token function\">indexLocal</span><span class=\"token punctuation\">(</span>locals<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pid<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> x<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> l<span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">popTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> x\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 清空 victimCache,下次就不用从这里面找了.</span>\n\t<span class=\"token comment\">// Mark the victim cache as empty for future gets don't bother</span>\n\t<span class=\"token comment\">// with it.</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">StoreUintptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>victimSize<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>从索引为 pid + 1 的 poolLocal 开始, 尝试调用shared.popTail 获取缓存对象. 如果没有拿到,从victim中查找. 和 从 poolLocal 的逻辑类似.</li>\n<li>最后 如果还没有找到,就把 victimSize 值 0. 防止后来的人再从 victim中找.</li>\n<li>在 Get 函数的最后，经过这一番操作还是没找到缓存的对象，就调用 New 函数创建一个新的对象.</li>\n</ol>\n<h4 id=\"2-1-4-popTail\"><a href=\"#2-1-4-popTail\" class=\"headerlink\" title=\"2.1.4 popTail\"></a>2.1.4 popTail</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>poolChain<span class=\"token punctuation\">)</span> <span class=\"token function\">popTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\td <span class=\"token operator\">:=</span> <span class=\"token function\">loadPoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// It's important that we load the next pointer</span>\n\t\t<span class=\"token comment\">// *before* popping the tail. In general, d may be</span>\n\t\t<span class=\"token comment\">// transiently empty, but if next is non-nil before</span>\n\t\t<span class=\"token comment\">// the pop and the pop fails, then d is permanently</span>\n\t\t<span class=\"token comment\">// empty, which is the only condition under which it's</span>\n\t\t<span class=\"token comment\">// safe to drop d from the chain.</span>\n\t\td2 <span class=\"token operator\">:=</span> <span class=\"token function\">loadPoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">if</span> val<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">popTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> ok\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token keyword\">if</span> d2 <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// This is the only dequeue. It's empty right</span>\n\t\t\t<span class=\"token comment\">// now, but could be pushed to in the future.</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token comment\">// The tail of the chain has been drained, so move on</span>\n\t\t<span class=\"token comment\">// to the next dequeue. Try to drop it from the chain</span>\n\t\t<span class=\"token comment\">// so the next pop doesn't have to look at the empty</span>\n\t\t<span class=\"token comment\">// dequeue again.</span>\n\t\t<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>unsafe<span class=\"token punctuation\">.</span>Pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// We won the race. Clear the prev pointer so</span>\n\t\t\t<span class=\"token comment\">// the garbage collector can collect the empty</span>\n\t\t\t<span class=\"token comment\">// dequeue and so popHead doesn't back up</span>\n\t\t\t<span class=\"token comment\">// further than necessary.</span>\n\t\t\t<span class=\"token comment\">// 甩掉尾结点.</span>\n\t\t\t<span class=\"token function\">storePoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d2<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\td <span class=\"token operator\">=</span> d2\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// popTail removes and returns the element at the tail of the queue.</span>\n<span class=\"token comment\">// It returns false if the queue is empty. It may be called by any</span>\n<span class=\"token comment\">// number of consumers.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>poolDequeue<span class=\"token punctuation\">)</span> <span class=\"token function\">popTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> slot <span class=\"token operator\">*</span>eface\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\tptrs <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">)</span>\n\t\thead<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>ptrs<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> tail <span class=\"token operator\">==</span> head <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Queue is empty.</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token comment\">// Confirm head and tail (for our speculative check</span>\n\t\t<span class=\"token comment\">// above) and increment tail. If this succeeds, then</span>\n\t\t<span class=\"token comment\">// we own the slot at tail.</span>\n\t\tptrs2 <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> tail<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">,</span> ptrs<span class=\"token punctuation\">,</span> ptrs2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Success.</span>\n\t\t\tslot <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">[</span>tail<span class=\"token operator\">&amp;</span><span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// We now own slot.</span>\n\tval <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> val <span class=\"token operator\">==</span> <span class=\"token function\">dequeueNil</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tval <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// Tell pushHead that we're done with this slot. Zeroing the</span>\n\t<span class=\"token comment\">// slot is also important so we don't leave behind references</span>\n\t<span class=\"token comment\">// that could keep this object live longer than necessary.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// We write to val first and then publish that we're done with</span>\n\t<span class=\"token comment\">// this slot by atomically writing to typ.</span>\n\tslot<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">StorePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>slot<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// At this point pushHead owns the slot.</span>\n\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"2-2-Put\"><a href=\"#2-2-Put\" class=\"headerlink\" title=\"2.2. Put\"></a>2.2. Put</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Put adds x to the pool.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>x any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> race<span class=\"token punctuation\">.</span>Enabled <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">fastrandn</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Randomly drop x on floor.</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">ReleaseMerge</span><span class=\"token punctuation\">(</span><span class=\"token function\">poolRaceAddr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">Disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tl<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">pin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> l<span class=\"token punctuation\">.</span>private <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tl<span class=\"token punctuation\">.</span>private <span class=\"token operator\">=</span> x\n\t\tx <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tl<span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> race<span class=\"token punctuation\">.</span>Enabled <span class=\"token punctuation\">&#123;</span>\n\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">Enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<ol>\n<li>先绑定 g 和 P.  然后尝试将 x 赋值给 private字段.</li>\n<li>如果失败. 就调用 pushHead() 尝试将其放入 shared字段 维护的双端队列中.</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220815204632.png\"></p>\n<h4 id=\"2-2-1-pushHead\"><a href=\"#2-2-1-pushHead\" class=\"headerlink\" title=\"2.2.1 pushHead\"></a>2.2.1 pushHead</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>poolChain<span class=\"token punctuation\">)</span> <span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\td <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>head\n\t<span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Initialize the chain.</span>\n\t\t<span class=\"token keyword\">const</span> initSize <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token comment\">// Must be a power of 2</span>\n\t\td <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>poolChainElt<span class=\"token punctuation\">)</span>\n\t\td<span class=\"token punctuation\">.</span>vals <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>eface<span class=\"token punctuation\">,</span> initSize<span class=\"token punctuation\">)</span>\n\t\tc<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> d\n\t\t<span class=\"token function\">storePoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 当前 poolDequeue 满了. 分配一个 当前 poolDequeue 2倍的一个 poolDequeue</span>\n\t<span class=\"token comment\">// The current dequeue is full. Allocate a new one of twice</span>\n\t<span class=\"token comment\">// the size.</span>\n\tnewSize <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n\t<span class=\"token keyword\">if</span> newSize <span class=\"token operator\">>=</span> dequeueLimit <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Can't make it any bigger.</span>\n\t\tnewSize <span class=\"token operator\">=</span> dequeueLimit\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 收尾相连. 构成链表</span>\n\td2 <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>poolChainElt<span class=\"token punctuation\">&#123;</span>prev<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">&#125;</span>\n\td2<span class=\"token punctuation\">.</span>vals <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>eface<span class=\"token punctuation\">,</span> newSize<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> d2\n\t<span class=\"token function\">storePoolChainElt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span>\n\td2<span class=\"token punctuation\">.</span><span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// // 将 val 添加到双端队列头部。如果队列已满，则返回 false。此函数只能被一个生产者调用</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// pushHead adds val at the head of the queue. It returns false if the</span>\n<span class=\"token comment\">// queue is full. It must only be called by a single producer.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>poolDequeue<span class=\"token punctuation\">)</span> <span class=\"token function\">pushHead</span><span class=\"token punctuation\">(</span>val any<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\tptrs <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">)</span>\n\thead<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>ptrs<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//队列满了</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail<span class=\"token operator\">+</span><span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>dequeueBits<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> head <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Queue is full.</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tslot <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">[</span>head<span class=\"token operator\">&amp;</span><span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n\t<span class=\"token comment\">// Check if the head slot has been released by popTail.</span>\n\ttyp <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>slot<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Another goroutine is still cleaning up the tail, so</span>\n\t\t<span class=\"token comment\">// the queue is actually still full.</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// The head slot is free, so we own it.</span>\n\t<span class=\"token keyword\">if</span> val <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tval <span class=\"token operator\">=</span> <span class=\"token function\">dequeueNil</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> val\n\n\t<span class=\"token comment\">// Increment head. This passes ownership of slot to popTail</span>\n\t<span class=\"token comment\">// and acts as a store barrier for writing the slot.</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>headTail<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>dequeueBits<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-pack-amp-unpack\"><a href=\"#3-pack-amp-unpack\" class=\"headerlink\" title=\"3. pack &amp; unpack\"></a>3. pack &amp; unpack</h3><h2 id=\"3-GC\"><a href=\"#3-GC\" class=\"headerlink\" title=\"3. GC\"></a>3. GC</h2><hr>\n<p>[参考]<br><a href=\"https://www.cnblogs.com/qcrao-2018/p/12736031.html\">深度解密 Go 语言之 sync.Pool </a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4ODg0NDkzOA==&mid=2247487149&idx=1&sn=f38f2d72fd7112e19e97d5a2cd304430&source=41#wechat_redirect\">请问sync.Pool有什么缺点?</a><br><a href=\"https://xargin.com/lock-contention-in-go/\">几个 Go 系统可能遇到的锁问题</a></p>\n","tags":["golang"]},{"title":"golang如何避免循环依赖","url":"//post/golang%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html","content":"<p>golang 包引用之间不允许循环依赖.<br>循环依赖的本质上是一个错误的设计, 在 golang中 循环依赖是 会产生编译时错误.</p>\n<p><img src=\"/post/golang%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/dependency-cycle.png\" alt=\"dependency-cycle\"></p>\n<p>golang中为什么不允许循环依赖呢?</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. 没有支持循环导入,目的是迫使 Go 程序员更多地考虑程序的依赖关系.\n  - 保持依赖关系图的简洁。\n  - 快速的程序构建。\n2. 如果支持循环导入，很容易会造成懒惰、不良的依赖性管理和缓慢的构建。这是设计者不希望看见的。\n  - 混乱的依赖关系。\n  - 缓慢的程序构建<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>golang中的循环依赖对编译的性能 和  程序的依赖关系的清晰非常不利, 所以在程序设计上,要保持 干净的 <code>DAG</code>.</p>\n<h2 id=\"常见的循环依赖-和-优化代码技巧\"><a href=\"#常见的循环依赖-和-优化代码技巧\" class=\"headerlink\" title=\"常见的循环依赖  和 优化代码技巧\"></a>常见的循环依赖  和 优化代码技巧</h2><h3 id=\"1-抽象顶层包\"><a href=\"#1-抽象顶层包\" class=\"headerlink\" title=\"1. 抽象顶层包\"></a>1. 抽象顶层包</h3><p>ddd 的项目结构 一般是  依赖倒置,  在 service层定义接口,   infrastrue 层实现,目的是为了解耦， 实现可替换.</p>\n<p>你可能将代码写成这样: </p>\n<p>repo包代码如下:</p>\n<p>repo包依赖 service包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> repo\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/service\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> channelRepo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewChannelRepo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>channelRepo <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>channelRepo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c channelRepo<span class=\"token punctuation\">)</span> <span class=\"token function\">GetByID</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>service<span class=\"token punctuation\">.</span>Channel<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>service 包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> service\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/repo\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Channel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tID <span class=\"token builtin\">int64</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> ChannelRepo <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">GetByID</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Channel<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> ChannelService <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tchannelRepo ChannelRepo\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewChannelService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ChannelService <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>ChannelService<span class=\"token punctuation\">&#123;</span>\n\t\tchannelRepo<span class=\"token punctuation\">:</span> repo<span class=\"token punctuation\">.</span><span class=\"token function\">NewChannelRepo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cs <span class=\"token operator\">*</span>ChannelService<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/golang%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/cycle1.png\"></p>\n<p>解决方式之一是我们可以引入一个顶层包 handler, 依赖  service &amp; repo:</p>\n<p>形成如下依赖关系:</p>\n<p><img src=\"/post/golang%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/cycle-resolve1.png\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> repo\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/service\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> channelRepo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewChannelRepo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>channelRepo <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>channelRepo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c channelRepo<span class=\"token punctuation\">)</span> <span class=\"token function\">GetByID</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>service<span class=\"token punctuation\">.</span>Channel<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>service包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> service\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Channel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tID <span class=\"token builtin\">int64</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> ChannelRepo <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">GetByID</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Channel<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> ChannelService <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tchannelRepo ChannelRepo\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewChannelService</span><span class=\"token punctuation\">(</span>channelRepo ChannelRepo<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ChannelService <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>ChannelService<span class=\"token punctuation\">&#123;</span>\n\t\tchannelRepo<span class=\"token punctuation\">:</span> channelRepo<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cs <span class=\"token operator\">*</span>ChannelService<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>handler包代码如下:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> handler\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/repo\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/service\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">useCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tchannelRepo <span class=\"token operator\">:=</span> repo<span class=\"token punctuation\">.</span><span class=\"token function\">NewChannelRepo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tchannelService <span class=\"token operator\">:=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">NewChannelService</span><span class=\"token punctuation\">(</span>channelRepo<span class=\"token punctuation\">)</span>\n\tchannelService<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-和上面的场景类似-也是抽象一个顶层解决\"><a href=\"#2-和上面的场景类似-也是抽象一个顶层解决\" class=\"headerlink\" title=\"2. 和上面的场景类似, 也是抽象一个顶层解决\"></a>2. 和上面的场景类似, 也是抽象一个顶层解决</h3><p>比如我们没用争取使用策略模式的分包.</p>\n<p>有下面这种场景,做 一些数据过滤, 在  filter 包里面定义了filter 接口, 将实现定义在子包里面.</p>\n<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">type Filter interface &#123;\n\tPreAction(ctx context.Context, data map[string]interface&#123;&#125;) error\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-子包-word\"><a href=\"#1-子包-word\" class=\"headerlink\" title=\"1. 子包  word\"></a>1. 子包  word</h4><p>word包引用了  filter包的  对象 <code>DataContext</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> word\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> wordFilter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>w wordFilter<span class=\"token punctuation\">)</span> <span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>cycle<span class=\"token punctuation\">.</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"implement me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewWordFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>wordFilter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>wordFilter<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-子包-policy\"><a href=\"#2-子包-policy\" class=\"headerlink\" title=\"2. 子包 policy\"></a>2. 子包 policy</h4><p>word包引用了  filter包的  对象 <code>DataContext</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> policy\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> policyFilter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewPolicyFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>policyFilter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>policyFilter<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p policyFilter<span class=\"token punctuation\">)</span> <span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>cycle<span class=\"token punctuation\">.</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"implement me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-在filter包中使用\"><a href=\"#3-在filter包中使用\" class=\"headerlink\" title=\"3. 在filter包中使用\"></a>3. <strong>在filter包中使用</strong></h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> filter\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/policy\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/word\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> filterRegistry <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Filter\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilterRegistry <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Filter<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token string\">\"word\"</span><span class=\"token punctuation\">:</span>   word<span class=\"token punctuation\">.</span><span class=\"token function\">NewWordFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"policy\"</span><span class=\"token punctuation\">:</span> policy<span class=\"token punctuation\">.</span><span class=\"token function\">NewPolicyFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> DataContext <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Filter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetFilter</span><span class=\"token punctuation\">(</span>filterType <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Filter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> filterRegistry<span class=\"token punctuation\">[</span>filterType<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">|filter\n├── filter.go\n├── policy\n│   └── filter.go\n└── word\n    └── filter.go\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>此时产生了循环依赖.</p>\n<h4 id=\"解决的方式-其实应该属于编程技巧\"><a href=\"#解决的方式-其实应该属于编程技巧\" class=\"headerlink\" title=\"解决的方式:  其实应该属于编程技巧:\"></a>解决的方式:  其实应该属于编程技巧:</h4><blockquote>\n<p>不要再 filter包中有使用 filter 的逻辑, <strong>filer包仅定义接口</strong>, 在 filter包之外进行调用</p>\n</blockquote>\n<p>修改后的方案: </p>\n<ul>\n<li><p>filter包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> filter\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilterRegistry <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Filter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> filterRegistry <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Filter\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>filterKey <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> filter Filter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilterRegistry<span class=\"token punctuation\">[</span>filterKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> filter\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> DataContext <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Filter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetFilter</span><span class=\"token punctuation\">(</span>filterType <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Filter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> filterRegistry<span class=\"token punctuation\">[</span>filterType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>word子包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> word\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/filter\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilter<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NewWordFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> wordFilter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>w wordFilter<span class=\"token punctuation\">)</span> <span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>filter<span class=\"token punctuation\">.</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//TODO implement me</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"implement me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewWordFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>wordFilter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>wordFilter<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>policy子包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> policy\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/filter\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilter<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"policy\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NewPolicyFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> policyFilter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewPolicyFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>policyFilter <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>policyFilter<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p policyFilter<span class=\"token punctuation\">)</span> <span class=\"token function\">PreAction</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> data <span class=\"token operator\">*</span>filter<span class=\"token punctuation\">.</span>DataContext<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//TODO implement me</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"implement me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>添加上层调用:</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> cycle\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"github.com/xxx/cycle/filter\"</span>\n\t<span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/xxx/cycle/filter/policy\"</span>\n\t<span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/xxx/cycle/filter/word\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfilter<span class=\"token punctuation\">.</span><span class=\"token function\">GetFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word\"</span><span class=\"token punctuation\">)</span>\n\tfilter<span class=\"token punctuation\">.</span><span class=\"token function\">GetFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"policy\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h3 id=\"3-使用事件总线解耦\"><a href=\"#3-使用事件总线解耦\" class=\"headerlink\" title=\"3. 使用事件总线解耦\"></a>3. 使用事件总线解耦</h3><p>想分享的是上面两种方案， 之后又在网上看到了某些方案:<br> 比如事件总线，简单说就是: 使用时如果不关心返回结果, 就可以通过消息的方式解耦.</p>\n<ol>\n<li><p>eventBus 包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> eventBus\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"github.com/asaskevich/EventBus\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">var</span> globalEventBus EventBus<span class=\"token punctuation\">.</span>Bus\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tglobalEventBus <span class=\"token operator\">=</span> EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fn <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> globalEventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">SubscribeAsync</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fn <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> transactional <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> globalEventBus<span class=\"token punctuation\">.</span><span class=\"token function\">SubscribeAsync</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> transactional<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tglobalEventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>packageA</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> package_a\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"cycle/eventBus\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\teventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PrintA\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>PackageA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>PrintA<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">type</span> PackageA <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a PackageA<span class=\"token punctuation\">)</span> <span class=\"token function\">PrintA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a PackageA<span class=\"token punctuation\">)</span> <span class=\"token function\">PrintAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ta<span class=\"token punctuation\">.</span><span class=\"token function\">PrintA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\teventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PrintB\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>packageB</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> package_b\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"cycle/eventBus\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\teventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PrintB\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>PackageB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>PrintB<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">type</span> PackageB <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b PackageB<span class=\"token punctuation\">)</span> <span class=\"token function\">PrintB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm b!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b PackageB<span class=\"token punctuation\">)</span> <span class=\"token function\">PrintAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">PrintB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\teventBus<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PrintA\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>编写代码要符合规范，包的组织结构 和 依赖 要清晰, 符合规范.<br>golang的包组织规范可以参考:  </p>\n<ul>\n<li><a href=\"https://github.com/golang-standards\">golang-standards</a></li>\n<li><a href=\"https://github.com/go-kratos/kratos-layout\">kratos-layout</a></li>\n<li></li>\n</ul>\n<hr>\n<p>[参考]<br><a href=\"https://golang3.eddycjy.com/posts/cyclic-import/\">循环引用</a><br><a href=\"https://libuba.com/2020/11/02/golang%E5%8C%85%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/\">golang包循环引用的几种解决方案</a></p>\n","categories":["golang"],"tags":["golang"]},{"title":"grpc-DNSResolver","url":"//post/grpc-DNSResolver.html","content":"<blockquote>\n</blockquote>\n<span id=\"more\"></span>\n\n\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p><code>resolver/resolver.go</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> resolver\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"net\"</span>\n\t<span class=\"token string\">\"net/url\"</span>\n\n\t<span class=\"token string\">\"google.golang.org/grpc/attributes\"</span>\n\t<span class=\"token string\">\"google.golang.org/grpc/credentials\"</span>\n\t<span class=\"token string\">\"google.golang.org/grpc/internal/pretty\"</span>\n\t<span class=\"token string\">\"google.golang.org/grpc/serviceconfig\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">// m is a map from scheme to resolver builder.</span>\n\tm <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Builder<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// defaultScheme is the default scheme to use.</span>\n\tdefaultScheme <span class=\"token operator\">=</span> <span class=\"token string\">\"passthrough\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// TODO(bar) install dns resolver in init()&#123;&#125;.</span>\n\n<span class=\"token comment\">// Register registers the resolver builder to the resolver map. b.Scheme will be</span>\n<span class=\"token comment\">// used as the scheme registered with this builder.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// NOTE: this function must only be called during initialization time (i.e. in</span>\n<span class=\"token comment\">// an init() function), and is not thread-safe. If multiple Resolvers are</span>\n<span class=\"token comment\">// registered with the same name, the one registered last will take effect.</span>\n<span class=\"token comment\">// 注册scheme -> ResolverBuilder 的映射关系. 可以注册自定义的  Resolver</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>b Builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tm<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">Scheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Get returns the resolver builder registered with the given scheme.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If no builder is register with the scheme, nil will be returned.</span>\n<span class=\"token comment\">// 根据 schema 获取 对应的 resolver 构建器</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>scheme <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Builder <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> b<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span>scheme<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> b\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// SetDefaultScheme sets the default scheme that will be used. The default</span>\n<span class=\"token comment\">// default scheme is \"passthrough\".</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// NOTE: this function must only be called during initialization time (i.e. in</span>\n<span class=\"token comment\">// an init() function), and is not thread-safe. The scheme set last overrides</span>\n<span class=\"token comment\">// previously set values.</span>\n<span class=\"token comment\">// 设置默认的  schema,grpc 默认的构建器 是  passthrough</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SetDefaultScheme</span><span class=\"token punctuation\">(</span>scheme <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tdefaultScheme <span class=\"token operator\">=</span> scheme\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// GetDefaultScheme gets the default scheme that will be used.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetDefaultScheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> defaultScheme\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// AddressType indicates the address type returned by name resolution.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Deprecated: use Attributes in Address instead.</span>\n<span class=\"token keyword\">type</span> AddressType <span class=\"token builtin\">uint8</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">// Backend indicates the address is for a backend server.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: use Attributes in Address instead.</span>\n\tBackend AddressType <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n\t<span class=\"token comment\">// GRPCLB indicates the address is for a grpclb load balancer.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: to select the GRPCLB load balancing policy, use a service</span>\n\t<span class=\"token comment\">// config with a corresponding loadBalancingConfig.  To supply balancer</span>\n\t<span class=\"token comment\">// addresses to the GRPCLB load balancing policy, set State.Attributes</span>\n\t<span class=\"token comment\">// using balancer/grpclb/state.Set.</span>\n\tGRPCLB\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Address represents a server the client connects to.</span>\n<span class=\"token comment\">// 表示客户端需要访问的服务器地址</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Experimental</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Notice: This type is EXPERIMENTAL and may be changed or removed in a</span>\n<span class=\"token comment\">// later release.</span>\n<span class=\"token keyword\">type</span> Address <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Addr is the server address on which a connection will be established.</span>\n    <span class=\"token comment\">// 用于构建  connection 的服务器地址</span>\n\tAddr <span class=\"token builtin\">string</span>\n\n\t<span class=\"token comment\">// ServerName is the name of this address.</span>\n\t<span class=\"token comment\">// If non-empty, the ServerName is used as the transport certification authority for</span>\n\t<span class=\"token comment\">// the address, instead of the hostname from the Dial target string. In most cases,</span>\n\t<span class=\"token comment\">// this should not be set.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// If Type is GRPCLB, ServerName should be the name of the remote load</span>\n\t<span class=\"token comment\">// balancer, not the name of the backend.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// WARNING: ServerName must only be populated with trusted values. It</span>\n\t<span class=\"token comment\">// is insecure to populate it with data from untrusted inputs since untrusted</span>\n\t<span class=\"token comment\">// values could be used to bypass the authority checks performed by TLS.</span>\n\tServerName <span class=\"token builtin\">string</span>\n\n\t<span class=\"token comment\">// Attributes contains arbitrary data about this address intended for</span>\n\t<span class=\"token comment\">// consumption by the SubConn.</span>\n\tAttributes <span class=\"token operator\">*</span>attributes<span class=\"token punctuation\">.</span>Attributes\n\n\t<span class=\"token comment\">// BalancerAttributes contains arbitrary data about this address intended</span>\n\t<span class=\"token comment\">// for consumption by the LB policy.  These attribes do not affect SubConn</span>\n\t<span class=\"token comment\">// creation, connection establishment, handshaking, etc.</span>\n\tBalancerAttributes <span class=\"token operator\">*</span>attributes<span class=\"token punctuation\">.</span>Attributes\n\n\t<span class=\"token comment\">// Type is the type of this address.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: use Attributes instead.</span>\n\tType AddressType\n\n\t<span class=\"token comment\">// Metadata is the information associated with Addr, which may be used</span>\n\t<span class=\"token comment\">// to make load balancing decision.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: use Attributes instead.</span>\n\tMetadata <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Equal returns whether a and o are identical.  Metadata is compared directly,</span>\n<span class=\"token comment\">// not with any recursive introspection.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a Address<span class=\"token punctuation\">)</span> <span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>o Address<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>Addr <span class=\"token operator\">==</span> o<span class=\"token punctuation\">.</span>Addr <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>ServerName <span class=\"token operator\">==</span> o<span class=\"token punctuation\">.</span>ServerName <span class=\"token operator\">&amp;&amp;</span>\n\t\ta<span class=\"token punctuation\">.</span>Attributes<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>Attributes<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\ta<span class=\"token punctuation\">.</span>BalancerAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>BalancerAttributes<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\ta<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">==</span> o<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>Metadata <span class=\"token operator\">==</span> o<span class=\"token punctuation\">.</span>Metadata\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// String returns JSON formatted string representation of the address.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a Address<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> pretty<span class=\"token punctuation\">.</span><span class=\"token function\">ToJSON</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// BuildOptions includes additional information for the builder to create</span>\n<span class=\"token comment\">// the resolver.</span>\n<span class=\"token keyword\">type</span> BuildOptions <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// DisableServiceConfig indicates whether a resolver implementation should</span>\n\t<span class=\"token comment\">// fetch service config data.</span>\n\tDisableServiceConfig <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// DialCreds is the transport credentials used by the ClientConn for</span>\n\t<span class=\"token comment\">// communicating with the target gRPC service (set via</span>\n\t<span class=\"token comment\">// WithTransportCredentials). In cases where a name resolution service</span>\n\t<span class=\"token comment\">// requires the same credentials, the resolver may use this field. In most</span>\n\t<span class=\"token comment\">// cases though, it is not appropriate, and this field may be ignored.</span>\n\tDialCreds credentials<span class=\"token punctuation\">.</span>TransportCredentials\n\t<span class=\"token comment\">// CredsBundle is the credentials bundle used by the ClientConn for</span>\n\t<span class=\"token comment\">// communicating with the target gRPC service (set via</span>\n\t<span class=\"token comment\">// WithCredentialsBundle). In cases where a name resolution service</span>\n\t<span class=\"token comment\">// requires the same credentials, the resolver may use this field. In most</span>\n\t<span class=\"token comment\">// cases though, it is not appropriate, and this field may be ignored.</span>\n\tCredsBundle credentials<span class=\"token punctuation\">.</span>Bundle\n\t<span class=\"token comment\">// Dialer is the custom dialer used by the ClientConn for dialling the</span>\n\t<span class=\"token comment\">// target gRPC service (set via WithDialer). In cases where a name</span>\n\t<span class=\"token comment\">// resolution service requires the same dialer, the resolver may use this</span>\n\t<span class=\"token comment\">// field. In most cases though, it is not appropriate, and this field may</span>\n\t<span class=\"token comment\">// be ignored.</span>\n\tDialer <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// State contains the current Resolver state relevant to the ClientConn.</span>\n<span class=\"token keyword\">type</span> State <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Addresses is the latest set of resolved addresses for the target.</span>\n\tAddresses <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Address\n\n\t<span class=\"token comment\">// ServiceConfig contains the result from parsing the latest service</span>\n\t<span class=\"token comment\">// config.  If it is nil, it indicates no service config is present or the</span>\n\t<span class=\"token comment\">// resolver does not provide service configs.</span>\n\tServiceConfig <span class=\"token operator\">*</span>serviceconfig<span class=\"token punctuation\">.</span>ParseResult\n\n\t<span class=\"token comment\">// Attributes contains arbitrary data about the resolver intended for</span>\n\t<span class=\"token comment\">// consumption by the load balancing policy.</span>\n\tAttributes <span class=\"token operator\">*</span>attributes<span class=\"token punctuation\">.</span>Attributes\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ClientConn contains the callbacks for resolver to notify any updates</span>\n<span class=\"token comment\">// to the gRPC ClientConn.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This interface is to be implemented by gRPC. Users should not need a</span>\n<span class=\"token comment\">// brand new implementation of this interface. For the situations like</span>\n<span class=\"token comment\">// testing, the new implementation should embed this interface. This allows</span>\n<span class=\"token comment\">// gRPC to add new methods to this interface.</span>\n<span class=\"token keyword\">type</span> ClientConn <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// UpdateState updates the state of the ClientConn appropriately.</span>\n\t<span class=\"token function\">UpdateState</span><span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\t<span class=\"token comment\">// ReportError notifies the ClientConn that the Resolver encountered an</span>\n\t<span class=\"token comment\">// error.  The ClientConn will notify the load balancer and begin calling</span>\n\t<span class=\"token comment\">// ResolveNow on the Resolver with exponential backoff.</span>\n\t<span class=\"token function\">ReportError</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// NewAddress is called by resolver to notify ClientConn a new list</span>\n\t<span class=\"token comment\">// of resolved addresses.</span>\n\t<span class=\"token comment\">// The address list should be the complete list of resolved addresses.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: Use UpdateState instead.</span>\n\t<span class=\"token function\">NewAddress</span><span class=\"token punctuation\">(</span>addresses <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Address<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// NewServiceConfig is called by resolver to notify ClientConn a new</span>\n\t<span class=\"token comment\">// service config. The service config should be provided as a json string.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Deprecated: Use UpdateState instead.</span>\n\t<span class=\"token function\">NewServiceConfig</span><span class=\"token punctuation\">(</span>serviceConfig <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// ParseServiceConfig parses the provided service config and returns an</span>\n\t<span class=\"token comment\">// object that provides the parsed config.</span>\n\t<span class=\"token function\">ParseServiceConfig</span><span class=\"token punctuation\">(</span>serviceConfigJSON <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>serviceconfig<span class=\"token punctuation\">.</span>ParseResult\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Target represents a target for gRPC, as specified in:</span>\n<span class=\"token comment\">// https://github.com/grpc/grpc/blob/master/doc/naming.md.</span>\n<span class=\"token comment\">// It is parsed from the target string that gets passed into Dial or DialContext</span>\n<span class=\"token comment\">// by the user. And gRPC passes it to the resolver and the balancer.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If the target follows the naming spec, and the parsed scheme is registered</span>\n<span class=\"token comment\">// with gRPC, we will parse the target string according to the spec. If the</span>\n<span class=\"token comment\">// target does not contain a scheme or if the parsed scheme is not registered</span>\n<span class=\"token comment\">// (i.e. no corresponding resolver available to resolve the endpoint), we will</span>\n<span class=\"token comment\">// apply the default scheme, and will attempt to reparse it.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Examples:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// - \"dns://some_authority/foo.bar\"</span>\n<span class=\"token comment\">//   Target&#123;Scheme: \"dns\", Authority: \"some_authority\", Endpoint: \"foo.bar\"&#125;</span>\n<span class=\"token comment\">// - \"foo.bar\"</span>\n<span class=\"token comment\">//   Target&#123;Scheme: resolver.GetDefaultScheme(), Endpoint: \"foo.bar\"&#125;</span>\n<span class=\"token comment\">// - \"unknown_scheme://authority/endpoint\"</span>\n<span class=\"token comment\">//   Target&#123;Scheme: resolver.GetDefaultScheme(), Endpoint: \"unknown_scheme://authority/endpoint\"&#125;</span>\n<span class=\"token keyword\">type</span> Target <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Deprecated: use URL.Scheme instead.</span>\n\tScheme <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// Deprecated: use URL.Host instead.</span>\n\tAuthority <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// Deprecated: use URL.Path or URL.Opaque instead. The latter is set when</span>\n\t<span class=\"token comment\">// the former is empty.</span>\n\tEndpoint <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// URL contains the parsed dial target with an optional default scheme added</span>\n\t<span class=\"token comment\">// to it if the original dial target contained no scheme or contained an</span>\n\t<span class=\"token comment\">// unregistered scheme. Any query params specified in the original dial</span>\n\t<span class=\"token comment\">// target can be accessed from here.</span>\n\tURL url<span class=\"token punctuation\">.</span>URL\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Builder creates a resolver that will be used to watch name resolution updates.</span>\n<span class=\"token comment\">// 自定义一个 resolver 必须实现这个接口</span>\n<span class=\"token keyword\">type</span> Builder <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Build creates a new resolver for the given target.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// gRPC dial calls Build synchronously, and fails if the returned error is</span>\n\t<span class=\"token comment\">// not nil.</span>\n\t<span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>target Target<span class=\"token punctuation\">,</span> cc ClientConn<span class=\"token punctuation\">,</span> opts BuildOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Resolver<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Scheme returns the scheme supported by this resolver.</span>\n\t<span class=\"token comment\">// Scheme is defined at https://github.com/grpc/grpc/blob/master/doc/naming.md.</span>\n    <span class=\"token comment\">// 指定构建的是那种 Scheme 类型的解析器，就是客户端调用的 scheme 名字</span>\n\t<span class=\"token function\">Scheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ResolveNowOptions includes additional information for ResolveNow.</span>\n<span class=\"token comment\">// execute ResolveNow 的 一些附属信息</span>\n<span class=\"token keyword\">type</span> ResolveNowOptions <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Resolver watches for the updates on the specified target.</span>\n<span class=\"token comment\">// Updates include address updates and service config updates.</span>\n<span class=\"token comment\">// 要实现自定义的解析器,必须实现 Resolver 接口(解析器监听target 上的更新, 更新内容包括 已resolved的 地址列表 和 服务配置)</span>\n<span class=\"token keyword\">type</span> Resolver <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// ResolveNow will be called by gRPC to try to resolve the target name</span>\n\t<span class=\"token comment\">// again. It's just a hint, resolver can ignore this if it's not necessary.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// It could be called multiple times concurrently.</span>\n\t<span class=\"token function\">ResolveNow</span><span class=\"token punctuation\">(</span>ResolveNowOptions<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 通过channel的方式 唤醒select ，立即解析</span>\n\t<span class=\"token comment\">// Close closes the resolver.</span>\n\t<span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// UnregisterForTesting removes the resolver builder with the given scheme from the</span>\n<span class=\"token comment\">// resolver map.</span>\n<span class=\"token comment\">// This function is for testing only.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">UnregisterForTesting</span><span class=\"token punctuation\">(</span>scheme <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> scheme<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","tags":["DNSResolver","grpc"]},{"title":"Hello World","url":"//post/hello-world.html","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"hexo中插入图片","url":"//post/hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87.html","content":"<p>在 hexo 中使用 图片, 有如下几种方式:</p>\n<h2 id=\"1-在-资源目录下-创建图片\"><a href=\"#1-在-资源目录下-创建图片\" class=\"headerlink\" title=\"1. 在 资源目录下 创建图片\"></a>1. 在 资源目录下 创建图片</h2><ol>\n<li>hexo 配置文件 <code>_config.yml</code></li>\n</ol>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">post_asset_folder: true  # 创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>当执行命令 <code>hexo new &quot;title&quot;</code> 会创建一个 与文章名相同的目录, 这个目录也称为 文章资源文件.<br>在资源文件下创建 一张图片 <code>image.png</code>,在文章中 按理说 <code>![image](image.png)</code>这样引用就可以了,但是 现在好像不能用了. 需要引入其他的插件</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">npm install hexo-renderer-marked<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装后,在 <code>_config.yml</code> 文件写入如下配置:</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">post_asset_folder: true  # 创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹\nmarked:\n  prependRoot: true\n  postAsset: true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>之后就可以在使用<code>![](image.png)</code>的方式愉快的插入图片了.</p>\n<h2 id=\"2-使用图床\"><a href=\"#2-使用图床\" class=\"headerlink\" title=\"2. 使用图床\"></a>2. 使用图床</h2><h2 id=\"3-picGo-github-JsDeliver-构建免费图床\"><a href=\"#3-picGo-github-JsDeliver-构建免费图床\" class=\"headerlink\" title=\"3. picGo +  github + JsDeliver  构建免费图床\"></a>3. picGo +  github + JsDeliver  构建免费图床</h2>","categories":["hexo"],"tags":["blog","image"]},{"title":"mysql查询计划查看","url":"//post/mysql%E6%9F%A5%E8%AF%A2%E8%AE%A1%E5%88%92%E6%9F%A5%E7%9C%8B.html","content":"<p>MySql提供了EXPLAIN语法用来进行查询分析，在SQL语句前加一个”EXPLAIN”即可。比如我们要分析如下SQL语句：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> <span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<span id=\"more\"></span>\n\n<p>运行上面的sql语句后你会看到，下面的表头信息：<br><img src=\"/post/mysql%E6%9F%A5%E8%AF%A2%E8%AE%A1%E5%88%92%E6%9F%A5%E7%9C%8B/mysql%E6%9F%A5%E8%AF%A2%E8%AE%A1%E5%88%92.jpg\" alt=\"mysql查询计划\"></p>\n<ul>\n<li><p><code>id</code><br>Query Optimizer 所选定的执行计划中查询的序列号。</p>\n</li>\n<li><p><code>select_type</code><br>所使用的查询类型，主要有以下这几种查询类型</p>\n<ul>\n<li><code>DEPENDENT SUBQUERY</code>：子查询中内层的第一个SELECT，依赖于外部查询的结果集。</li>\n<li><code>DEPENDENT UNION</code>：子查询中的UNION，且为UNION 中从第二个SELECT 开始的后面所有SELECT，同样依赖于外部查询的结果集。</li>\n<li><code>PRIMARY</code>：子查询中的最外层查询，注意并不是主键查询。</li>\n<li><code>SIMPLE</code>：除子查询或者UNION 之外的其他查询。</li>\n<li><code>SUBQUERY</code>：子查询内层查询的第一个SELECT，结果不依赖于外部查询结果集。</li>\n<li><code>UNCACHEABLE SUBQUERY</code>：结果集无法缓存的子查询。</li>\n<li><code>UNION</code>：UNION 语句中第二个SELECT 开始的后面所有SELECT，第一个SELECT 为PRIMARY</li>\n<li><code>UNION RESULT</code>：UNION 中的合并结果。</li>\n</ul>\n</li>\n<li><p><code>table</code> 表名</p>\n</li>\n<li><p><code>type</code> 告诉我们对表所使用的访问方式，<br>all 全表扫描<br>index：全索引扫描。<br>range：索引范围扫描。<br>ref：Join 语句中被驱动表索引引用查询。</p>\n<p>从最好到最差的连接类型为<br>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge</p>\n<blockquote>\n<p>unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p>\n</blockquote>\n<p><em>一般来说，好的sql查询至少达到<code>range</code>级别，最好能达到<code>ref</code></em></p>\n</li>\n<li><p><code>possible_keys</code>  显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句</p>\n</li>\n<li><p><code>key</code> 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。这种情况下，可以在SELECT语句中使用USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引</p>\n</li>\n<li><p><code>key_len</code>  使用的索引的长度。在不损失精确性的情况下，长度越短越好</p>\n</li>\n<li><p><code>ref</code>  显示索引的哪一列被使用了，如果可能的话，是一个常数</p>\n</li>\n<li><p><code>rows</code>  MYSQL认为必须检查的用来返回请求数据的行数</p>\n</li>\n<li><p><code>Extra</code> 关于MYSQL如何解析查询的额外信息。 可能取值如下</p>\n<ul>\n<li>Distinct：查找distinct 值，所以当mysql 找到了第一条匹配的结果后，将停止该值的查询而转为后面其他值的查询。</li>\n<li>Full scan on NULL key：子查询中的一种优化方式，主要在遇到无法通过索引访问null值的使用使用。</li>\n<li>Impossible WHERE noticed after reading const tables：MySQL Query Optimizer 通过收集到的统计信息判断出不可能存在结果。</li>\n<li>No tables：Query 语句中使用FROM DUAL 或者不包含任何FROM 子句。</li>\n<li>Not exists：在某些左连接中MySQL Query Optimizer 所通过改变原有Query 的组成而使用的优化方法，可以部分减少数据访问次数。</li>\n<li>Range checked for each record (index map: N)：通过MySQL 官方手册的描述，当MySQL Query Optimizer 没有发现好的可以使用的索引的时候，如果发现如果来自前面的表的列值已知，可能部分索引可以使用。对前面的表的每个行组合，MySQL 检查是否可以使用range 或index_merge 访问方法来索取行。</li>\n<li>Select tables optimized away：当我们使用某些聚合函数来访问存在索引的某个字段的时候，MySQL Query Optimizer 会通过索引而直接一次定位到所需的数据行完成整个查询。当然，前提是在Query 中不能有GROUP BY 操作。如使用MIN()或者MAX（）的时候。</li>\n<li>Using filesort：当我们的Query 中包含ORDER BY 操作，而且无法利用索引完成排序操作的时候，MySQL Query Optimizer 不得不选择相应的排序算法来实现。</li>\n<li><code>Using index</code>：所需要的数据只需要在Index 即可全部获得而不需要再到表中取数据。</li>\n<li><code>Using index for group-by</code>：数据访问和Using index 一样，所需数据只需要读取索引即可，而当Query 中使用了GROUP BY 或者DISTINCT 子句的时候，如果分组字段也在索引中，Extra 中的信息就会是Using index for group-by。</li>\n<li><code>Using temporary</code>：当MySQL 在某些操作中必须使用临时表的时候，在Extra 信息中就会出现Using temporary 。主要常见于GROUP BY 和ORDER BY 等操作中。</li>\n<li><code>Using where</code>：如果我们不是读取表的所有数据，或者不是仅仅通过索引就可以获取所有需要的数据，则会出现Using where 信息。</li>\n<li>Using where with pushed condition：这是一个仅仅在NDBCluster 存储引擎中才会出现的信息，而且还需要通过打开Condition Pushdown 优化功能才可能会被使用。控制参数为engine_condition_pushdown 。</li>\n</ul>\n</li>\n</ul>\n","categories":["mysql"],"tags":["mysql","查询计划"]},{"title":"redis-info命令详解","url":"//post/redis-info%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html","content":"<blockquote>\n<p>redis info 命令详解</p>\n</blockquote>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">192.168.5.244(192.168.5.244:7001)&gt;info all\n&quot;# Server\nredis_version:3.0.6\nredis_git_sha1:00000000\nredis_git_dirty:0\nredis_build_id:8e54e6b49fa2c985\nredis_mode:cluster                             #运行模式，单机或者集群\nos:Linux 3.10.0-327.el7.x86_64 x86_64\narch_bits:64\nmultiplexing_api:epoll                        #redis所使用的事件处理机制\ngcc_version:4.8.5\nprocess_id:1187                                #redis服务器进程的pid\nrun_id:3198b2ad766fe1eb467a4d27fd90b3c481f2c253  # redis服务器的随机标识符(用于sentinel和集群)\ntcp_port:7001                                #redis服务器监听端口\nuptime_in_seconds:784389                     #redis服务器启动总时间，单位是秒\nuptime_in_days:9                             #redis服务器启动总时间，单位是天\nhz:10                                        #redis内部调度（进行关闭timeout的客户端，删除过期key等等）频率，程序规定serverCron每秒运行10次。\nlru_clock:3236399                            #自增的时钟，用于LRU管理,该时钟100ms(hz&#x3D;10,因此每1000ms&#x2F;10&#x3D;100ms执行一次定时任务)更新一次\nconfig_file:&#x2F;etc&#x2F;redis&#x2F;7001&#x2F;redis.conf       #配置文件路径\n\n# Clients(已连接客户端信息)\nconnected_clients:276            # 已连接客户端的数量(不包括通过slave连接的客户端)\nclient_longest_output_list:0     # 当前连接的客户端当中，最长的输出列表，用client list命令观察omem字段最大值\nclient_biggest_input_buf:0       # 当前连接的客户端当中，最大输入缓存，用client list命令观察qbuf和qbuf-free两个字段最大值\nblocked_clients:0                # 正在等待阻塞命令(BLPOP、BRPOP、BRPOPLPUSH)的客户端的数量\n\n# Memory  (内存信息)\nused_memory:25388768             # 由redis分配器分配的内存总量，以字节为单位\nused_memory_human:24.21M         # 以人类可读的格式返回redis分配的内存总量\nused_memory_rss:32223232         # 从操作系统的角度，返回redis已分配的内存总量(俗称常驻集大小)。这个值和top命令的输出一致\nused_memory_peak:27566960        # redis的内存消耗峰值(以字节为单位) \nused_memory_peak_human:26.29M    # 以人类可读的格式返回redis的内存消耗峰值\nused_memory_lua:41984            # lua引擎所使用的内存大小(以字节为单位)\nmem_fragmentation_ratio:1.27     # used_memory_rss和used_memory之间的比率，小于1表示使用了swap，大于1表示碎片比较多\nmem_allocator:jemalloc-3.6.0     # 在编译时指定的redis所使用的内存分配器。可以是libc、jemalloc或者tcmalloc\n\n# Persistence    (rdb和aof的持久化相关信息)\nloading:0                         #服务器是否正在载入持久化文件\nrdb_changes_since_last_save:0     #离最近一次成功生成rdb文件，写入命令的个数，即有多少个写入命令没有持久化\nrdb_bgsave_in_progress:0          #服务器是否正在创建rdb文件\nrdb_last_save_time:1563456371    #离最近一次成功创建rdb文件的时间戳。当前时间戳 - rdb_last_save_time&#x3D;多少秒未成功生成rdb文件\nrdb_last_bgsave_status:ok          # 最近一次rdb持久化是否成功\nrdb_last_bgsave_time_sec:0        # 最近一次成功生成rdb文件耗时秒数\nrdb_current_bgsave_time_sec:-1   # 如果服务器正在创建rdb文件，那么这个域记录的就是当前的创建操作已经耗费的秒数\naof_enabled:1                    # 是否开启了aof\naof_rewrite_in_progress:0        # 标识aof的rewrite操作是否在进行中\naof_rewrite_scheduled:0          # rewrite任务计划，当客户端发送bgrewriteaof指令，如果当前rewrite子进程正在执行，那么将客户端请求的bgrewriteaof变为计划任务，待aof子进程结束后执行rewrite \naof_last_rewrite_time_sec:0      # 最近一次aof rewrite耗费的时长\naof_current_rewrite_time_sec:-1  # 如果rewrite操作正在进行，则记录所使用的时间，单位秒\naof_last_bgrewrite_status:ok      # 上次bgrewriteaof操作的状态\naof_last_write_status:ok         # 上次aof写入状态\naof_current_size:6006946          # aof当前尺寸\naof_base_size:5198177            # 服务器启动时或者aof重写最近一次执行之后aof文件的大小\naof_pending_rewrite:0             # 是否有aof重写操作在等待rdb文件创建完毕之后执行?\naof_buffer_length:0               # aof buffer的大小\naof_rewrite_buffer_length:0       # aof rewrite buffer的大小\naof_pending_bio_fsync:0           # 后台I&#x2F;O队列里面，等待执行的fsync调用数量\naof_delayed_fsync:0               # 被延迟的fsync调用数量\n\n# Stats        (一般统计信息)\ntotal_connections_received:111954    #新创建连接个数,如果新创建连接过多，过度地创建和销毁连接对性能有影响，说明短连接严重或连接池使用有问题，需调研代码的连接设置 \ntotal_commands_processed:410452      #redis处理的命令数\ninstantaneous_ops_per_sec:0          #redis当前的qps，redis内部较实时的每秒执行的命令数\ntotal_net_input_bytes:10401399       #redis网络入口流量字节数\ntotal_net_output_bytes:2027252713    #redis网络出口流量字节数\ninstantaneous_input_kbps:0.01        #redis网络入口kps\ninstantaneous_output_kbps:0.02       #redis网络出口kps\nrejected_connections:0               #拒绝的连接个数，redis连接个数达到maxclients限制，拒绝新连接的个数\nsync_full:0                          #主从完全同步成功次数 \nsync_partial_ok:0                    #主从部分同步成功次数\nsync_partial_err:0                   #主从部分同步失败次数\nexpired_keys:0                       #运行以来过期的key的数量\nevicted_keys:0                       #运行以来剔除(超过了maxmemory后)的key的数量\nkeyspace_hits:9682                   #命中次数\nkeyspace_misses:258                  #没命中次数\npubsub_channels:0                    #当前使用中的频道数量\npubsub_patterns:0                    #当前使用的模式的数量\nlatest_fork_usec:1253                #最近一次fork操作阻塞redis进程的耗时数，单位微秒\nmigrate_cached_sockets:0\n\n# Replication  (主从信息，slave上显示的信息)\nrole:slave                    #实例的角色，是master or slave\nmaster_host:192.168.5.244     #此节点对应的master的ip\nmaster_port:7004               #此节点对应的master的port\nmaster_link_status:up          #slave端可查看它与master之间同步状态,当复制断开后表示down\nmaster_last_io_seconds_ago:1    #主库多少秒未发送数据到从库?\nmaster_sync_in_progress:0      #从服务器是否在与主服务器进行同步\nslave_repl_offset:1875290      #slave复制偏移量\nslave_priority:100             #slave优先级\nslave_read_only:1              #从库是否设置只读\nconnected_slaves:0             #连接的slave实例个数\nmaster_repl_offset:0\nrepl_backlog_active:0          #复制积压缓冲区是否开启\nrepl_backlog_size:1048576        #复制积压缓冲大小\t\nrepl_backlog_first_byte_offset:0  #复制缓冲区里偏移量的大小\nrepl_backlog_histlen:0          #此值等于 master_repl_offset - repl_backlog_first_byte_offset,该值不会超过repl_backlog_size的大小\n\n# CPU   (CPU计算量统计信息)\t\nused_cpu_sys:314.93      # 将所有redis主进程在核心态所占用的CPU时求和累计起来\nused_cpu_user:211.47     # 将所有redis主进程在用户态所占用的CPU时求和累计起来\nused_cpu_sys_children:2.30     # 将后台进程在核心态所占用的CPU时求和累计起来\nused_cpu_user_children:15.05   # 将后台进程在用户态所占用的CPU时求和累计起来\n \n# Commandstats         (各种不同类型的命令的执行统计信息)\t\ncmdstat_get:calls&#x3D;497,usec&#x3D;2135,usec_per_call&#x3D;4.30\ncmdstat_set:calls&#x3D;52,usec&#x3D;442,usec_per_call&#x3D;8.50\ncmdstat_setnx:calls&#x3D;7,usec&#x3D;106,usec_per_call&#x3D;15.14\ncmdstat_setex:calls&#x3D;329,usec&#x3D;4964,usec_per_call&#x3D;15.09\ncmdstat_del:calls&#x3D;268,usec&#x3D;11297,usec_per_call&#x3D;42.15\ncmdstat_exists:calls&#x3D;7,usec&#x3D;22,usec_per_call&#x3D;3.14\ncmdstat_incr:calls&#x3D;50,usec&#x3D;205,usec_per_call&#x3D;4.10\ncmdstat_mget:calls&#x3D;8,usec&#x3D;28,usec_per_call&#x3D;3.50\ncmdstat_rpush:calls&#x3D;1,usec&#x3D;21,usec_per_call&#x3D;21.00\ncmdstat_lpush:calls&#x3D;15,usec&#x3D;239,usec_per_call&#x3D;15.93\ncmdstat_rpop:calls&#x3D;19,usec&#x3D;171,usec_per_call&#x3D;9.00\ncmdstat_lrange:calls&#x3D;2,usec&#x3D;7,usec_per_call&#x3D;3.50\ncmdstat_sadd:calls&#x3D;5,usec&#x3D;74,usec_per_call&#x3D;14.80\ncmdstat_zadd:calls&#x3D;24,usec&#x3D;377,usec_per_call&#x3D;15.71\ncmdstat_zrem:calls&#x3D;2,usec&#x3D;14,usec_per_call&#x3D;7.00\ncmdstat_hset:calls&#x3D;29,usec&#x3D;229,usec_per_call&#x3D;7.90\ncmdstat_hget:calls&#x3D;2,usec&#x3D;9,usec_per_call&#x3D;4.50\ncmdstat_hmset:calls&#x3D;7,usec&#x3D;15574,usec_per_call&#x3D;2224.86\ncmdstat_hincrby:calls&#x3D;21,usec&#x3D;220,usec_per_call&#x3D;10.48\ncmdstat_hdel:calls&#x3D;4,usec&#x3D;36,usec_per_call&#x3D;9.00\ncmdstat_incrby:calls&#x3D;772,usec&#x3D;2896,usec_per_call&#x3D;3.75\ncmdstat_randomkey:calls&#x3D;55,usec&#x3D;259,usec_per_call&#x3D;4.71\ncmdstat_select:calls&#x3D;1,usec&#x3D;1,usec_per_call&#x3D;1.00\ncmdstat_expire:calls&#x3D;92,usec&#x3D;354,usec_per_call&#x3D;3.85\ncmdstat_pexpire:calls&#x3D;784,usec&#x3D;1849,usec_per_call&#x3D;2.36\ncmdstat_keys:calls&#x3D;6,usec&#x3D;4763,usec_per_call&#x3D;793.83\ncmdstat_scan:calls&#x3D;3,usec&#x3D;25493,usec_per_call&#x3D;8497.67\ncmdstat_ping:calls&#x3D;378267,usec&#x3D;475783,usec_per_call&#x3D;1.26\ncmdstat_info:calls&#x3D;20,usec&#x3D;51449,usec_per_call&#x3D;2572.45\ncmdstat_ttl:calls&#x3D;771,usec&#x3D;2555,usec_per_call&#x3D;3.31\ncmdstat_cluster:calls&#x3D;9521,usec&#x3D;4896338,usec_per_call&#x3D;514.27\ncmdstat_readonly:calls&#x3D;114,usec&#x3D;219,usec_per_call&#x3D;1.92\ncmdstat_client:calls&#x3D;18455,usec&#x3D;5187940,usec_per_call&#x3D;281.11\ncmdstat_slowlog:calls&#x3D;13,usec&#x3D;233,usec_per_call&#x3D;17.92\ncmdstat_command:calls&#x3D;229,usec&#x3D;178198,usec_per_call&#x3D;778.16\n\n# Cluster   (集群相关信息)\ncluster_enabled:1                  #实例是否启用集群模式\n\n# Keyspace      (数据库相关的统计信息)\ndb0:keys&#x3D;5968,expires&#x3D;4822,avg_ttl&#x3D;2089395628   #db0的key的数量,以及带有生存期的key的数,平均存活时间\n&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","categories":["redis"],"tags":["redis"]},{"title":"位运算-基础","url":"//post/%E4%BD%8D%E8%BF%90%E7%AE%97-%E5%9F%BA%E7%A1%80.html","content":"<span id=\"more\"></span>\n\n\n<h2 id=\"异或操作\"><a href=\"#异或操作\" class=\"headerlink\" title=\"异或操作\"></a>异或操作</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">x ^ 0  &#x3D; x\nx ^ 1s &#x3D; ~x  &#x2F;&#x2F; 1s  &#x3D; ~0\nx ^ ~x &#x3D; 1s\nx ^ x  &#x3D; 0\nc &#x3D; a ^ b  &#x3D;&gt; a ^ c &#x3D; b,  b ^ c &#x3D; a    &#x2F;&#x2F; 交换两个数\na ^ b ^ c &#x3D; a ^ (b ^ c) &#x3D; (a ^ b) ^ c  &#x2F;&#x2F; associate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"指定位置的-位运算\"><a href=\"#指定位置的-位运算\" class=\"headerlink\" title=\"指定位置的 位运算\"></a>指定位置的 位运算</h2><ol>\n<li>将 x 最右边的 n位清零  :   <code>x &amp; (~0 &lt;&lt; n)</code></li>\n<li>获取 x 的第n位的值(1|0):   <code>(x &gt;&gt; n) &amp; 1</code></li>\n<li>获取 x 的第n位的幂值   :    <code>x &amp;(1 &lt;&lt; n)</code></li>\n<li>仅将第 n 位置 1       :    <code>x | (1&lt;&lt; n)</code></li>\n<li>仅将第 n 位置 0       :    <code>x &amp; ~(1&lt;&lt; n)</code></li>\n<li>仅将第 n 位取反       :    <code>x ^ (1&lt;&lt; n)</code></li>\n<li>将x最高位至第n(含)位清零:    <code>x&amp;((1&lt;&lt;n) - 1)</code></li>\n<li>获取x  最右边的 1     :     <code>x &amp; -x</code> (lowbit操作)</li>\n</ol>\n<ul>\n<li>a      &#x3D; 00110100</li>\n<li>~a     &#x3D; 11001011</li>\n<li>-a     &#x3D; 11001100</li>\n<li>a &amp; -a &#x3D; 00000100</li>\n</ul>\n<h2 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h2><ol>\n<li>判断奇偶</li>\n</ol>\n<ul>\n<li>x % 2 &#x3D;&#x3D; 0  &#x3D;&gt;   (x &amp; 1) &#x3D;&#x3D; 0</li>\n<li>x % 2 &#x3D;&#x3D; 1  &#x3D;&gt;   (x &amp; 1) &#x3D;&#x3D; 1</li>\n</ul>\n<ol start=\"2\">\n<li><p>x &gt;&gt; 1 &#x3D;&#x3D; x &#x2F; 2<br>mid &#x3D; (left + right) &#x2F; 2   &#x3D;&#x3D; mid &#x3D; (left + right) &gt;&gt; 1 </p>\n</li>\n<li><p>x &#x3D; x &amp;(x-1)  清零最低位的1</p>\n</li>\n<li><p>x &amp; -x       得到最低位的 1 </p>\n</li>\n<li><p>x &amp; ~x  &#x3D;&#x3D; 0</p>\n</li>\n</ol>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ul>\n<li>bloomFilter</li>\n<li></li>\n</ul>\n","tags":["算法","位运算"]},{"title":"《架构整洁之道》-读书笔记:7-11章","url":"//post/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-7-11%E7%AB%A0.html","content":"<h1 id=\"《架构整洁之道》-读书笔记-7-11章\"><a href=\"#《架构整洁之道》-读书笔记-7-11章\" class=\"headerlink\" title=\"《架构整洁之道》-读书笔记:7-11章\"></a>《架构整洁之道》-读书笔记:7-11章</h1><p>架构整洁之道: 第 7-11 章 主要讲的是 设计原则, <code>SOLID</code>,<br><code>SOLID</code> 的主要作用是告诉我们如何将数据和函数组织称为类,以及如何将这些类链接起来组合成一个程序.</p>\n<p>软件构建中层模块主要目标如下:</p>\n<ul>\n<li>使软件可容忍被改动.</li>\n<li>是软件更容易被理解.</li>\n<li>构建在多个系统中复用的组件.</li>\n</ul>\n<p><code>SOLID</code> 原则应该紧贴于代码实现之上,这些原则主要是帮助我们定义软件架构中组件和模块的.</p>\n<ul>\n<li>SRP  Single Resposibility Principle<br>每个软件应该有且仅有一个被修改的理由.</li>\n<li>OCP  Open Close Principle<br>如果软件系统想要更容易被改变,那么设计就必须允许新增代码来修改系统行为,而非只能靠修改原来的代码.</li>\n<li>LSP  Liskov Substitution Principle<br>利用可替换的组件构建软件系统,那么这些组件就必须遵循同一个约定,以便让谢谢组件可以相互替换.</li>\n<li>ISP  Interface Segregation Principle<br>在设计中避免不必要的依赖.</li>\n<li>DIP  Depencency Inverse Principle<br>高层策略性的代码不应该依赖实现底层细节的代码,恰恰相反,那些实现底层细节的代码应该依赖高层策略性的代码.</li>\n</ul>\n<span id=\"more\"></span>\n\n\n<h2 id=\"SRP-单一职责原则\"><a href=\"#SRP-单一职责原则\" class=\"headerlink\" title=\"SRP 单一职责原则\"></a>SRP 单一职责原则</h2><p>最重要的一个原则, 其他原则也基本是上都与这个原则有关.<br>《架构整洁之道》这本书中的例子讲的很好</p>\n<p>任何一个软件模块都应该有且仅有一个被修改的原因.</p>\n<p>任何一个软件模块都应该只对某一类行为者负责.</p>\n<p>多人为了不同的目的修改了同一份源代码,这很容易造成问题的产生. 而避免这种问题产生的方法就是将服务不同行为者的代码进行切分.</p>\n<h2 id=\"OCP-开闭原则\"><a href=\"#OCP-开闭原则\" class=\"headerlink\" title=\"OCP 开闭原则\"></a>OCP 开闭原则</h2><p>设计良好的计算机软件应该易于扩展, 同时抗拒修改.</p>\n<p>如果A组件不想被B组件上发生的修改所影响, 那么就应该让B组件依赖于A组件.</p>\n<p>软件系统不应该依赖其不直接使用的组件</p>\n<p>OCP是我们进行系统架构设计的主导原则,其主要目标是让系统易于扩展,同时限制其每次被修改所影响的范围.实现方式是通过将系统划分为一系列组件,并且将这些组件间的依赖关系按层次结构进行组织,使得高阶组件不会因低阶组件被修改而受到影响.</p>\n<h2 id=\"LSP-里氏替换原则\"><a href=\"#LSP-里氏替换原则\" class=\"headerlink\" title=\"LSP  里氏替换原则\"></a>LSP  里氏替换原则</h2><p>果对于每个类型是S的对象o1都存在一个类型为T的对象o2,能使操作T类型的程序P在用o2替换o1时行为保持不变,我们就可以将S称为T的子类型.(指导类的设计)</p>\n<p>LSP可以且应该被应用于软件架构层面,因为一旦违背了可替换性,该系统架构就不得不为此增添大量复杂的应对机制.</p>\n<h2 id=\"ISP-接口隔离原则\"><a href=\"#ISP-接口隔离原则\" class=\"headerlink\" title=\"ISP 接口隔离原则\"></a>ISP 接口隔离原则</h2><p>任何层次的软件设计如果依赖了它并不需要的东西.就会带来意料之外的麻烦.</p>\n<p>目的是为了解耦,不依赖其不需要的系统,避免牵一发而动全身.</p>\n<p><img src=\"/post/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-7-11%E7%AB%A0/isp-1.png\"></p>\n<p><img src=\"/post/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-7-11%E7%AB%A0/isp-2.png\"></p>\n<h2 id=\"DIP-依赖反转原则\"><a href=\"#DIP-依赖反转原则\" class=\"headerlink\" title=\"DIP  依赖反转原则\"></a>DIP  依赖反转原则</h2><p>如果想要设计一个灵活的系统,在源代码层次的依赖关系中就应该多引用抽象类型,而非具体实现.</p>\n<p>在应用DIP时,我们也不必考虑稳定的操作系统或者平台设施,因为这些系统接口很少会有变动.我们主要应该关注的是软件系统内部那些会经常变动的(volatile)具体实现模块,这些模块是不停开发的,也就会经常出现变更.</p>\n<h3 id=\"稳定的抽象层\"><a href=\"#稳定的抽象层\" class=\"headerlink\" title=\"稳定的抽象层\"></a>稳定的抽象层</h3><p>应在代码中多使用抽象接口，尽量避免使用那些多变的具体实现类. (抽象工厂)<br>不要在具体实现类上创建衍生类.<br>不要覆盖（override）包含具体实现的函数.在这里,控制依赖关系的唯一办法,就是创建一个抽象函数,然后再为该函数提供多种具体实现. (不要引入源代码层级的依赖)<br>应避免在代码中写入与任何具体实现相关的名字,或者是其他容易变动的事物的名字.</p>\n<h3 id=\"🏭工厂模式\"><a href=\"#🏭工厂模式\" class=\"headerlink\" title=\"🏭工厂模式\"></a>🏭工厂模式</h3><p>如果要创建出一个稳定的抽象层, 要对那些容易变的对象的创建过程做一些特殊处理. (因为基本在所有的编程语言中,对象的创建都免不了源代码层级上依赖对象的具体实现.)<br>一般场景下,使用抽象工厂模式解决源代码层级依赖的问题.</p>\n<p><img src=\"/post/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-7-11%E7%AB%A0/factory.png\"><br>中间那条曲线代表了软件架构中抽象层与具体实现层之间的边界,这里,所有跨越这条边界的源代码级别的依赖关系都应该是单向的. 也即具体实现依赖于抽象.</p>\n<hr>\n<p>[参考]<br><a href=\"https://time.geekbang.org/column/intro/100039001\">极客时间-设计模式之美</a><br><a href=\"https://www.aliyundrive.com/s/sPzz5LhPX22\">架构整洁之道-阿里云盘</a></p>\n","tags":["读书笔记","架构整洁之道"]},{"title":"linux下监控实时网速","url":"//post/linux%E4%B8%8B%E7%9B%91%E6%8E%A7%E5%AE%9E%E6%97%B6%E7%BD%91%E9%80%9F.html","content":"<blockquote>\n<p>NetHogs是一个小型的’net top’工具,不像大多数工具那样拖慢每个协议或者是每个子网的速度而是按照进程进行带宽分组.NetHogs NetHogs不需要依赖载入某个特殊的内核模块. 如果发生了网络阻塞你可以启动NetHogs立即看到哪个PID造成的这种状况.这样就很容易找出哪个程序跑飞了然后突然占用你的带宽.</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"命令-nethogs\"><a href=\"#命令-nethogs\" class=\"headerlink\" title=\"命令  nethogs\"></a>命令  nethogs</h2><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># centOS\nsudo yum install nethogs\n\n# ubtntu\nsudo apt-get install nethogs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">nethogs\n\nnethogs -d 5\n\nnethogs eth0 eth1\n\n# -d: delay for refresh rate.\n# -h: display available commands usage.\n# -p: sniff in promiscious mode (not recommended).\n# -t: trace mode.\n# -V: prints Version info. <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/linux%E4%B8%8B%E7%9B%91%E6%8E%A7%E5%AE%9E%E6%97%B6%E7%BD%91%E9%80%9F/nethogs.jpg\" alt=\"效果\"></p>\n","categories":["linux"],"tags":["linux"]},{"title":"六边形架构","url":"//post/%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84.html","content":"<p>分层架构是一种架构风格,本质是避免耦合,使边界清晰.<br>六边形架构 遵循了分层架构的所有约束与特性，其实使用 端口与适配器这个名字更加合适.因为六边形架构的 边数没有意义.</p>\n<p>六边形架构能够充分地区分 领域模型与 输入输出设备之间的界限.</p>\n<p><img src=\"/./%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84/%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84.png\" alt=\"六边形架构\"></p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"1-六边形架构-端口与适配器\"><a href=\"#1-六边形架构-端口与适配器\" class=\"headerlink\" title=\"1. 六边形架构(端口与适配器)\"></a>1. 六边形架构(端口与适配器)</h2><ol>\n<li>一种具有对称性特征的架构风格</li>\n<li>在这种架构中不同的客户通过”平等”的方式与系统交互</li>\n<li>新客户的加入,只需要添加一个新的适配器将客户输入转化成能被系统 API 所理解的参数就行了</li>\n<li>系统输出(图形界面、持久化和消息等)都有一个新建的适配器负责完成相应的转化功能.</li>\n</ol>\n<h2 id=\"2-六边形架构的概念\"><a href=\"#2-六边形架构的概念\" class=\"headerlink\" title=\"2. 六边形架构的概念\"></a>2. 六边形架构的概念</h2><h3 id=\"实体-Entity\"><a href=\"#实体-Entity\" class=\"headerlink\" title=\"实体 Entity\"></a>实体 Entity</h3><p>领域对象的一个 Snapshot.  他不知道自身的存储位置.</p>\n<h3 id=\"存储器-Repositories\"><a href=\"#存储器-Repositories\" class=\"headerlink\" title=\"存储器 Repositories\"></a>存储器 Repositories</h3><p>是获取实体及创建和更改实体的 <code>interface</code>.它们保存一系列方法,用来与数据源通信并返回单个实体或实体列表</p>\n<h3 id=\"交互器-Interactors\"><a href=\"#交互器-Interactors\" class=\"headerlink\" title=\"交互器 Interactors\"></a>交互器 Interactors</h3><p>是用来编排和执行域动作(domain action),的类——可以考虑服务对象或用例对象.它们实现复杂的业务规则和针对特定域动作的验证逻辑.</p>\n<h3 id=\"数据源-Datasource\"><a href=\"#数据源-Datasource\" class=\"headerlink\" title=\"数据源 Datasource\"></a>数据源 Datasource</h3><p>是针对不同 Repository 实现的适配器(Adaptor). 数据源可能是 SQL 数据库的适配器弹性搜索适配器,REST API,CSV 文件, 或者 Hash表 之类的简单适配器.   数据源实现在 Repository 上定义的方法, 并存储获取和推送数据的实现.</p>\n<h3 id=\"层-领域层\"><a href=\"#层-领域层\" class=\"headerlink\" title=\"层: 领域层\"></a>层: 领域层</h3><p>领域模型包含了所有的应用逻辑与规则.</p>\n<p>领域层中不会直接引用技术实现(细节),例如 HTTP 上下文或数据库调用,这样就能够确保在技术方面的改动不会影响到领域层面.</p>\n<h3 id=\"层-端口层\"><a href=\"#层-端口层\" class=\"headerlink\" title=\"层:  端口层\"></a>层:  端口层</h3><p>负责接收与<code>用例</code>相关的所有请求,这些请求负责在领域层中协调工作</p>\n<p>端口层在端口内部作为领域层的边界,在端口外部则扮演了外部实体的角色.</p>\n<h3 id=\"层-适配器层\"><a href=\"#层-适配器层\" class=\"headerlink\" title=\"层: 适配器层\"></a>层: 适配器层</h3><p>这一层的技术实现负责以某种格式接收输入,及产生输出.</p>\n<p>在适配器层不存在领域逻辑,它的唯一职责就是在外部世界与领域层之间进行技术性的转换.</p>\n<h2 id=\"3-六边形架构的优点\"><a href=\"#3-六边形架构的优点\" class=\"headerlink\" title=\"3. 六边形架构的优点\"></a>3. 六边形架构的优点</h2><ul>\n<li>可以轻易的开发用于测试的适配器。</li>\n<li>应用程序和领域模型可以在没有客户和存储机制的条件下进行设计开发</li>\n<li>任何测试客户都可以在用户解密还未完成之前进行开发</li>\n<li>选择持久化机制之前，可以在测试中采用内存资源库来模拟持久化</li>\n<li>如此可以在核心领域上进行持续开发,不需要考虑那些支撑性的技术组件</li>\n</ul>\n<h2 id=\"4-六边形架构的核心思想\"><a href=\"#4-六边形架构的核心思想\" class=\"headerlink\" title=\"4.  六边形架构的核心思想\"></a>4.  六边形架构的核心思想</h2><h3 id=\"关注点分离\"><a href=\"#关注点分离\" class=\"headerlink\" title=\"关注点分离\"></a>关注点分离</h3><ul>\n<li>重心放在领域业务逻辑上, 因为<code>领域</code>的业务逻辑相对更加稳定,体现应用的核心价值,应当优先详尽的设计与测试.</li>\n<li>外部的输入驱动逻辑和输出给外部的被驱动逻辑存在可变性,可替换性,同时可以依赖多种不同的具体技术实现,可以在后一个阶段考虑.</li>\n<li>实际研发过程中还存在输出的外部系统还没有设计与开发好的情况,此时在节奏上也不匹配,可能只有对方的设计文档,甚至更严重的情况下设计文档都没</li>\n<li>输出的外部系统存在多种不同类型的可能,例如在有些情况下你对接的是 OpenStack,有些情况下对接的是 VMware 。</li>\n</ul>\n<h3 id=\"外部可替换\"><a href=\"#外部可替换\" class=\"headerlink\" title=\"外部可替换\"></a>外部可替换</h3><p>内部不关心外部如何使用端口， 外部使用者是可替换的这个原则一开始设计的时候就需要遵守。<br>适配器可以分为2类，“驱动者适配器”和“被驱动者适配器”，也可以称为“输入型适配器”和“输出型适配器”。<br>输出型适配器从表面上看似乎是内部在使用外部，与外部可替换的原则有冲突，这个问题实际上需要通过“依赖倒置”解决。</p>\n<h3 id=\"依赖倒置\"><a href=\"#依赖倒置\" class=\"headerlink\" title=\"依赖倒置\"></a>依赖倒置</h3><p>Adapter  + Repository</p>\n<h3 id=\"可测试性\"><a href=\"#可测试性\" class=\"headerlink\" title=\"可测试性\"></a>可测试性</h3><ul>\n<li>内六边形中的应用程序应当可以在不依赖外部的情况下自行测试.</li>\n<li>通过 接口可以 方便的 进行 mock.</li>\n</ul>\n<hr>\n<p>[参考]<br><a href=\"https://zhuanlan.zhihu.com/p/378085465\">六边形架构的理解</a><br><a href=\"https://www.infoq.cn/article/2014/11/exploring-hexagonal-architecture\">探索六边形架构</a><br><a href=\"https://www.cnblogs.com/zhongpan/p/7606430.html\">深入理解六边形架构</a><br><a href=\"https://www.infoq.cn/article/pjekymkzhmkafgi6ycri\">Netflix 的六边形架构实践</a></p>\n","tags":["架构"]},{"title":"升级hexo-cli的版本","url":"//post/%E5%8D%87%E7%BA%A7hexo-cli%E7%9A%84%E7%89%88%E6%9C%AC.html","content":"<p>最近升级 node版本后,执行  <code>hexo d</code> 就会报错:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">NFO  Copying files from public folder...\nFATAL &#123;\n  err: TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>之后查看其他文档 和 官方文档, 说明要升级  <code>hexo-cli</code> 的版本</p>\n<p><img src=\"/post/%E5%8D%87%E7%BA%A7hexo-cli%E7%9A%84%E7%89%88%E6%9C%AC/hexo-nodeVersion.png\" alt=\"hexo-nodeVersion\"></p>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">&#x2F;&#x2F;以下指令均在Hexo目录下操作，先定位到Hexo目录\n&#x2F;&#x2F;查看当前版本，判断是否需要升级\nhexo version\n\n&#x2F;&#x2F;全局升级hexo-cli\nnpm i hexo-cli -g\n\n&#x2F;&#x2F;再次查看版本，看hexo-cli是否升级成功,第一次未更新成功\nhexo version\n\n&#x2F;&#x2F;安装npm-check，若已安装可以跳过\nnpm install -g npm-check\n\n&#x2F;&#x2F;检查系统插件是否需要升级\nnpm-check\n\n&#x2F;&#x2F;安装npm-upgrade，若已安装可以跳过\nnpm install -g npm-upgrade\n\n&#x2F;&#x2F;更新package.json   -- 这里会提示 更新 hexo版本\nnpm-upgrade\n\n&#x2F;&#x2F;更新全局插件\nnpm update -g\n\n&#x2F;&#x2F;更新系统插件\n&gt; npm update --save\n\n&#x2F;&#x2F;再次查看版本，判断是否升级成功\n&gt; hexo version\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n<hr>\n<p>参考<br><a href=\"https://novnan.github.io/Hexo/update_hexo/\">Hexo版本升级指南</a><br><a href=\"https://hexo.io/zh-cn/docs/\">官方文档</a></p>\n","categories":["hexo"],"tags":["blog","hexo"]},{"title":"大数据-数据仓库大宽表","url":"//post/%E5%A4%A7%E6%95%B0%E6%8D%AE-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%A4%A7%E5%AE%BD%E8%A1%A8.html","content":"<p>什么是大宽表, 为什么要使用大宽表, 大宽表有什么优缺点,  设计大宽表要注意什么?</p>\n<span id=\"more\"></span>\n\n\n\n\n\n<hr>\n<p>参考<br><a href=\"https://zhuanlan.zhihu.com/p/454600683\">一起聊聊数仓大宽表</a></p>\n","categories":["bigdata"],"tags":["bigdata"]},{"title":"大数据相关的一些名词","url":"//post/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E5%90%8D%E8%AF%8D.html","content":"<blockquote>\n<p>据仓库(data warehouse) 也可以简称为 <code>DW</code> <code>DH</code></p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"数据仓库中的分层\"><a href=\"#数据仓库中的分层\" class=\"headerlink\" title=\"数据仓库中的分层:\"></a>数据仓库中的分层:</h2><h3 id=\"1-数据运营层-ODS\"><a href=\"#1-数据运营层-ODS\" class=\"headerlink\" title=\"1. 数据运营层 ODS\"></a>1. 数据运营层 <code>ODS</code></h3><ul>\n<li><p><code>ODS</code>(Operation Data Store):  数据准备区,最接近数据源的一层, 也称为 <code>贴源层</code>. 数据仓库中 源头系统的数据通常会原封不动的存储一份. 这称为为  <code>ODS</code>. 是后续数据仓库加工数据的来源.</p>\n</li>\n<li><p>ODS 数据来源的方式:</p>\n<ul>\n<li>业务数据库<ul>\n<li>经常会使用sqoop来抽取，例如每天定时抽取一次。</li>\n<li>实时方面,可以考虑<code>用canal监听mysql的binlog</code>，实时接入即可.</li>\n</ul>\n</li>\n<li>埋点日志<ul>\n<li>日志一般以文件的形式保存，可以选择用flume定时同步</li>\n<li>也可以采用 spark Streaming, flink 来做实时同步</li>\n<li>kafka也ok</li>\n</ul>\n</li>\n<li>消息队列<ul>\n<li>kafka, rabbitMQ</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-数据仓库层-DW\"><a href=\"#2-数据仓库层-DW\" class=\"headerlink\" title=\"2. 数据仓库层 DW\"></a>2. 数据仓库层 <code>DW</code></h3><blockquote>\n<p>DW 数据分层,由上至下 可以分为:   <code>DWD</code>, <code>DWB</code>, <code>DWS</code></p>\n</blockquote>\n<ul>\n<li><p><code>DWD</code>(data warehouse deatils):   细节数据层,是业务层与数据仓库层的隔离层, 主要是对 ODS做一些数据清洗和  规范化的操作.</p>\n<ul>\n<li>去除空值,脏数据,超过规范极限的…</li>\n</ul>\n</li>\n<li><p><code>DWB</code>(data warehouse base):   数据基础层, 存储的是客观数据,一般用作中间层,可以认为是大量指标的数据层.</p>\n<ul>\n<li>一般是由数据明细层 按照一定的业务需求,生成轻度汇总表. 明细层需要复杂清洗的数据和需要MR处理的数据也经过处理后接入到轻度汇总层.</li>\n<li>日志存储方式: 内表，parquet文件格式.</li>\n<li>日志删除方式: 长久存储.</li>\n<li>表schema: 一般按天创建分区,没有时间概念的按具体业务选择分区字段.</li>\n<li>库与表命名: 库名:dwb,表名:初步考虑格式为:dwb日期业务表名,待定.</li>\n<li>旧数据更新方式: 直接覆盖</li>\n</ul>\n</li>\n<li><p><code>DWS</code>(data warehouse service):  数据服务层, 基于 DWB的基础数据,整合汇总成分析某一个主题域的数据服务层. 一般是宽表. 用于提供后续的业务查询. OLAP 数据分析， 数据分发…</p>\n<ul>\n<li>用户行为轻度聚合</li>\n<li>主要是对  <code>DWD</code> <code>DWB</code> 的数据做一些轻度汇总.</li>\n<li>数据宽表, 按照业务划分,如流量、订单、用户等, 生成字段比较多的宽表,用于提供后续的业务查询,OLAP分析,数据分发等.</li>\n<li>数据生成方式: 由轻度汇总层和明细层数据计算生成.</li>\n<li>日志存储方式:使用impala内表，parquet文件格式</li>\n<li>日志删除方式:长久存储</li>\n<li>表schema:一般按天创建分区,没有时间概念的按具体业务选择分区字段.</li>\n<li>库与表命名:库名:dm,表名:初步考虑格式为：dm日期业务表名,待定.</li>\n<li>旧数据更新方式: 直接覆盖</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-数据服务层-应用层-ADS\"><a href=\"#3-数据服务层-应用层-ADS\" class=\"headerlink\" title=\"3. 数据服务层,应用层  ADS\"></a>3. 数据服务层,应用层  <code>ADS</code></h3><ul>\n<li><p><code>ADS</code>(Application Data Service): 应用数据服务，该层主要是提供数据产品和数据分析使用的数据，一般会存储在ES、mysql等系统中供线上系统使用。<br>我们通过说的报表数据，或者说那种大宽表，一般就放在这里</p>\n</li>\n<li><p><code>ETL</code>(Extract-Transform-Load): 用于描述将数据从来源端经过<code>抽取、转换、加载</code>到目的端的过程。</p>\n</li>\n<li><p><code>宽表</code>:  指字段比较多的数据库表. 通常是指业务主体相关的指标,纬度,属性关联在一起的一张数据库表.</p>\n<ul>\n<li>宽表由于把不同的内容都放在同一张表，宽表已经不符合三范式的模型设计规范：<ul>\n<li>坏处:数据有大量冗余</li>\n<li>好处:查询性能的提高和便捷</li>\n</ul>\n</li>\n<li>宽表的设计广泛应用于数据挖掘模型训练前的数据准备,通过把相关字段放在同一张表中,可以大大提供数据挖掘模型训练过程中迭代计算的消息问题.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/post/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E5%90%8D%E8%AF%8D/%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E5%B1%82%E5%9B%BE.png\" alt=\"简单的分层图\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"[参考]\"></a>[参考]</h2><p><a href=\"https://www.cnblogs.com/amyzhu/p/13513425.html\">数据仓库分层中的ODS、DWD、DWS</a><br><a href=\"https://www.cnblogs.com/wang3680/p/11538451.html\">【漫谈数据仓库】 如何优雅地设计数据分层 ODS DW DM层级</a><br><a href=\"https://www.cnblogs.com/itboys/p/10592871.html\">数据仓库–通用的数据仓库分层方法</a></p>\n","categories":["bigdata"],"tags":["bigdata"]},{"title":"微服务:API Gateway","url":"//post/%E5%BE%AE%E6%9C%8D%E5%8A%A1-API-Gateway.html","content":"<h2 id=\"什么是-API网关\"><a href=\"#什么是-API网关\" class=\"headerlink\" title=\"什么是 API网关\"></a>什么是 API网关</h2><p>API网关是一个服务器,是系统的唯一入口.  从面向对象设计的角度看，它与外观模式类似.</p>\n<p>API网关封装了系统内部架构,为每个客户端提供一个定制的API.它可能还具有其它职责,如身份验证、监控、负载均衡、缓存、协议转换、限流熔断、静态响应处理.</p>\n<p>API网关方式的核心要点是: 所有的客户端和消费端都通过统一的网关接入微服务,在网关层处理所有的非业务功能. 通常，网关也是提供<code>REST/HTTP</code>的访问API.</p>\n<h2 id=\"网关应该具有那些能力\"><a href=\"#网关应该具有那些能力\" class=\"headerlink\" title=\"网关应该具有那些能力\"></a>网关应该具有那些能力</h2><p>微服务网关作为微服务后端服务的统一入口, 它可以统筹管理后端服务,主要分为<code>数据平面</code>和<code>控制平面</code>:</p>\n<p><code>数据平面</code>主要功能是接入用户的HTTP请求和微服务被拆分后的聚合.使用微服务网关统一对外暴露后端服务的API和契约,路由和过滤功能正是网关的核心能力模块.另外,<strong>微服务网关可以实现拦截机制和专注跨横切面的功能</strong>,包括协议转换、安全认证、熔断限流、灰度发布、日志管理、流量监控等.</p>\n<p><code>控制平面</code>主要功能是对后端服务做统一的管控和配置管理.例如,可以控制网关的弹性伸缩; 可以统一下发配置; 可以对网关服务添加标签; 可以在微服务网关上通过配置Swagger功能统一将后端服务的API契约暴露给使用方, 完成文档服务, 提高工作效率和降低沟通成本.</p>\n<ul>\n<li>限流</li>\n<li>熔断</li>\n<li>安全</li>\n<li>缓存</li>\n<li>重试</li>\n<li>负载均衡</li>\n<li>反向路由</li>\n<li>认证,鉴权</li>\n<li>日志收集</li>\n<li>监控</li>\n<li>IP列表:黑名单,白名单</li>\n<li>流量染色</li>\n<li>协议转换</li>\n<li>API管理</li>\n</ul>\n<p>下图 是 Kong 官方  的一个简单架构图.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/majunmin/image/etcd/20220818200500.png\"></p>\n<h2 id=\"常见的开源网关对比\"><a href=\"#常见的开源网关对比\" class=\"headerlink\" title=\"常见的开源网关对比\"></a>常见的开源网关对比</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>Apache APISIX</th>\n<th>Kong</th>\n<th>Tyk</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>项目归属</td>\n<td>Apache</td>\n<td>Kong Inc</td>\n<td></td>\n</tr>\n<tr>\n<td>技术架构</td>\n<td>Nginx + etcd</td>\n<td>Nginx + postgres</td>\n<td>Golang + Redis</td>\n</tr>\n<tr>\n<td>部署模式</td>\n<td>单机&amp;集群</td>\n<td>单机&amp;集群</td>\n<td>单机&amp;集群</td>\n</tr>\n<tr>\n<td>单核Qps(开启限流和 prometheus)</td>\n<td>18,000</td>\n<td>1700</td>\n<td></td>\n</tr>\n<tr>\n<td>平均延时</td>\n<td>0.2ms</td>\n<td>2ms</td>\n<td></td>\n</tr>\n<tr>\n<td>配置生效时间</td>\n<td>时间通知, 低于 1ms</td>\n<td>定时轮询 5s</td>\n<td></td>\n</tr>\n<tr>\n<td>支持配置回滚</td>\n<td>[x]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>热插件更新</td>\n<td>[x]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>用户自定义负载均衡算法，路由</td>\n<td>[x]</td>\n<td>[]</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>控制台</td>\n<td>[x]</td>\n<td>[]</td>\n<td>[]</td>\n</tr>\n</tbody></table>\n","tags":["微服务","gateway"]},{"title":"微服务 Trace","url":"//post/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Trace.html","content":"<h2 id=\"Spection-Trace-语义\"><a href=\"#Spection-Trace-语义\" class=\"headerlink\" title=\"Spection  Trace 语义\"></a>Spection  Trace 语义</h2><h3 id=\"Trace\"><a href=\"#Trace\" class=\"headerlink\" title=\"Trace\"></a>Trace</h3><p>代表一个调用链.</p>\n<p>通常， 一个 Trace 可以被理解为一系列span 组成的有向无环图(DAG), span 之间的边称为  Reference.</p>\n<h3 id=\"Span\"><a href=\"#Span\" class=\"headerlink\" title=\"Span\"></a>Span</h3><p><code>Span</code> 表示一个跨进程的 RPC 或者进程内部的一个过程.</p>\n<p>每个span 可以包含一些状态:<br><code>operate_name</code><br><code>start_timestampe</code><br><code>end_timestamp</code><br><code>Tags</code>: 一系列 kv 集合<br><code>Logs</code>: 一系列 kv 集合,并且携带时间戳<br><code>SpanContext</code>:<br><code>Reference</code>: 通过 SpanContext 关联其他 Span</p>\n<h3 id=\"SpanContext\"><a href=\"#SpanContext\" class=\"headerlink\" title=\"SpanContext\"></a>SpanContext</h3><p>SpanContext  封装了一个可以用来指向特定 Span 的状态,用于在进程间(内)传递. 通过在进程间传递,在分布式环境中构建一个DAG图.</p>\n<p>span 必须去提供方法访问 <code>SpanContext</code>,<code>SpanContext</code> 代表跨越进程边界,传递到下级Span的状态.(包含  <code>trace_id</code> <code>span_id</code> <code>sampled</code> 元组).</p>\n<p><code>SpanContext</code> 在跨越进程边界,和在追踪图中创建边界的时候会使用.</p>\n<h3 id=\"Logs\"><a href=\"#Logs\" class=\"headerlink\" title=\"Logs\"></a>Logs</h3><p> 每个<code>Span</code>可以进行多次Logs操作,每一次Logs操作, 都需要一个带<code>时间戳</code>的时间名称, 以及可选的任意大小的存储结构.<br><a href=\"https://github.com/opentracing/specification/blob/master/semantic_conventions.md#log-fields-table\">Standard LogKeys</a></p>\n<h3 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h3><p>每个 <code>Span</code> 可以有多个键值对(key:value)形式的<code>Tags</code>, <code>Tags</code>是没有时间戳的,支持简单的对<code>Span</code>进行注解和补充.</p>\n<p><a href=\"https://github.com/opentracing/specification/blob/master/semantic_conventions.md#span-tags-table\">Standard Tags</a></p>\n<h3 id=\"Baggage\"><a href=\"#Baggage\" class=\"headerlink\" title=\"Baggage\"></a>Baggage</h3><p><code>Baggage</code> 是存储在 <code>SpanContext</code> 中的一个键值对(SpanContext)集合. 它会在一条追踪链路上的所有span内全局传输. 在这种情况下, <code>Baggage</code>会随着Trace一同传播.(<code>Baggage</code>可理解为随着<code>trace</code>运行过程传送的行李).</p>\n<p><code>Baggage</code> 拥有强大功能,也会有很大的消耗.  由于Baggage的全局传输,如果包含的数量量太大，或者元素太多，它将降低系统的吞吐量或增加RPC的延迟.</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p>Reference 有两种类型:</p>\n<ul>\n<li>ChildOf</li>\n<li>FollowsFrom</li>\n</ul>\n<hr>\n<p><a href=\"https://opentracing-contrib.github.io/opentracing-specification-zh/specification.html\">OpenTracing语义标准</a><br><a href=\"https://opentracing.io/specification/\">The OpenTracing Semantic Specification</a><br><a href=\"https://github.com/opentracing/specification/blob/master/specification.md\">The OpenTracing Semantic Specification-github</a></p>\n","tags":["微服务","trace"]},{"title":"洋葱架构","url":"//post/%E6%B4%8B%E8%91%B1%E6%9E%B6%E6%9E%84.html","content":"<p><img src=\"/./%E6%B4%8B%E8%91%B1%E6%9E%B6%E6%9E%84/%E6%B4%8B%E8%91%B1%E6%9E%B6%E6%9E%84.webp\" alt=\"洋葱架构\"></p>\n<span id=\"more\"></span>\n\n<p>领域是一个知识范畴,他指的是我们的软件要模拟的业务知识。 领域驱动设计的核心是 <code>领域模型</code>,它对一个领域的流程和规则有着深刻的理解,洋葱架构实现了这一概念,并极大地改善了代码的品质,降低了复杂性,并且支持不断地发展企业系统.</p>\n<hr>\n<p><a href=\"https://www.infoq.cn/article/zOlhF7uu455xOVvQwWv3\">详解”洋葱架构”</a><br><a href=\"https://medium.com/expedia-group-tech/onion-architecture-deed8a554423\">Onion Architecture</a></p>\n","tags":["架构"]},{"title":"简单计算器实现-逆波兰表达式","url":"//post/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8%E5%AE%9E%E7%8E%B0-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","content":"<h1 id=\"简单计算器的实现-逆波兰表达式\"><a href=\"#简单计算器的实现-逆波兰表达式\" class=\"headerlink\" title=\"简单计算器的实现-逆波兰表达式\"></a>简单计算器的实现-逆波兰表达式</h1><blockquote>\n<p>一般也就是分为两步</p>\n<ol>\n<li>将中缀表达式 解析为  后缀(前缀)表达式</li>\n<li>eval 计算后缀表达式解析 出 结果</li>\n</ol>\n</blockquote>\n<span id=\"more\"></span>\n\n\n<ol>\n<li>中缀表达式</li>\n</ol>\n<p>一般的算数表达式, 操作符以中缀形式出现在操作数之间</p>\n<ol start=\"2\">\n<li>前缀表达式</li>\n</ol>\n<p>前缀表达式是一种没有括号的算术表达式,与中缀表达式不同的是，其将运算符写在前面，操作数写在后面.<br>为纪念其发明者波兰数学家Jan Lukasiewicz，前缀表达式也称为<code>波兰式</code>.</p>\n<ol start=\"3\">\n<li>后缀表达式</li>\n</ol>\n<p>后缀表达式指的是不包含括号,运算符放在两个运算对象的后面,所有的计算按运算符出现的顺序,<br>严格从左向右进行(不再考虑运算符的优先规则). 也称为 <code>逆波兰表达式</code></p>\n<p>中缀表达式: <code>1-(2+3)</code><br>前缀表达式: <code>1 2 3 + -</code><br>后缀表达式: <code>- 1 + 2 3</code></p>\n<h2 id=\"中缀表达式-转-前缀表达式\"><a href=\"#中缀表达式-转-前缀表达式\" class=\"headerlink\" title=\"中缀表达式 转 前缀表达式\"></a>中缀表达式 转 前缀表达式</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">((a+(b*c))+(((d*e)+f)*g)\n\n前缀表达式\n++a*bc*+*efg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同样是使用栈的方式解析, 前缀表达式的解析 和 后缀表达式的解析 方式相反, 从右向左</p>\n<ol>\n<li>解析 中缀表达式</li>\n</ol>\n<p>从右至左解析中缀表达式</p>\n<ol>\n<li>遇到数字 直接输出</li>\n<li>遇到操作符</li>\n</ol>\n<p>2.1  ‘)’直接入栈<br>2.2  ‘(‘ 将符号栈中元素移除并输出, 直到遇到右括号<code>)</code>只移除,不输出<br>2.3 运算符: 将符号栈中的元素移除出栈并输出, 直到遇到比当前符号优先级更高的符号或者<code>)</code>.<br>          将当前符号入栈<br>3. 扫描完后, 将栈中剩余符号依次输出</p>\n<p>for example<br>下面以<code>a+b*c+(d*e+f)*g</code>为例子来看看转换过程:<br>面在描述栈的情况是直接用文字描述了,由左到右为栈底到栈顶.空表示栈空</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. 从后向左遍历表达式: g\n\n输出:  g \n符号栈:\n\n2. 从后向左遍历表达式: *\n\n输出:  g \n符号栈: *\n\n3. 从后向左遍历表达式: )\n\n输出:  g \n符号栈: )*\n\n4. 从后向左遍历表达式: f\n\n输出:  fg \n符号栈: )*\n\n5. 从后向左遍历表达式: +\n\n输出:  fg \n符号栈: +)*\n\n6. 从后向左遍历表达式: e\n\n输出:  efg \n符号栈: +)*\n\n7. 从后向左遍历表达式: *\n\n输出:  efg \n符号栈: *+)*\n\n8. 从后向左遍历表达式: d\n\n输出:  defg \n符号栈: *+)*\n\n9. 从后向左遍历表达式: (\n\n输出:  +*defg \n符号栈: *\n\n10. 从后向左遍历表达式: +\n\n输出:  *+*defg \n符号栈: +\n\n11. 从后向左遍历表达式: c\n\n输出:  c*+*defg \n符号栈: +\n\n12. 从后向左遍历表达式: *\n\n输出:  c*+*defg \n符号栈: *+\n\n\n13. 从后向左遍历表达式: b\n\n输出:  bc*+*defg \n符号栈: *+\n\n14. 从后向左遍历表达式: +\n\n输出:  *bc*+*defg \n符号栈: ++\n\n15. 从后向左遍历表达式: a\n\n输出:  a*bc*+*defg \n符号栈: ++\n\n16. 将符号栈中剩余的 符号压入 结果集\n\n输出:  ++a*bc*+*defg \n符号栈: \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>解析 前缀表达式</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">/**\n * 基本计算器3 &lt;/br>\n *\n * @author majunmin\n * @description\n * @datetime 2021-09-25 19:47\n * @since\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeetCode_0772</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> pe <span class=\"token operator\">=</span> <span class=\"token function\">parsePE</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">evalPE</span><span class=\"token punctuation\">(</span>pe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">parsePE</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> opStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> chars<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> chars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    num <span class=\"token operator\">=</span> c <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    num <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    opStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>opStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 运算符</span>\n                    <span class=\"token class-name\">String</span> op <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>opStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>opStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span>opStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    opStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>opStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 解析 波兰表达式\n     * ++a*bc**+*efg\n     *\n     * @param pe\n     * @return\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">evalPE</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> pe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 从右向左遍历</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> pe<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> curStr <span class=\"token operator\">=</span> pe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curStr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> curStr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>curStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>curStr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"+\"</span><span class=\"token operator\">:</span>\n                        num <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"-\"</span><span class=\"token operator\">:</span>\n                        num <span class=\"token operator\">=</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"*\"</span><span class=\"token operator\">:</span>\n                        num <span class=\"token operator\">=</span> num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"/\"</span><span class=\"token operator\">:</span>\n                        num <span class=\"token operator\">=</span> num1 <span class=\"token operator\">/</span> num2<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexcept error.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 将中最表达式转化为  逆波兰表达式\n     * 1. 遇到数字直接 放入 list\n     * 2. 遇到 符号\n     * 2.1  `(` 直接放入\n     * 2.2  `)` 将栈中 所有的字符 pop 放入到结果集\n     * 2.3  `符号`\n     * 2.3.1 符号优先级 &lt;= 栈顶元素优先级,直接放入\n     * 2.3.2 符号优先级 > 栈顶元素优先级,将栈中元素pop 并放入结果集, 直到遇到 `(` 或者 栈 为空\n     *\n     * @param s\n     * @return\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">parseRPE</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> rpe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 是一个数字</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    num <span class=\"token operator\">=</span> c <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    num <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//判断数字</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    rpe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            rpe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                            stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// + - * /</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        rpe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            rpe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            rpe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> rpe<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"+\"</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"-\"</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"*\"</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"/\"</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected value: \"</span> <span class=\"token operator\">+</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n<h2 id=\"中缀表达式-转-后缀表达式\"><a href=\"#中缀表达式-转-后缀表达式\" class=\"headerlink\" title=\"中缀表达式 转 后缀表达式\"></a>中缀表达式 转 后缀表达式</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">((a+(b*c))+(((d*e)+f)*g)\n\n后缀表达式\nabc*+de*f+g*+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>使用栈的方式解析,解析步骤:</p>\n<p>从左到右扫描中缀表达式, </p>\n<ol>\n<li>遇到数字直接输出</li>\n<li>遇到运算符</li>\n</ol>\n<p>2.1 ‘(‘ 直接入栈<br>2.2 ‘)’ 将符号栈中的元素移除出栈并输出, 直到 <code>(</code>, <code>(</code> 只出栈,不输出<br>2.3 <code>+-*/</code>: 将符号栈中的元素移除出栈并输出, 直到遇到比当前符号优先级更低的符号或者’(‘.<br>          将当前符号入栈<br>3. 扫描完后, 将栈中剩余符号依次输出</p>\n<p>for example:<br>下面以<code>a+b*c+(d*e+f)*g</code>为例子来讲讲计算机的转换过程下.<br>面在描述栈的情况是直接用文字描述了,由左到右为栈底到栈顶.空表示栈空</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n1. 由左向右遍历表达式,首先遇到a,直接将其输出.\n\n此时输出为：a\n栈的情况为：空\n\n2. 继续遍历,遇到+,将其放入栈中.\n\n此时输出为：a\n栈的情况为：+\n\n3. 继续遍历,遇到b,直接将其输出.\n\n此时输出为：ab\n栈的情况为：+\n\n4. 继续遍历，遇到*，因为*的优先级大于栈顶的+，所以将*放入栈内。\n\n此时输出为：ab\n栈的情况为：+*\n\n5. 继续遍历,遇到c,直接将其输出.\n\n此时输出为：abc\n栈的情况为：+*\n\n6. 继续遍历,遇到+,因为+的优先级低于栈顶的*, 故将*弹出; 然后新的栈顶元素的+与这个+优先级相同, 故也要弹出现在栈顶的+;然后栈空了,将现在这个+放入栈中\n\n此时输出为：abc*+\n栈的情况为：+\n\n7. 继续遍历,遇到(,直接将其放入栈中,不遇到)不会将(弹出\n\n此时输出为：abc*+\n栈的情况为：+(\n\n8. 继续遍历,遇到d,直接将其输出.\n\n此时输出为：abc*+d\n栈的情况为：+(\n\n9. 继续遍历,遇到*,因为栈顶为(,不遇到)不将(弹出,故直接将*放入栈中\n\n此时输出为：abc*+d\n栈的情况为：+(*\n\n10. 继续遍历，遇到e，直接将其输出。\n\n此时输出为：abc*+de\n栈的情况为：+(*\n\n11. 继续遍历，遇到+，因为+比栈顶*的优先级低，故将*弹出；新的栈顶元素为(,不遇到)不弹出(,故将+放入栈中。\n\n此时输出为：abc*+de*\n栈的情况为：+(+\n\n12. 继续遍历，遇到f，直接将其输出。\n\n此时输出为：abc*+de*f\n\n栈的情况为：+(+\n\n13. 继续遍历，遇到),直接将栈中元素依次弹出并输出直到遇到(为止,  注意：(弹出但不输出\n\n此时输出为：abc*+de*f+\n栈的情况为：+\n\n14. 继续遍历，遇到*，因为*的优先级大于栈顶元素+的优先级，故直接将*入栈。\n\n此时输出为：abc*+de*f+\n栈的情况为：+*\n\n15. 继续遍历，遇到g，直接将其输出。\n\n此时输出为：abc*+de*f+g\n栈的情况为：+*\n\n16. 继续遍历，为空，遍历结束。将栈内元素依次弹出。\n\n此时输出为：abc*+de*f+g*+\n栈的情况为：空<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此，中缀表达式转后缀已经全部完成,结果为<code>abc*+de*f+g*+</code></p>\n<p>解析 会解析后缀表达就很简单了</p>\n<p>leetCode 772：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 基本计算器3 &lt;/br>\n *\n * @author majunmin\n * @description\n * @datetime 2021-09-25 19:47\n * @since\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeetCode_0772</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> rpe <span class=\"token operator\">=</span> <span class=\"token function\">getRPE</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>rpe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">/**\n     * rpe 表达式仅包含 &#123;@text 数字 +-/*&#125;\n     *\n     * @param rpe\n     * @return\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> rpe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> item <span class=\"token operator\">:</span> rpe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">validOperator</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"+\"</span><span class=\"token operator\">:</span>\n                        result <span class=\"token operator\">=</span> num2 <span class=\"token operator\">+</span> num1<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"-\"</span><span class=\"token operator\">:</span>\n                        result <span class=\"token operator\">=</span> num2 <span class=\"token operator\">-</span> num1<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"*\"</span><span class=\"token operator\">:</span>\n                        result <span class=\"token operator\">=</span> num2 <span class=\"token operator\">*</span> num1<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                        result <span class=\"token operator\">=</span> num2 <span class=\"token operator\">/</span> num1<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">validOperator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> operator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>operator<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>operator<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">||</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>operator<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>operator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">/**\n     * 将中最表达式转化为  逆波兰表达式\n     * 1. 遇到数字直接 放入 list\n     * 2. 遇到 符号\n     * 2.1  `(` 直接放入\n     * 2.2  `)` 将栈中 所有的字符 pop 放入到结果集\n     * 2.3  `符号`\n     * 2.3.1 符号优先级 &lt;= 栈顶元素优先级,直接放入\n     * 2.3.2 符号优先级 > 栈顶元素优先级,将栈中元素pop 并放入结果集, 直到遇到 `(` 或者 栈 为空\n     *\n     * @param s\n     * @return\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRPE</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> rpe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 是一个数字</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    num <span class=\"token operator\">=</span> c <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    num <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//判断数字</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    rpe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            rpe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                            stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// + - * /</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        rpe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            rpe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            rpe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> rpe<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"+\"</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"-\"</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"*\"</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"/\"</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected value: \"</span> <span class=\"token operator\">+</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Solution</span> leetCode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LeetCode_0772</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>leetCode<span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6 - 4/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>leetCode<span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(2 + 6*3 +5 - (3*14/7+2) *5)+3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<p><a href=\"https://github.com/majunmin/algorithm-learning/blob/master/src/main/java/com/majm/leetcode/LeetCode_0772.java\">代码实现</a></p>\n<hr>\n<p><a href=\"https://www.cnblogs.com/wkfvawl/p/12864789.html\">数据结构——中缀转后缀表达式</a><br><a href=\"https://cloud.tencent.com/developer/article/1596127\">彻底用图解教会你——中缀表达式转后缀和前缀</a></p>\n","categories":["Algorithm"],"tags":["算法","Algorithm","逆波兰表达式"]},{"title":"算法-线段树","url":"//post/%E7%AE%97%E6%B3%95-%E7%BA%BF%E6%AE%B5%E6%A0%91.html","content":"<p>线段树是经常用来维护区间信息的数据结构,<br>线段树可以在 O(logN) 的时间复杂度内实现<code>单点修改</code>,<code>区间修改</code>,<code>区间查询</code>(<code>区间求和</code>,<code>区间最大值</code>,<code>区间最小值</code>) 等操作.</p>\n<h2 id=\"线段树的数据结构\"><a href=\"#线段树的数据结构\" class=\"headerlink\" title=\"线段树的数据结构\"></a>线段树的数据结构</h2><p><img src=\"/./%E7%AE%97%E6%B3%95-%E7%BA%BF%E6%AE%B5%E6%A0%91/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\" alt=\"线段树数据结构\"></p>\n<p>线段树是一种近似的完全二叉树,每个节点代表一个区间,节点的权值. 根节点是整个区间.每个节点的左孩子是该节点所代表的的区间的左半部分,右孩子是右半部分.</p>\n<p>线段树采用 类似堆的 数组  来存储数据.</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li>每个区间的长度是区间内整数的个数;</li>\n<li>叶子节点长度为1,不能再分;</li>\n<li>若一个结点对应的区间是[left,right], <code>mid = (left + right) / 2</code> 则其子区间对应的节点分别是[left,mid]和[mid+1,right];</li>\n<li>线段树的高度是;log2(right- left + 1)</li>\n<li>线段树把区间上的任意一条线段都分成不超过 <code>2log2N</code></li>\n</ul>\n<h3 id=\"线段树的定义\"><a href=\"#线段树的定义\" class=\"headerlink\" title=\"线段树的定义\"></a>线段树的定义</h3><h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><p>​</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\trootIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// index = 1 开始编号</span>\n<span class=\"token keyword\">type</span> Segment <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tleft  <span class=\"token builtin\">int</span> <span class=\"token comment\">// 区间起始点</span>\n\tright <span class=\"token builtin\">int</span> <span class=\"token comment\">// 区间 结束点</span>\n\tcount <span class=\"token builtin\">int</span> <span class=\"token comment\">// 统计值</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> SegmentTree <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tm        <span class=\"token builtin\">int</span>\n\tsegments <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Segment\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewSegmentTree</span><span class=\"token punctuation\">(</span>m <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>SegmentTree <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>SegmentTree<span class=\"token punctuation\">&#123;</span>\n\t\tm<span class=\"token punctuation\">:</span>        m<span class=\"token punctuation\">,</span>\n\t\tsegments<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Segment<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">buildSegmentTreeInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tst<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Segment<span class=\"token punctuation\">&#123;</span>\n\t\tleft<span class=\"token punctuation\">:</span>  left<span class=\"token punctuation\">,</span>\n\t\tright<span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">,</span>\n\t\tcount<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> left <span class=\"token operator\">==</span> right <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tmid <span class=\"token operator\">:=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">-</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span>\n\tst<span class=\"token punctuation\">.</span><span class=\"token function\">buildSegmentTreeInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tst<span class=\"token punctuation\">.</span><span class=\"token function\">buildSegmentTreeInternal</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>data <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tleft<span class=\"token punctuation\">,</span> right <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>m\n\ti <span class=\"token operator\">:=</span> rootIndex\n\t<span class=\"token keyword\">for</span> left <span class=\"token operator\">&lt;</span> right <span class=\"token punctuation\">&#123;</span>\n\t\tmid <span class=\"token operator\">:=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\tst<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n\t\t<span class=\"token keyword\">if</span> data <span class=\"token operator\">&lt;=</span> mid <span class=\"token punctuation\">&#123;</span>\n\t\t\tright <span class=\"token operator\">=</span> mid\n\t\t\ti <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tleft <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\t\ti <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tst<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>data <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tleft<span class=\"token punctuation\">,</span> right <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>m\n\ti <span class=\"token operator\">:=</span> rootIndex\n\n\t<span class=\"token keyword\">for</span> left <span class=\"token operator\">&lt;</span> right <span class=\"token punctuation\">&#123;</span>\n\t\tst<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span>\n\t\tmid <span class=\"token operator\">:=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">-</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span>\n\t\t<span class=\"token keyword\">if</span> data <span class=\"token operator\">&lt;=</span> mid <span class=\"token punctuation\">&#123;</span>\n\t\t\tright <span class=\"token operator\">=</span> mid\n\t\t\ti <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tleft <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\t\ti <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tst<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// query</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> rootIndex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>left <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> right <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> index <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// terminate</span>\n\tseg <span class=\"token operator\">:=</span> st<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> seg<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> left <span class=\"token operator\">&amp;&amp;</span> seg<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> right <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> seg<span class=\"token punctuation\">.</span>count\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tmid <span class=\"token operator\">:=</span> seg<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>seg<span class=\"token punctuation\">.</span>right<span class=\"token operator\">-</span>seg<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span>\n\t<span class=\"token keyword\">if</span> mid <span class=\"token operator\">>=</span> right <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//区间在左子节点</span>\n\t\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> mid <span class=\"token operator\">&lt;</span> left <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 区间在右子节点</span>\n\t\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">countInternal</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">getKth</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> k <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">getKthInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> rootIndex<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">*</span>SegmentTree<span class=\"token punctuation\">)</span> <span class=\"token function\">getKthInternal</span><span class=\"token punctuation\">(</span>left <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> right <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> index <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> k <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tseg <span class=\"token operator\">:=</span> st<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> left <span class=\"token operator\">==</span> seg<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> seg<span class=\"token punctuation\">.</span>right <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> k <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//第 Kth 大值不存在</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> seg<span class=\"token punctuation\">.</span>left\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\trightSeg <span class=\"token operator\">:=</span> st<span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\tmid <span class=\"token operator\">:=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">-</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span>\n\t<span class=\"token keyword\">if</span> rightSeg<span class=\"token punctuation\">.</span>count <span class=\"token operator\">></span> k <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">getKthInternal</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">getKthInternal</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span> k<span class=\"token operator\">-</span>rightSeg<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<hr>\n<p>[参考]<br><a href=\"https://oi-wiki.org/ds/seg/\">线段树</a><br><a href=\"https://zhuanlan.zhihu.com/p/34150142\">知乎-线段树</a></p>\n","tags":["algorithm","线段树","区间"]},{"title":"自己写一个spring-boot-start","url":"//post/%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AAspring-boot-start.html","content":"<blockquote>\n<p>Spring Boot由众多Starter组成，随着版本的推移Starter家族成员也与日俱增。在传统Maven项目中通常将一些层、组件拆分为模块来管理， 以便相互依赖复用，在Spring Boot项目中我们则可以创建自定义Spring Boot Starter来达成该目的。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"1-创建一个-maven-工程\"><a href=\"#1-创建一个-maven-工程\" class=\"headerlink\" title=\"1. 创建一个 maven 工程\"></a>1. 创建一个 maven 工程</h2><p>pom 文件如下</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.majm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>sample-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>sample-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.6.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- @ConfigurationProperties annotation processing (metadata for IDEs)\n                 生成spring-configuration-metadata.json类，需要引入此类--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-configuration-processor<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-autoconfigure<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意 依赖 <code>spring-boot-configuration-processor</code> 是为了在编译时生成 <code>spring-configuration-metadata.json</code>文件，此文件主要是给 IDE 使用，用于提示使用。<br><em>example</em>: 如在<code>Intellij idea</code>中，当配置此 jar 相关配置属性在<code>application.yml</code>,你可以用<code>cmd + 鼠标左键</code>，IDE会跳转到你配置此属性的类中。</p>\n<p>这里说一下 artifactId 命名问题， spring 官方Start 通用命名规则为 <code>spring-boot-starter-&#123;name&#125;</code><br>                              spring 官方建议非官方 start 命名规范  <code>&#123;name&#125;-spring-boot-starter</code></p>\n<h2 id=\"2-编写-Service\"><a href=\"#2-编写-Service\" class=\"headerlink\" title=\"2.  编写 Service\"></a>2.  编写 Service</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 业务类 &lt;/br>\n *\n * @author majunmin\n * @description\n * @datetime 2019-07-04 17:59\n * @since\n */</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleService</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> desc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"3-编写属性类\"><a href=\"#3-编写属性类\" class=\"headerlink\" title=\"3. 编写属性类\"></a>3. 编写属性类</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 属性类 &lt;/br>\n *\n * @author majunmin\n * @description\n * @datetime 2019-07-04 17:53\n * @since\n */</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.service\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleProperties</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-编写自动配置类\"><a href=\"#4-编写自动配置类\" class=\"headerlink\" title=\"4. 编写自动配置类\"></a>4. 编写自动配置类</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 自动配置类 &lt;/br>\n *\n * 1. @ConditionalOnClass，当classpath下发现该类的情况下进行自动配置。\n * 2. @ConditionalOnMissingBean，当Spring Context中不存在该Bean时。\n * 3. @ConditionalOnProperty(prefix = \"example.service\",value = \"enabled\",havingValue = \"true\")，当配置文件中example.service.enabled=true时。\n *\n * @author majunmin\n * @description\n * @datetime 2019-07-04 17:57\n * @since\n */</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@ConditionalOnClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExampleService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExampleProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleAutoConfig</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ExampleProperties</span> exampleProperties<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExampleAutoConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExampleProperties</span> exampleProperties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exampleProperties <span class=\"token operator\">=</span> exampleProperties<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span>\n    <span class=\"token annotation punctuation\">@ConditionalOnProperty</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"example.service\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"enabled\"</span><span class=\"token punctuation\">,</span> havingValue <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">ExampleService</span> <span class=\"token function\">exampleService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExampleService</span><span class=\"token punctuation\">(</span>exampleProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> exampleProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"5-添加spring-factories\"><a href=\"#5-添加spring-factories\" class=\"headerlink\" title=\"5. 添加spring.factories\"></a>5. 添加spring.factories</h2><p><code>在resources/META-INF/</code>下创建 <code>spring.factories</code> 文件</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">\\\n  com.majm.config.ExampleAutoConfig</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>ok 完成， 执行 <code>mvn clean install -DskipTests</code>,打包安装到本地</p>\n<h2 id=\"6-Test\"><a href=\"#6-Test\" class=\"headerlink\" title=\"6. Test\"></a>6. Test</h2><p>好了 来测试一下。</p>\n<p>另外创建一个SpringBoot工程，在maven中引入这个starter依赖， 然后在单元测试中引入这个Service看看效果。</p>\n<ol>\n<li><p>pom文件 引入依赖<br>···xml</p>\n <dependency>\n     <groupId>com.majm</groupId>\n     <artifactId>sample-spring-boot-starter</artifactId>\n     <version>1.0.0-SNAPSHOT</version>\n </dependency>\n···\n</li>\n<li><p>在 <code>application.yml</code> 中 添加属性</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">com.service:\n  enabled: true\n  name: aaa\n  desc: bbb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>编写 Controller</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">ExampleService</span> exampleService<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> exampleService<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>返回结果如下<br><img src=\"/post/%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AAspring-boot-start/result.jpg\" alt=\"result\"></p>\n<p>OK！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结下Starter的工作原理:</p>\n<ol>\n<li>Spring Boot在启动时扫描项目所依赖的JAR包，寻找包含 <code>spring.factories</code> 文件的JAR包</li>\n<li>根据 <code>spring.factories</code> 配置加载AutoConfigure类</li>\n<li>根据 <code>@Conditional</code> 注解的条件，进行自动配置并将Bean注入Spring Context</li>\n</ol>\n<h2 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a>代码地址</h2><p><a href=\"git@github.com:majunmin/sample-spring-boot-start.git\">Github</a></p>\n","categories":["spring"],"tags":["spring","springboot"]},{"title":"记录一次kafka消费慢解决","url":"//post/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1kafka%E6%B6%88%E8%B4%B9%E6%85%A2%E8%A7%A3%E5%86%B3.html","content":"<blockquote>\n<p>最近使用kafka, 消费者速度一直跟不上，造成线上消息堆积到了 101亿，困扰了好几天，终于解决了。（其实很简单，因为 kafka消费速度本来也不慢 😂😂😂😂,其实异步+ 批量消费就满可以达到要求了）</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>主要原因有两个，</p>\n<ol>\n<li>对 @Async 注解的不理解</li>\n<li>批量消费</li>\n<li>– 还有就是通过这次事件，也了解了点 自动提交与 手动提交的概念</li>\n</ol>\n<p>一般 kafka 消费慢的 解决思路有一下几种：</p>\n<ol>\n<li>增加分区数</li>\n<li>批量消费(增加拉取批次， 默认 500)</li>\n<li>每次拉取后，本地启线程池异步消费 (注意 kafkaConsumer 是 非线程安全的)</li>\n<li>如果消费多个topic的话，修改分区策略为 StickyAssignor.class(默认 RangeAssignor.class)</li>\n</ol>\n<p>这里使用， spring-kafka 注解形式</p>\n<p>kafka 配置</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">KafkaListenerContainerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConcurrentMessageListenerContainer</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listenerContainerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ConcurrentKafkaListenerContainerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentKafkaListenerContainerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    factory<span class=\"token punctuation\">.</span><span class=\"token function\">setConsumerFactory</span><span class=\"token punctuation\">(</span><span class=\"token function\">consumerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 飘零消费 需要设置 为 true</span>\n    factory<span class=\"token punctuation\">.</span><span class=\"token function\">setBatchListener</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 单机消费者数量</span>\n    factory<span class=\"token punctuation\">.</span><span class=\"token function\">setConcurrency</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 拉取超时时间</span>\n    factory<span class=\"token punctuation\">.</span><span class=\"token function\">getContainerProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPollTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">consumerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultKafkaConsumerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">consumerConfigs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">consumerConfigs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> propsMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    propsMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>BOOTSTRAP_SERVERS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost:2181\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    propsMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>ENABLE_AUTO_COMMIT_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    propsMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>AUTO_COMMIT_INTERVAL_MS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 最大拉取消息条数， 默认 500 ,可以调大此参数， 此参数过大， 也可能会出现 OOM</span>\n    propsMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>MAX_POLL_RECORDS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    propsMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>SESSION_TIMEOUT_MS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    propsMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>KEY_DESERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    propsMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>VALUE_DESERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    propsMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>AUTO_OFFSET_RESET_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> propsMap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>消费</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">KafkaConsumeService</span> kafkaConsumerService<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"$&#123;topic&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$&#123;topic2&#125;\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"$&#123;group.id&#125;\"</span><span class=\"token punctuation\">,</span> containerFactory <span class=\"token operator\">=</span> <span class=\"token string\">\"listenerContainerFactory\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        kafkaConsumerService<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumeServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">KafkaConsumeService</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ADMapper</span> <span class=\"token class-name\">AdMapper</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 批量消费\n     * @param records\n     */</span>\n    <span class=\"token annotation punctuation\">@Async</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"executor\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        records<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">consume</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 单条消费\n     * @param record\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConsumeServiceImpl.consume, key=&#123;&#125;, value=&#123;&#125;\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">saveInDb</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConsumeServiceImpl.consume error, \"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>@Async  的使用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableAsync</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExecutorConfig</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/**\n     * Set the ThreadPoolExecutor's core pool size.\n     */</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;executor.corepoolsize:8&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * Set the ThreadPoolExecutor's maximum pool size.\n     */</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;executor.maxpoolsize:10&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> maxPoolSize<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * Set the capacity for the ThreadPoolExecutor's BlockingQueue.\n     */</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;executor.queueCapacity:500&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> queueCapacity<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"executor\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Executor</span> <span class=\"token function\">insertExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ThreadPoolTaskExecutor</span> executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">setCorePoolSize</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxPoolSize</span><span class=\"token punctuation\">(</span>maxPoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">setQueueCapacity</span><span class=\"token punctuation\">(</span>queueCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">setThreadNamePrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"executor-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">setRejectedExecutionHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>CallerRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> executor<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"Async-使用注意\"><a href=\"#Async-使用注意\" class=\"headerlink\" title=\"@Async 使用注意\"></a>@Async 使用注意</h2><blockquote>\n<p><code>@Async</code> 标注的方法，称之为异步方法；这些方法将在执行的时候，将会在独立的线程中被执行，调用者无需等待它的完成，即可继续其他的操作</p>\n</blockquote>\n<ol>\n<li><code>@EnableAsync</code><br>  <code>@EnableAsync</code> 不能放在启动类上</li>\n<li>被注解的方法 需要返回值 为 <code>void</code>, 或者<code>Future</code>, 否则 <code>@Async</code> 无效</li>\n<li><code>@Async</code> 注解的方法 和 其调用方法 不能放在同一个类里， 否则 <code>@Async</code> 注解无效</li>\n</ol>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>生产环境上 参数可以微调</p>\n<ul>\n<li>每次最大拉取的条数，</li>\n<li>线程池数， 以及队列数目</li>\n<li>JVM 堆大小调整</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实 kafka 的 消费速率很快，一般就是 一个 for 循环不停地拉取消息，然后交给线程池异步处理，一般不会产生消息堆积。<br>消息消费情况 可 堆积情况 一般都可以看一下监控， 我这次最多堆积了 10 亿条， (原因就是对 @Async 不了解，将@Async 和其调动方法卸载了同一个类里  😢😢)</p>\n","categories":["kafka","consumer"],"tags":["kafka"]}]